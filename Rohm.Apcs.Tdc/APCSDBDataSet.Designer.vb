'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5420
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("APCSDBDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class APCSDBDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableLOT1_DATA As LOT1_DATADataTable
    
    Private tableLOT1_TABLE As LOT1_TABLEDataTable
    
    Private tableLOT2_DATA As LOT2_DATADataTable
    
    Private tableLOT2_TABLE As LOT2_TABLEDataTable
    
    Private tableMACHI_TABLE As MACHI_TABLEDataTable
    
    Private tableWorkData As WorkDataDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("LOT1_DATA")) Is Nothing) Then
                MyBase.Tables.Add(New LOT1_DATADataTable(ds.Tables("LOT1_DATA")))
            End If
            If (Not (ds.Tables("LOT1_TABLE")) Is Nothing) Then
                MyBase.Tables.Add(New LOT1_TABLEDataTable(ds.Tables("LOT1_TABLE")))
            End If
            If (Not (ds.Tables("LOT2_DATA")) Is Nothing) Then
                MyBase.Tables.Add(New LOT2_DATADataTable(ds.Tables("LOT2_DATA")))
            End If
            If (Not (ds.Tables("LOT2_TABLE")) Is Nothing) Then
                MyBase.Tables.Add(New LOT2_TABLEDataTable(ds.Tables("LOT2_TABLE")))
            End If
            If (Not (ds.Tables("MACHI_TABLE")) Is Nothing) Then
                MyBase.Tables.Add(New MACHI_TABLEDataTable(ds.Tables("MACHI_TABLE")))
            End If
            If (Not (ds.Tables("WorkData")) Is Nothing) Then
                MyBase.Tables.Add(New WorkDataDataTable(ds.Tables("WorkData")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LOT1_DATA() As LOT1_DATADataTable
        Get
            Return Me.tableLOT1_DATA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LOT1_TABLE() As LOT1_TABLEDataTable
        Get
            Return Me.tableLOT1_TABLE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LOT2_DATA() As LOT2_DATADataTable
        Get
            Return Me.tableLOT2_DATA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LOT2_TABLE() As LOT2_TABLEDataTable
        Get
            Return Me.tableLOT2_TABLE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MACHI_TABLE() As MACHI_TABLEDataTable
        Get
            Return Me.tableMACHI_TABLE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property WorkData() As WorkDataDataTable
        Get
            Return Me.tableWorkData
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As APCSDBDataSet = CType(MyBase.Clone,APCSDBDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("LOT1_DATA")) Is Nothing) Then
                MyBase.Tables.Add(New LOT1_DATADataTable(ds.Tables("LOT1_DATA")))
            End If
            If (Not (ds.Tables("LOT1_TABLE")) Is Nothing) Then
                MyBase.Tables.Add(New LOT1_TABLEDataTable(ds.Tables("LOT1_TABLE")))
            End If
            If (Not (ds.Tables("LOT2_DATA")) Is Nothing) Then
                MyBase.Tables.Add(New LOT2_DATADataTable(ds.Tables("LOT2_DATA")))
            End If
            If (Not (ds.Tables("LOT2_TABLE")) Is Nothing) Then
                MyBase.Tables.Add(New LOT2_TABLEDataTable(ds.Tables("LOT2_TABLE")))
            End If
            If (Not (ds.Tables("MACHI_TABLE")) Is Nothing) Then
                MyBase.Tables.Add(New MACHI_TABLEDataTable(ds.Tables("MACHI_TABLE")))
            End If
            If (Not (ds.Tables("WorkData")) Is Nothing) Then
                MyBase.Tables.Add(New WorkDataDataTable(ds.Tables("WorkData")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableLOT1_DATA = CType(MyBase.Tables("LOT1_DATA"),LOT1_DATADataTable)
        If (initTable = true) Then
            If (Not (Me.tableLOT1_DATA) Is Nothing) Then
                Me.tableLOT1_DATA.InitVars
            End If
        End If
        Me.tableLOT1_TABLE = CType(MyBase.Tables("LOT1_TABLE"),LOT1_TABLEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLOT1_TABLE) Is Nothing) Then
                Me.tableLOT1_TABLE.InitVars
            End If
        End If
        Me.tableLOT2_DATA = CType(MyBase.Tables("LOT2_DATA"),LOT2_DATADataTable)
        If (initTable = true) Then
            If (Not (Me.tableLOT2_DATA) Is Nothing) Then
                Me.tableLOT2_DATA.InitVars
            End If
        End If
        Me.tableLOT2_TABLE = CType(MyBase.Tables("LOT2_TABLE"),LOT2_TABLEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLOT2_TABLE) Is Nothing) Then
                Me.tableLOT2_TABLE.InitVars
            End If
        End If
        Me.tableMACHI_TABLE = CType(MyBase.Tables("MACHI_TABLE"),MACHI_TABLEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMACHI_TABLE) Is Nothing) Then
                Me.tableMACHI_TABLE.InitVars
            End If
        End If
        Me.tableWorkData = CType(MyBase.Tables("WorkData"),WorkDataDataTable)
        If (initTable = true) Then
            If (Not (Me.tableWorkData) Is Nothing) Then
                Me.tableWorkData.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "APCSDBDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/APCSDBDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableLOT1_DATA = New LOT1_DATADataTable
        MyBase.Tables.Add(Me.tableLOT1_DATA)
        Me.tableLOT1_TABLE = New LOT1_TABLEDataTable
        MyBase.Tables.Add(Me.tableLOT1_TABLE)
        Me.tableLOT2_DATA = New LOT2_DATADataTable
        MyBase.Tables.Add(Me.tableLOT2_DATA)
        Me.tableLOT2_TABLE = New LOT2_TABLEDataTable
        MyBase.Tables.Add(Me.tableLOT2_TABLE)
        Me.tableMACHI_TABLE = New MACHI_TABLEDataTable
        MyBase.Tables.Add(Me.tableMACHI_TABLE)
        Me.tableWorkData = New WorkDataDataTable
        MyBase.Tables.Add(Me.tableWorkData)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeLOT1_DATA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeLOT1_TABLE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeLOT2_DATA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeLOT2_TABLE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMACHI_TABLE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeWorkData() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As APCSDBDataSet = New APCSDBDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub LOT1_DATARowChangeEventHandler(ByVal sender As Object, ByVal e As LOT1_DATARowChangeEvent)
    
    Public Delegate Sub LOT1_TABLERowChangeEventHandler(ByVal sender As Object, ByVal e As LOT1_TABLERowChangeEvent)
    
    Public Delegate Sub LOT2_DATARowChangeEventHandler(ByVal sender As Object, ByVal e As LOT2_DATARowChangeEvent)
    
    Public Delegate Sub LOT2_TABLERowChangeEventHandler(ByVal sender As Object, ByVal e As LOT2_TABLERowChangeEvent)
    
    Public Delegate Sub MACHI_TABLERowChangeEventHandler(ByVal sender As Object, ByVal e As MACHI_TABLERowChangeEvent)
    
    Public Delegate Sub WorkDataRowChangeEventHandler(ByVal sender As Object, ByVal e As WorkDataRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LOT1_DATADataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnLOT_NO As Global.System.Data.DataColumn
        
        Private columnOPE_SEQ As Global.System.Data.DataColumn
        
        Private columnN_OPE_SEQ As Global.System.Data.DataColumn
        
        Private columnLAY_NO As Global.System.Data.DataColumn
        
        Private columnB_PLAN_DAY As Global.System.Data.DataColumn
        
        Private columnPLAN_DAY As Global.System.Data.DataColumn
        
        Private columnRECIPE As Global.System.Data.DataColumn
        
        Private columnSTART_MSG As Global.System.Data.DataColumn
        
        Private columnEND_MSG As Global.System.Data.DataColumn
        
        Private columnSTOP_FLG As Global.System.Data.DataColumn
        
        Private columnSTOP_REASON As Global.System.Data.DataColumn
        
        Private columnSTOP_NAME As Global.System.Data.DataColumn
        
        Private columnLIMIT_TIME1 As Global.System.Data.DataColumn
        
        Private columnLIMIT_MSG1 As Global.System.Data.DataColumn
        
        Private columnLIMIT_TIME2 As Global.System.Data.DataColumn
        
        Private columnLIMIT_MSG2 As Global.System.Data.DataColumn
        
        Private columnOPE_AREA As Global.System.Data.DataColumn
        
        Private columnLIMIT_FLG As Global.System.Data.DataColumn
        
        Private columnDATA_NO As Global.System.Data.DataColumn
        
        Private columnMASK_NAME As Global.System.Data.DataColumn
        
        Private columnRESERVE_CODE As Global.System.Data.DataColumn
        
        Private columnRESERVE_MACHI As Global.System.Data.DataColumn
        
        Private columnM_START_MSG As Global.System.Data.DataColumn
        
        Private columnM_END_MSG As Global.System.Data.DataColumn
        
        Private columnCOMMENT3 As Global.System.Data.DataColumn
        
        Private columnCOMMENT4 As Global.System.Data.DataColumn
        
        Private columnENABLE_FLG As Global.System.Data.DataColumn
        
        Private columnCREATION_DATE As Global.System.Data.DataColumn
        
        Private columnSEND_FLG As Global.System.Data.DataColumn
        
        Private columnSEND_DATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "LOT1_DATA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPE_SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPE_SEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property N_OPE_SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnN_OPE_SEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LAY_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLAY_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_PLAN_DAYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_PLAN_DAY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PLAN_DAYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLAN_DAY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RECIPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property START_MSGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTART_MSG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property END_MSGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEND_MSG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STOP_FLGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTOP_FLG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STOP_REASONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTOP_REASON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STOP_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTOP_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LIMIT_TIME1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIMIT_TIME1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LIMIT_MSG1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIMIT_MSG1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LIMIT_TIME2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIMIT_TIME2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LIMIT_MSG2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIMIT_MSG2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPE_AREAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPE_AREA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LIMIT_FLGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIMIT_FLG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATA_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATA_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MASK_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMASK_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RESERVE_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESERVE_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RESERVE_MACHIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESERVE_MACHI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_START_MSGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_START_MSG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_END_MSGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_END_MSG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMMENT3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENT3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMMENT4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENT4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ENABLE_FLGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENABLE_FLG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CREATION_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATION_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEND_FLGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEND_FLG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEND_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEND_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LOT1_DATARow
            Get
                Return CType(Me.Rows(index),LOT1_DATARow)
            End Get
        End Property
        
        Public Event LOT1_DATARowChanging As LOT1_DATARowChangeEventHandler
        
        Public Event LOT1_DATARowChanged As LOT1_DATARowChangeEventHandler
        
        Public Event LOT1_DATARowDeleting As LOT1_DATARowChangeEventHandler
        
        Public Event LOT1_DATARowDeleted As LOT1_DATARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddLOT1_DATARow(ByVal row As LOT1_DATARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddLOT1_DATARow( _
                    ByVal LOT_NO As String,  _
                    ByVal OPE_SEQ As Short,  _
                    ByVal N_OPE_SEQ As Short,  _
                    ByVal LAY_NO As String,  _
                    ByVal B_PLAN_DAY As Date,  _
                    ByVal PLAN_DAY As Date,  _
                    ByVal RECIPE As String,  _
                    ByVal START_MSG As String,  _
                    ByVal END_MSG As String,  _
                    ByVal STOP_FLG As String,  _
                    ByVal STOP_REASON As String,  _
                    ByVal STOP_NAME As String,  _
                    ByVal LIMIT_TIME1 As Integer,  _
                    ByVal LIMIT_MSG1 As String,  _
                    ByVal LIMIT_TIME2 As Integer,  _
                    ByVal LIMIT_MSG2 As String,  _
                    ByVal OPE_AREA As String,  _
                    ByVal LIMIT_FLG As String,  _
                    ByVal DATA_NO As Integer,  _
                    ByVal MASK_NAME As String,  _
                    ByVal RESERVE_CODE As String,  _
                    ByVal RESERVE_MACHI As String,  _
                    ByVal M_START_MSG As String,  _
                    ByVal M_END_MSG As String,  _
                    ByVal COMMENT3 As String,  _
                    ByVal COMMENT4 As String,  _
                    ByVal ENABLE_FLG As Short,  _
                    ByVal CREATION_DATE As Date,  _
                    ByVal SEND_FLG As String,  _
                    ByVal SEND_DATE As Date) As LOT1_DATARow
            Dim rowLOT1_DATARow As LOT1_DATARow = CType(Me.NewRow,LOT1_DATARow)
            Dim columnValuesArray() As Object = New Object() {LOT_NO, OPE_SEQ, N_OPE_SEQ, LAY_NO, B_PLAN_DAY, PLAN_DAY, RECIPE, START_MSG, END_MSG, STOP_FLG, STOP_REASON, STOP_NAME, LIMIT_TIME1, LIMIT_MSG1, LIMIT_TIME2, LIMIT_MSG2, OPE_AREA, LIMIT_FLG, DATA_NO, MASK_NAME, RESERVE_CODE, RESERVE_MACHI, M_START_MSG, M_END_MSG, COMMENT3, COMMENT4, ENABLE_FLG, CREATION_DATE, SEND_FLG, SEND_DATE}
            rowLOT1_DATARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowLOT1_DATARow)
            Return rowLOT1_DATARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByLOT_NOOPE_SEQ(ByVal LOT_NO As String, ByVal OPE_SEQ As Short) As LOT1_DATARow
            Return CType(Me.Rows.Find(New Object() {LOT_NO, OPE_SEQ}),LOT1_DATARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As LOT1_DATADataTable = CType(MyBase.Clone,LOT1_DATADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New LOT1_DATADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLOT_NO = MyBase.Columns("LOT_NO")
            Me.columnOPE_SEQ = MyBase.Columns("OPE_SEQ")
            Me.columnN_OPE_SEQ = MyBase.Columns("N_OPE_SEQ")
            Me.columnLAY_NO = MyBase.Columns("LAY_NO")
            Me.columnB_PLAN_DAY = MyBase.Columns("B_PLAN_DAY")
            Me.columnPLAN_DAY = MyBase.Columns("PLAN_DAY")
            Me.columnRECIPE = MyBase.Columns("RECIPE")
            Me.columnSTART_MSG = MyBase.Columns("START_MSG")
            Me.columnEND_MSG = MyBase.Columns("END_MSG")
            Me.columnSTOP_FLG = MyBase.Columns("STOP_FLG")
            Me.columnSTOP_REASON = MyBase.Columns("STOP_REASON")
            Me.columnSTOP_NAME = MyBase.Columns("STOP_NAME")
            Me.columnLIMIT_TIME1 = MyBase.Columns("LIMIT_TIME1")
            Me.columnLIMIT_MSG1 = MyBase.Columns("LIMIT_MSG1")
            Me.columnLIMIT_TIME2 = MyBase.Columns("LIMIT_TIME2")
            Me.columnLIMIT_MSG2 = MyBase.Columns("LIMIT_MSG2")
            Me.columnOPE_AREA = MyBase.Columns("OPE_AREA")
            Me.columnLIMIT_FLG = MyBase.Columns("LIMIT_FLG")
            Me.columnDATA_NO = MyBase.Columns("DATA_NO")
            Me.columnMASK_NAME = MyBase.Columns("MASK_NAME")
            Me.columnRESERVE_CODE = MyBase.Columns("RESERVE_CODE")
            Me.columnRESERVE_MACHI = MyBase.Columns("RESERVE_MACHI")
            Me.columnM_START_MSG = MyBase.Columns("M_START_MSG")
            Me.columnM_END_MSG = MyBase.Columns("M_END_MSG")
            Me.columnCOMMENT3 = MyBase.Columns("COMMENT3")
            Me.columnCOMMENT4 = MyBase.Columns("COMMENT4")
            Me.columnENABLE_FLG = MyBase.Columns("ENABLE_FLG")
            Me.columnCREATION_DATE = MyBase.Columns("CREATION_DATE")
            Me.columnSEND_FLG = MyBase.Columns("SEND_FLG")
            Me.columnSEND_DATE = MyBase.Columns("SEND_DATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLOT_NO = New Global.System.Data.DataColumn("LOT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_NO)
            Me.columnOPE_SEQ = New Global.System.Data.DataColumn("OPE_SEQ", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPE_SEQ)
            Me.columnN_OPE_SEQ = New Global.System.Data.DataColumn("N_OPE_SEQ", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnN_OPE_SEQ)
            Me.columnLAY_NO = New Global.System.Data.DataColumn("LAY_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLAY_NO)
            Me.columnB_PLAN_DAY = New Global.System.Data.DataColumn("B_PLAN_DAY", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_PLAN_DAY)
            Me.columnPLAN_DAY = New Global.System.Data.DataColumn("PLAN_DAY", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLAN_DAY)
            Me.columnRECIPE = New Global.System.Data.DataColumn("RECIPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE)
            Me.columnSTART_MSG = New Global.System.Data.DataColumn("START_MSG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTART_MSG)
            Me.columnEND_MSG = New Global.System.Data.DataColumn("END_MSG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEND_MSG)
            Me.columnSTOP_FLG = New Global.System.Data.DataColumn("STOP_FLG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTOP_FLG)
            Me.columnSTOP_REASON = New Global.System.Data.DataColumn("STOP_REASON", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTOP_REASON)
            Me.columnSTOP_NAME = New Global.System.Data.DataColumn("STOP_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTOP_NAME)
            Me.columnLIMIT_TIME1 = New Global.System.Data.DataColumn("LIMIT_TIME1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIMIT_TIME1)
            Me.columnLIMIT_MSG1 = New Global.System.Data.DataColumn("LIMIT_MSG1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIMIT_MSG1)
            Me.columnLIMIT_TIME2 = New Global.System.Data.DataColumn("LIMIT_TIME2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIMIT_TIME2)
            Me.columnLIMIT_MSG2 = New Global.System.Data.DataColumn("LIMIT_MSG2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIMIT_MSG2)
            Me.columnOPE_AREA = New Global.System.Data.DataColumn("OPE_AREA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPE_AREA)
            Me.columnLIMIT_FLG = New Global.System.Data.DataColumn("LIMIT_FLG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIMIT_FLG)
            Me.columnDATA_NO = New Global.System.Data.DataColumn("DATA_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATA_NO)
            Me.columnMASK_NAME = New Global.System.Data.DataColumn("MASK_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMASK_NAME)
            Me.columnRESERVE_CODE = New Global.System.Data.DataColumn("RESERVE_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESERVE_CODE)
            Me.columnRESERVE_MACHI = New Global.System.Data.DataColumn("RESERVE_MACHI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESERVE_MACHI)
            Me.columnM_START_MSG = New Global.System.Data.DataColumn("M_START_MSG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_START_MSG)
            Me.columnM_END_MSG = New Global.System.Data.DataColumn("M_END_MSG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_END_MSG)
            Me.columnCOMMENT3 = New Global.System.Data.DataColumn("COMMENT3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENT3)
            Me.columnCOMMENT4 = New Global.System.Data.DataColumn("COMMENT4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENT4)
            Me.columnENABLE_FLG = New Global.System.Data.DataColumn("ENABLE_FLG", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENABLE_FLG)
            Me.columnCREATION_DATE = New Global.System.Data.DataColumn("CREATION_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATION_DATE)
            Me.columnSEND_FLG = New Global.System.Data.DataColumn("SEND_FLG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEND_FLG)
            Me.columnSEND_DATE = New Global.System.Data.DataColumn("SEND_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEND_DATE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnLOT_NO, Me.columnOPE_SEQ}, true))
            Me.columnLOT_NO.AllowDBNull = false
            Me.columnLOT_NO.MaxLength = 13
            Me.columnOPE_SEQ.AllowDBNull = false
            Me.columnN_OPE_SEQ.AllowDBNull = false
            Me.columnLAY_NO.AllowDBNull = false
            Me.columnLAY_NO.MaxLength = 52
            Me.columnRECIPE.MaxLength = 50
            Me.columnSTART_MSG.MaxLength = 256
            Me.columnEND_MSG.MaxLength = 256
            Me.columnSTOP_FLG.AllowDBNull = false
            Me.columnSTOP_FLG.MaxLength = 1
            Me.columnSTOP_REASON.MaxLength = 15
            Me.columnSTOP_NAME.MaxLength = 8
            Me.columnLIMIT_TIME1.AllowDBNull = false
            Me.columnLIMIT_MSG1.MaxLength = 30
            Me.columnLIMIT_TIME2.AllowDBNull = false
            Me.columnLIMIT_MSG2.MaxLength = 30
            Me.columnOPE_AREA.MaxLength = 15
            Me.columnLIMIT_FLG.AllowDBNull = false
            Me.columnLIMIT_FLG.MaxLength = 1
            Me.columnDATA_NO.AllowDBNull = false
            Me.columnMASK_NAME.MaxLength = 10
            Me.columnRESERVE_CODE.MaxLength = 10
            Me.columnRESERVE_MACHI.MaxLength = 10
            Me.columnM_START_MSG.MaxLength = 256
            Me.columnM_END_MSG.MaxLength = 256
            Me.columnCOMMENT3.MaxLength = 512
            Me.columnCOMMENT4.MaxLength = 256
            Me.columnSEND_FLG.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewLOT1_DATARow() As LOT1_DATARow
            Return CType(Me.NewRow,LOT1_DATARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New LOT1_DATARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(LOT1_DATARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LOT1_DATARowChangedEvent) Is Nothing) Then
                RaiseEvent LOT1_DATARowChanged(Me, New LOT1_DATARowChangeEvent(CType(e.Row,LOT1_DATARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LOT1_DATARowChangingEvent) Is Nothing) Then
                RaiseEvent LOT1_DATARowChanging(Me, New LOT1_DATARowChangeEvent(CType(e.Row,LOT1_DATARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LOT1_DATARowDeletedEvent) Is Nothing) Then
                RaiseEvent LOT1_DATARowDeleted(Me, New LOT1_DATARowChangeEvent(CType(e.Row,LOT1_DATARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LOT1_DATARowDeletingEvent) Is Nothing) Then
                RaiseEvent LOT1_DATARowDeleting(Me, New LOT1_DATARowChangeEvent(CType(e.Row,LOT1_DATARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveLOT1_DATARow(ByVal row As LOT1_DATARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As APCSDBDataSet = New APCSDBDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LOT1_DATADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LOT1_TABLEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnLOT_NO As Global.System.Data.DataColumn
        
        Private columnDVI_NO As Global.System.Data.DataColumn
        
        Private columnPRD_NAME As Global.System.Data.DataColumn
        
        Private columnIN_DAY As Global.System.Data.DataColumn
        
        Private columnOUT_DAY As Global.System.Data.DataColumn
        
        Private columnOPE_SEQ As Global.System.Data.DataColumn
        
        Private columnPRD_PIECE As Global.System.Data.DataColumn
        
        Private columnINP_PIECE As Global.System.Data.DataColumn
        
        Private columnOUT_PIECE As Global.System.Data.DataColumn
        
        Private columnREAL_DAY As Global.System.Data.DataColumn
        
        Private columnBATCH_NO As Global.System.Data.DataColumn
        
        Private columnBATCH_SUB As Global.System.Data.DataColumn
        
        Private columnMATER_NAME As Global.System.Data.DataColumn
        
        Private columnMATER_SNAME As Global.System.Data.DataColumn
        
        Private columnMAKER As Global.System.Data.DataColumn
        
        Private columnY_LEVEL As Global.System.Data.DataColumn
        
        Private columnSTATUS1 As Global.System.Data.DataColumn
        
        Private columnSTATUS2 As Global.System.Data.DataColumn
        
        Private columnCYCLE As Global.System.Data.DataColumn
        
        Private columnBOX_NO As Global.System.Data.DataColumn
        
        Private columnPRV_BOX_NO As Global.System.Data.DataColumn
        
        Private columnWAFER_STATUS As Global.System.Data.DataColumn
        
        Private columnLMT_STR_TIME As Global.System.Data.DataColumn
        
        Private columnWAGON_NO As Global.System.Data.DataColumn
        
        Private columnREP_OPE_SEQ As Global.System.Data.DataColumn
        
        Private columnREPEAT_QNT As Global.System.Data.DataColumn
        
        Private columnTOTAL_MASK As Global.System.Data.DataColumn
        
        Private columnSTATUS2_SAVE As Global.System.Data.DataColumn
        
        Private columnREAL_START As Global.System.Data.DataColumn
        
        Private columnTRO_TIME As Global.System.Data.DataColumn
        
        Private columnSISAKU_FLG As Global.System.Data.DataColumn
        
        Private columnPARENT_LOT As Global.System.Data.DataColumn
        
        Private columnOPE_AREA As Global.System.Data.DataColumn
        
        Private columnOPE_CHG_FLG As Global.System.Data.DataColumn
        
        Private columnPLT_OPE_SEQ1 As Global.System.Data.DataColumn
        
        Private columnPLT_OPE_SEQ2 As Global.System.Data.DataColumn
        
        Private columnPILOT_QNT As Global.System.Data.DataColumn
        
        Private columnTOTAL_QNT As Global.System.Data.DataColumn
        
        Private columnCOMMENT As Global.System.Data.DataColumn
        
        Private columnROHM_ORDER_MODEL_NAME_O As Global.System.Data.DataColumn
        
        Private columnORDER_NO As Global.System.Data.DataColumn
        
        Private columnFT_MODEL_NAME As Global.System.Data.DataColumn
        
        Private columnTP_RANK As Global.System.Data.DataColumn
        
        Private columnWARI_STOCK_KBN As Global.System.Data.DataColumn
        
        Private columnWARI_INSTRUCT_KBN As Global.System.Data.DataColumn
        
        Private columnFORM_NAME As Global.System.Data.DataColumn
        
        Private columnGOOD_PIECES As Global.System.Data.DataColumn
        
        Private columnBAD_PIECES As Global.System.Data.DataColumn
        
        Private columnShipTargetChipCount As Global.System.Data.DataColumn
        
        Private columnOfficialChipCount As Global.System.Data.DataColumn
        
        Private columnRestLotInitialChipCount As Global.System.Data.DataColumn
        
        Private columnRestLotInitialInputMagazine As Global.System.Data.DataColumn
        
        Private columnRestLotInitialInputFrame As Global.System.Data.DataColumn
        
        Private columnSection As Global.System.Data.DataColumn
        
        Private columnInvoiceNo As Global.System.Data.DataColumn
        
        Private columnQCCheckDBNG As Global.System.Data.DataColumn
        
        Private columnQCCheckDBPNashi As Global.System.Data.DataColumn
        
        Private columnQCCheckHajikiPullShaer As Global.System.Data.DataColumn
        
        Private columnQCCheckWBNG As Global.System.Data.DataColumn
        
        Private columnQCCheckWBInsNG As Global.System.Data.DataColumn
        
        Private columnQCCheckOSNG As Global.System.Data.DataColumn
        
        Private columnQCCheckJudge As Global.System.Data.DataColumn
        
        Private columnQCCheckerPD As Global.System.Data.DataColumn
        
        Private columnQCCheckerQC As Global.System.Data.DataColumn
        
        Private columnQCAQIIssueDate As Global.System.Data.DataColumn
        
        Private columnQCCheckExceptOSNG As Global.System.Data.DataColumn
        
        Private columnQCMainReasonExceptOSNG As Global.System.Data.DataColumn
        
        Private columnQCNGChipInExceptOSNG As Global.System.Data.DataColumn
        
        Private columnQCNGIncludeExceptOSNG As Global.System.Data.DataColumn
        
        Private columnQCNGJudgeExceptOSNG As Global.System.Data.DataColumn
        
        Private columnQCNGChipInGoodChip As Global.System.Data.DataColumn
        
        Private columnQCNGIncludeGoodChip As Global.System.Data.DataColumn
        
        Private columnQCNGJudgeGoodChip As Global.System.Data.DataColumn
        
        Private columnCREATION_DATE As Global.System.Data.DataColumn
        
        Private columnSEND_FLG As Global.System.Data.DataColumn
        
        Private columnSEND_DATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "LOT1_TABLE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DVI_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDVI_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRD_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRD_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IN_DAYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIN_DAY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_DAYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_DAY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPE_SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPE_SEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRD_PIECEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRD_PIECE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INP_PIECEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINP_PIECE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_PIECEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_PIECE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REAL_DAYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREAL_DAY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BATCH_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BATCH_SUBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_SUB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MATER_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMATER_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MATER_SNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMATER_SNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAKERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAKER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Y_LEVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnY_LEVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CYCLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCYCLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BOX_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBOX_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRV_BOX_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRV_BOX_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WAFER_STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWAFER_STATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LMT_STR_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLMT_STR_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WAGON_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWAGON_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REP_OPE_SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREP_OPE_SEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REPEAT_QNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREPEAT_QNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_MASKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_MASK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS2_SAVEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS2_SAVE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REAL_STARTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREAL_START
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRO_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRO_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SISAKU_FLGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSISAKU_FLG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PARENT_LOTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPARENT_LOT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPE_AREAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPE_AREA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPE_CHG_FLGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPE_CHG_FLG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PLT_OPE_SEQ1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLT_OPE_SEQ1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PLT_OPE_SEQ2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLT_OPE_SEQ2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PILOT_QNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPILOT_QNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_QNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_QNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMMENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ROHM_ORDER_MODEL_NAME_OColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROHM_ORDER_MODEL_NAME_O
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDER_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDER_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FT_MODEL_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFT_MODEL_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TP_RANKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTP_RANK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WARI_STOCK_KBNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWARI_STOCK_KBN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WARI_INSTRUCT_KBNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWARI_INSTRUCT_KBN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FORM_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFORM_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GOOD_PIECESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGOOD_PIECES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BAD_PIECESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBAD_PIECES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShipTargetChipCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipTargetChipCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OfficialChipCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOfficialChipCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RestLotInitialChipCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRestLotInitialChipCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RestLotInitialInputMagazineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRestLotInitialInputMagazine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RestLotInitialInputFrameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRestLotInitialInputFrame
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoiceNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoiceNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCCheckDBNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCCheckDBNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCCheckDBPNashiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCCheckDBPNashi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCCheckHajikiPullShaerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCCheckHajikiPullShaer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCCheckWBNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCCheckWBNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCCheckWBInsNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCCheckWBInsNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCCheckOSNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCCheckOSNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCCheckJudgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCCheckJudge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCCheckerPDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCCheckerPD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCCheckerQCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCCheckerQC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCAQIIssueDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCAQIIssueDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCCheckExceptOSNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCCheckExceptOSNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCMainReasonExceptOSNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCMainReasonExceptOSNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCNGChipInExceptOSNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCNGChipInExceptOSNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCNGIncludeExceptOSNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCNGIncludeExceptOSNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCNGJudgeExceptOSNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCNGJudgeExceptOSNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCNGChipInGoodChipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCNGChipInGoodChip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCNGIncludeGoodChipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCNGIncludeGoodChip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCNGJudgeGoodChipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCNGJudgeGoodChip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CREATION_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATION_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEND_FLGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEND_FLG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEND_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEND_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LOT1_TABLERow
            Get
                Return CType(Me.Rows(index),LOT1_TABLERow)
            End Get
        End Property
        
        Public Event LOT1_TABLERowChanging As LOT1_TABLERowChangeEventHandler
        
        Public Event LOT1_TABLERowChanged As LOT1_TABLERowChangeEventHandler
        
        Public Event LOT1_TABLERowDeleting As LOT1_TABLERowChangeEventHandler
        
        Public Event LOT1_TABLERowDeleted As LOT1_TABLERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddLOT1_TABLERow(ByVal row As LOT1_TABLERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddLOT1_TABLERow( _
                    ByVal LOT_NO As String,  _
                    ByVal DVI_NO As Integer,  _
                    ByVal PRD_NAME As String,  _
                    ByVal IN_DAY As String,  _
                    ByVal OUT_DAY As String,  _
                    ByVal OPE_SEQ As Short,  _
                    ByVal PRD_PIECE As Integer,  _
                    ByVal INP_PIECE As Integer,  _
                    ByVal OUT_PIECE As Integer,  _
                    ByVal REAL_DAY As Date,  _
                    ByVal BATCH_NO As String,  _
                    ByVal BATCH_SUB As String,  _
                    ByVal MATER_NAME As String,  _
                    ByVal MATER_SNAME As String,  _
                    ByVal MAKER As String,  _
                    ByVal Y_LEVEL As String,  _
                    ByVal STATUS1 As String,  _
                    ByVal STATUS2 As String,  _
                    ByVal CYCLE As Short,  _
                    ByVal BOX_NO As String,  _
                    ByVal PRV_BOX_NO As String,  _
                    ByVal WAFER_STATUS As String,  _
                    ByVal LMT_STR_TIME As Date,  _
                    ByVal WAGON_NO As String,  _
                    ByVal REP_OPE_SEQ As Short,  _
                    ByVal REPEAT_QNT As Short,  _
                    ByVal TOTAL_MASK As String,  _
                    ByVal STATUS2_SAVE As String,  _
                    ByVal REAL_START As Date,  _
                    ByVal TRO_TIME As Date,  _
                    ByVal SISAKU_FLG As String,  _
                    ByVal PARENT_LOT As String,  _
                    ByVal OPE_AREA As String,  _
                    ByVal OPE_CHG_FLG As String,  _
                    ByVal PLT_OPE_SEQ1 As Short,  _
                    ByVal PLT_OPE_SEQ2 As Short,  _
                    ByVal PILOT_QNT As Short,  _
                    ByVal TOTAL_QNT As Short,  _
                    ByVal COMMENT As String,  _
                    ByVal ROHM_ORDER_MODEL_NAME_O As String,  _
                    ByVal ORDER_NO As String,  _
                    ByVal FT_MODEL_NAME As String,  _
                    ByVal TP_RANK As String,  _
                    ByVal WARI_STOCK_KBN As Short,  _
                    ByVal WARI_INSTRUCT_KBN As Short,  _
                    ByVal FORM_NAME As String,  _
                    ByVal GOOD_PIECES As Integer,  _
                    ByVal BAD_PIECES As Integer,  _
                    ByVal ShipTargetChipCount As Integer,  _
                    ByVal OfficialChipCount As Integer,  _
                    ByVal RestLotInitialChipCount As Integer,  _
                    ByVal RestLotInitialInputMagazine As Short,  _
                    ByVal RestLotInitialInputFrame As Short,  _
                    ByVal Section As String,  _
                    ByVal InvoiceNo As String,  _
                    ByVal QCCheckDBNG As Integer,  _
                    ByVal QCCheckDBPNashi As Integer,  _
                    ByVal QCCheckHajikiPullShaer As Integer,  _
                    ByVal QCCheckWBNG As Integer,  _
                    ByVal QCCheckWBInsNG As Integer,  _
                    ByVal QCCheckOSNG As Integer,  _
                    ByVal QCCheckJudge As Short,  _
                    ByVal QCCheckerPD As String,  _
                    ByVal QCCheckerQC As String,  _
                    ByVal QCAQIIssueDate As Date,  _
                    ByVal QCCheckExceptOSNG As Integer,  _
                    ByVal QCMainReasonExceptOSNG As String,  _
                    ByVal QCNGChipInExceptOSNG As Integer,  _
                    ByVal QCNGIncludeExceptOSNG As Short,  _
                    ByVal QCNGJudgeExceptOSNG As Short,  _
                    ByVal QCNGChipInGoodChip As Integer,  _
                    ByVal QCNGIncludeGoodChip As Short,  _
                    ByVal QCNGJudgeGoodChip As Short,  _
                    ByVal CREATION_DATE As Date,  _
                    ByVal SEND_FLG As String,  _
                    ByVal SEND_DATE As Date) As LOT1_TABLERow
            Dim rowLOT1_TABLERow As LOT1_TABLERow = CType(Me.NewRow,LOT1_TABLERow)
            Dim columnValuesArray() As Object = New Object() {LOT_NO, DVI_NO, PRD_NAME, IN_DAY, OUT_DAY, OPE_SEQ, PRD_PIECE, INP_PIECE, OUT_PIECE, REAL_DAY, BATCH_NO, BATCH_SUB, MATER_NAME, MATER_SNAME, MAKER, Y_LEVEL, STATUS1, STATUS2, CYCLE, BOX_NO, PRV_BOX_NO, WAFER_STATUS, LMT_STR_TIME, WAGON_NO, REP_OPE_SEQ, REPEAT_QNT, TOTAL_MASK, STATUS2_SAVE, REAL_START, TRO_TIME, SISAKU_FLG, PARENT_LOT, OPE_AREA, OPE_CHG_FLG, PLT_OPE_SEQ1, PLT_OPE_SEQ2, PILOT_QNT, TOTAL_QNT, COMMENT, ROHM_ORDER_MODEL_NAME_O, ORDER_NO, FT_MODEL_NAME, TP_RANK, WARI_STOCK_KBN, WARI_INSTRUCT_KBN, FORM_NAME, GOOD_PIECES, BAD_PIECES, ShipTargetChipCount, OfficialChipCount, RestLotInitialChipCount, RestLotInitialInputMagazine, RestLotInitialInputFrame, Section, InvoiceNo, QCCheckDBNG, QCCheckDBPNashi, QCCheckHajikiPullShaer, QCCheckWBNG, QCCheckWBInsNG, QCCheckOSNG, QCCheckJudge, QCCheckerPD, QCCheckerQC, QCAQIIssueDate, QCCheckExceptOSNG, QCMainReasonExceptOSNG, QCNGChipInExceptOSNG, QCNGIncludeExceptOSNG, QCNGJudgeExceptOSNG, QCNGChipInGoodChip, QCNGIncludeGoodChip, QCNGJudgeGoodChip, CREATION_DATE, SEND_FLG, SEND_DATE}
            rowLOT1_TABLERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowLOT1_TABLERow)
            Return rowLOT1_TABLERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByLOT_NO(ByVal LOT_NO As String) As LOT1_TABLERow
            Return CType(Me.Rows.Find(New Object() {LOT_NO}),LOT1_TABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As LOT1_TABLEDataTable = CType(MyBase.Clone,LOT1_TABLEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New LOT1_TABLEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLOT_NO = MyBase.Columns("LOT_NO")
            Me.columnDVI_NO = MyBase.Columns("DVI_NO")
            Me.columnPRD_NAME = MyBase.Columns("PRD_NAME")
            Me.columnIN_DAY = MyBase.Columns("IN_DAY")
            Me.columnOUT_DAY = MyBase.Columns("OUT_DAY")
            Me.columnOPE_SEQ = MyBase.Columns("OPE_SEQ")
            Me.columnPRD_PIECE = MyBase.Columns("PRD_PIECE")
            Me.columnINP_PIECE = MyBase.Columns("INP_PIECE")
            Me.columnOUT_PIECE = MyBase.Columns("OUT_PIECE")
            Me.columnREAL_DAY = MyBase.Columns("REAL_DAY")
            Me.columnBATCH_NO = MyBase.Columns("BATCH_NO")
            Me.columnBATCH_SUB = MyBase.Columns("BATCH_SUB")
            Me.columnMATER_NAME = MyBase.Columns("MATER_NAME")
            Me.columnMATER_SNAME = MyBase.Columns("MATER_SNAME")
            Me.columnMAKER = MyBase.Columns("MAKER")
            Me.columnY_LEVEL = MyBase.Columns("Y_LEVEL")
            Me.columnSTATUS1 = MyBase.Columns("STATUS1")
            Me.columnSTATUS2 = MyBase.Columns("STATUS2")
            Me.columnCYCLE = MyBase.Columns("CYCLE")
            Me.columnBOX_NO = MyBase.Columns("BOX_NO")
            Me.columnPRV_BOX_NO = MyBase.Columns("PRV_BOX_NO")
            Me.columnWAFER_STATUS = MyBase.Columns("WAFER_STATUS")
            Me.columnLMT_STR_TIME = MyBase.Columns("LMT_STR_TIME")
            Me.columnWAGON_NO = MyBase.Columns("WAGON_NO")
            Me.columnREP_OPE_SEQ = MyBase.Columns("REP_OPE_SEQ")
            Me.columnREPEAT_QNT = MyBase.Columns("REPEAT_QNT")
            Me.columnTOTAL_MASK = MyBase.Columns("TOTAL_MASK")
            Me.columnSTATUS2_SAVE = MyBase.Columns("STATUS2_SAVE")
            Me.columnREAL_START = MyBase.Columns("REAL_START")
            Me.columnTRO_TIME = MyBase.Columns("TRO_TIME")
            Me.columnSISAKU_FLG = MyBase.Columns("SISAKU_FLG")
            Me.columnPARENT_LOT = MyBase.Columns("PARENT_LOT")
            Me.columnOPE_AREA = MyBase.Columns("OPE_AREA")
            Me.columnOPE_CHG_FLG = MyBase.Columns("OPE_CHG_FLG")
            Me.columnPLT_OPE_SEQ1 = MyBase.Columns("PLT_OPE_SEQ1")
            Me.columnPLT_OPE_SEQ2 = MyBase.Columns("PLT_OPE_SEQ2")
            Me.columnPILOT_QNT = MyBase.Columns("PILOT_QNT")
            Me.columnTOTAL_QNT = MyBase.Columns("TOTAL_QNT")
            Me.columnCOMMENT = MyBase.Columns("COMMENT")
            Me.columnROHM_ORDER_MODEL_NAME_O = MyBase.Columns("ROHM_ORDER_MODEL_NAME_O")
            Me.columnORDER_NO = MyBase.Columns("ORDER_NO")
            Me.columnFT_MODEL_NAME = MyBase.Columns("FT_MODEL_NAME")
            Me.columnTP_RANK = MyBase.Columns("TP_RANK")
            Me.columnWARI_STOCK_KBN = MyBase.Columns("WARI_STOCK_KBN")
            Me.columnWARI_INSTRUCT_KBN = MyBase.Columns("WARI_INSTRUCT_KBN")
            Me.columnFORM_NAME = MyBase.Columns("FORM_NAME")
            Me.columnGOOD_PIECES = MyBase.Columns("GOOD_PIECES")
            Me.columnBAD_PIECES = MyBase.Columns("BAD_PIECES")
            Me.columnShipTargetChipCount = MyBase.Columns("ShipTargetChipCount")
            Me.columnOfficialChipCount = MyBase.Columns("OfficialChipCount")
            Me.columnRestLotInitialChipCount = MyBase.Columns("RestLotInitialChipCount")
            Me.columnRestLotInitialInputMagazine = MyBase.Columns("RestLotInitialInputMagazine")
            Me.columnRestLotInitialInputFrame = MyBase.Columns("RestLotInitialInputFrame")
            Me.columnSection = MyBase.Columns("Section")
            Me.columnInvoiceNo = MyBase.Columns("InvoiceNo")
            Me.columnQCCheckDBNG = MyBase.Columns("QCCheckDBNG")
            Me.columnQCCheckDBPNashi = MyBase.Columns("QCCheckDBPNashi")
            Me.columnQCCheckHajikiPullShaer = MyBase.Columns("QCCheckHajikiPullShaer")
            Me.columnQCCheckWBNG = MyBase.Columns("QCCheckWBNG")
            Me.columnQCCheckWBInsNG = MyBase.Columns("QCCheckWBInsNG")
            Me.columnQCCheckOSNG = MyBase.Columns("QCCheckOSNG")
            Me.columnQCCheckJudge = MyBase.Columns("QCCheckJudge")
            Me.columnQCCheckerPD = MyBase.Columns("QCCheckerPD")
            Me.columnQCCheckerQC = MyBase.Columns("QCCheckerQC")
            Me.columnQCAQIIssueDate = MyBase.Columns("QCAQIIssueDate")
            Me.columnQCCheckExceptOSNG = MyBase.Columns("QCCheckExceptOSNG")
            Me.columnQCMainReasonExceptOSNG = MyBase.Columns("QCMainReasonExceptOSNG")
            Me.columnQCNGChipInExceptOSNG = MyBase.Columns("QCNGChipInExceptOSNG")
            Me.columnQCNGIncludeExceptOSNG = MyBase.Columns("QCNGIncludeExceptOSNG")
            Me.columnQCNGJudgeExceptOSNG = MyBase.Columns("QCNGJudgeExceptOSNG")
            Me.columnQCNGChipInGoodChip = MyBase.Columns("QCNGChipInGoodChip")
            Me.columnQCNGIncludeGoodChip = MyBase.Columns("QCNGIncludeGoodChip")
            Me.columnQCNGJudgeGoodChip = MyBase.Columns("QCNGJudgeGoodChip")
            Me.columnCREATION_DATE = MyBase.Columns("CREATION_DATE")
            Me.columnSEND_FLG = MyBase.Columns("SEND_FLG")
            Me.columnSEND_DATE = MyBase.Columns("SEND_DATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLOT_NO = New Global.System.Data.DataColumn("LOT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_NO)
            Me.columnDVI_NO = New Global.System.Data.DataColumn("DVI_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDVI_NO)
            Me.columnPRD_NAME = New Global.System.Data.DataColumn("PRD_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRD_NAME)
            Me.columnIN_DAY = New Global.System.Data.DataColumn("IN_DAY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIN_DAY)
            Me.columnOUT_DAY = New Global.System.Data.DataColumn("OUT_DAY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_DAY)
            Me.columnOPE_SEQ = New Global.System.Data.DataColumn("OPE_SEQ", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPE_SEQ)
            Me.columnPRD_PIECE = New Global.System.Data.DataColumn("PRD_PIECE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRD_PIECE)
            Me.columnINP_PIECE = New Global.System.Data.DataColumn("INP_PIECE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINP_PIECE)
            Me.columnOUT_PIECE = New Global.System.Data.DataColumn("OUT_PIECE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_PIECE)
            Me.columnREAL_DAY = New Global.System.Data.DataColumn("REAL_DAY", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREAL_DAY)
            Me.columnBATCH_NO = New Global.System.Data.DataColumn("BATCH_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_NO)
            Me.columnBATCH_SUB = New Global.System.Data.DataColumn("BATCH_SUB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_SUB)
            Me.columnMATER_NAME = New Global.System.Data.DataColumn("MATER_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMATER_NAME)
            Me.columnMATER_SNAME = New Global.System.Data.DataColumn("MATER_SNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMATER_SNAME)
            Me.columnMAKER = New Global.System.Data.DataColumn("MAKER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAKER)
            Me.columnY_LEVEL = New Global.System.Data.DataColumn("Y_LEVEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnY_LEVEL)
            Me.columnSTATUS1 = New Global.System.Data.DataColumn("STATUS1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS1)
            Me.columnSTATUS2 = New Global.System.Data.DataColumn("STATUS2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS2)
            Me.columnCYCLE = New Global.System.Data.DataColumn("CYCLE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCYCLE)
            Me.columnBOX_NO = New Global.System.Data.DataColumn("BOX_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBOX_NO)
            Me.columnPRV_BOX_NO = New Global.System.Data.DataColumn("PRV_BOX_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRV_BOX_NO)
            Me.columnWAFER_STATUS = New Global.System.Data.DataColumn("WAFER_STATUS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWAFER_STATUS)
            Me.columnLMT_STR_TIME = New Global.System.Data.DataColumn("LMT_STR_TIME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLMT_STR_TIME)
            Me.columnWAGON_NO = New Global.System.Data.DataColumn("WAGON_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWAGON_NO)
            Me.columnREP_OPE_SEQ = New Global.System.Data.DataColumn("REP_OPE_SEQ", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREP_OPE_SEQ)
            Me.columnREPEAT_QNT = New Global.System.Data.DataColumn("REPEAT_QNT", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREPEAT_QNT)
            Me.columnTOTAL_MASK = New Global.System.Data.DataColumn("TOTAL_MASK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_MASK)
            Me.columnSTATUS2_SAVE = New Global.System.Data.DataColumn("STATUS2_SAVE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS2_SAVE)
            Me.columnREAL_START = New Global.System.Data.DataColumn("REAL_START", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREAL_START)
            Me.columnTRO_TIME = New Global.System.Data.DataColumn("TRO_TIME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRO_TIME)
            Me.columnSISAKU_FLG = New Global.System.Data.DataColumn("SISAKU_FLG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSISAKU_FLG)
            Me.columnPARENT_LOT = New Global.System.Data.DataColumn("PARENT_LOT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPARENT_LOT)
            Me.columnOPE_AREA = New Global.System.Data.DataColumn("OPE_AREA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPE_AREA)
            Me.columnOPE_CHG_FLG = New Global.System.Data.DataColumn("OPE_CHG_FLG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPE_CHG_FLG)
            Me.columnPLT_OPE_SEQ1 = New Global.System.Data.DataColumn("PLT_OPE_SEQ1", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLT_OPE_SEQ1)
            Me.columnPLT_OPE_SEQ2 = New Global.System.Data.DataColumn("PLT_OPE_SEQ2", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLT_OPE_SEQ2)
            Me.columnPILOT_QNT = New Global.System.Data.DataColumn("PILOT_QNT", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPILOT_QNT)
            Me.columnTOTAL_QNT = New Global.System.Data.DataColumn("TOTAL_QNT", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_QNT)
            Me.columnCOMMENT = New Global.System.Data.DataColumn("COMMENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENT)
            Me.columnROHM_ORDER_MODEL_NAME_O = New Global.System.Data.DataColumn("ROHM_ORDER_MODEL_NAME_O", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROHM_ORDER_MODEL_NAME_O)
            Me.columnORDER_NO = New Global.System.Data.DataColumn("ORDER_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDER_NO)
            Me.columnFT_MODEL_NAME = New Global.System.Data.DataColumn("FT_MODEL_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFT_MODEL_NAME)
            Me.columnTP_RANK = New Global.System.Data.DataColumn("TP_RANK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTP_RANK)
            Me.columnWARI_STOCK_KBN = New Global.System.Data.DataColumn("WARI_STOCK_KBN", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWARI_STOCK_KBN)
            Me.columnWARI_INSTRUCT_KBN = New Global.System.Data.DataColumn("WARI_INSTRUCT_KBN", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWARI_INSTRUCT_KBN)
            Me.columnFORM_NAME = New Global.System.Data.DataColumn("FORM_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFORM_NAME)
            Me.columnGOOD_PIECES = New Global.System.Data.DataColumn("GOOD_PIECES", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGOOD_PIECES)
            Me.columnBAD_PIECES = New Global.System.Data.DataColumn("BAD_PIECES", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBAD_PIECES)
            Me.columnShipTargetChipCount = New Global.System.Data.DataColumn("ShipTargetChipCount", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipTargetChipCount)
            Me.columnOfficialChipCount = New Global.System.Data.DataColumn("OfficialChipCount", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOfficialChipCount)
            Me.columnRestLotInitialChipCount = New Global.System.Data.DataColumn("RestLotInitialChipCount", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRestLotInitialChipCount)
            Me.columnRestLotInitialInputMagazine = New Global.System.Data.DataColumn("RestLotInitialInputMagazine", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRestLotInitialInputMagazine)
            Me.columnRestLotInitialInputFrame = New Global.System.Data.DataColumn("RestLotInitialInputFrame", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRestLotInitialInputFrame)
            Me.columnSection = New Global.System.Data.DataColumn("Section", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSection)
            Me.columnInvoiceNo = New Global.System.Data.DataColumn("InvoiceNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoiceNo)
            Me.columnQCCheckDBNG = New Global.System.Data.DataColumn("QCCheckDBNG", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCCheckDBNG)
            Me.columnQCCheckDBPNashi = New Global.System.Data.DataColumn("QCCheckDBPNashi", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCCheckDBPNashi)
            Me.columnQCCheckHajikiPullShaer = New Global.System.Data.DataColumn("QCCheckHajikiPullShaer", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCCheckHajikiPullShaer)
            Me.columnQCCheckWBNG = New Global.System.Data.DataColumn("QCCheckWBNG", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCCheckWBNG)
            Me.columnQCCheckWBInsNG = New Global.System.Data.DataColumn("QCCheckWBInsNG", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCCheckWBInsNG)
            Me.columnQCCheckOSNG = New Global.System.Data.DataColumn("QCCheckOSNG", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCCheckOSNG)
            Me.columnQCCheckJudge = New Global.System.Data.DataColumn("QCCheckJudge", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCCheckJudge)
            Me.columnQCCheckerPD = New Global.System.Data.DataColumn("QCCheckerPD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCCheckerPD)
            Me.columnQCCheckerQC = New Global.System.Data.DataColumn("QCCheckerQC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCCheckerQC)
            Me.columnQCAQIIssueDate = New Global.System.Data.DataColumn("QCAQIIssueDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCAQIIssueDate)
            Me.columnQCCheckExceptOSNG = New Global.System.Data.DataColumn("QCCheckExceptOSNG", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCCheckExceptOSNG)
            Me.columnQCMainReasonExceptOSNG = New Global.System.Data.DataColumn("QCMainReasonExceptOSNG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCMainReasonExceptOSNG)
            Me.columnQCNGChipInExceptOSNG = New Global.System.Data.DataColumn("QCNGChipInExceptOSNG", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCNGChipInExceptOSNG)
            Me.columnQCNGIncludeExceptOSNG = New Global.System.Data.DataColumn("QCNGIncludeExceptOSNG", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCNGIncludeExceptOSNG)
            Me.columnQCNGJudgeExceptOSNG = New Global.System.Data.DataColumn("QCNGJudgeExceptOSNG", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCNGJudgeExceptOSNG)
            Me.columnQCNGChipInGoodChip = New Global.System.Data.DataColumn("QCNGChipInGoodChip", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCNGChipInGoodChip)
            Me.columnQCNGIncludeGoodChip = New Global.System.Data.DataColumn("QCNGIncludeGoodChip", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCNGIncludeGoodChip)
            Me.columnQCNGJudgeGoodChip = New Global.System.Data.DataColumn("QCNGJudgeGoodChip", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCNGJudgeGoodChip)
            Me.columnCREATION_DATE = New Global.System.Data.DataColumn("CREATION_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATION_DATE)
            Me.columnSEND_FLG = New Global.System.Data.DataColumn("SEND_FLG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEND_FLG)
            Me.columnSEND_DATE = New Global.System.Data.DataColumn("SEND_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEND_DATE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnLOT_NO}, true))
            Me.columnLOT_NO.AllowDBNull = false
            Me.columnLOT_NO.Unique = true
            Me.columnLOT_NO.MaxLength = 13
            Me.columnDVI_NO.AllowDBNull = false
            Me.columnPRD_NAME.AllowDBNull = false
            Me.columnPRD_NAME.MaxLength = 25
            Me.columnIN_DAY.AllowDBNull = false
            Me.columnIN_DAY.MaxLength = 8
            Me.columnOUT_DAY.AllowDBNull = false
            Me.columnOUT_DAY.MaxLength = 8
            Me.columnOPE_SEQ.AllowDBNull = false
            Me.columnPRD_PIECE.AllowDBNull = false
            Me.columnINP_PIECE.AllowDBNull = false
            Me.columnOUT_PIECE.AllowDBNull = false
            Me.columnBATCH_NO.MaxLength = 6
            Me.columnBATCH_SUB.MaxLength = 2
            Me.columnMATER_NAME.MaxLength = 25
            Me.columnMATER_SNAME.MaxLength = 15
            Me.columnMAKER.MaxLength = 12
            Me.columnY_LEVEL.AllowDBNull = false
            Me.columnY_LEVEL.MaxLength = 1
            Me.columnSTATUS1.AllowDBNull = false
            Me.columnSTATUS1.MaxLength = 1
            Me.columnSTATUS2.AllowDBNull = false
            Me.columnSTATUS2.MaxLength = 1
            Me.columnCYCLE.AllowDBNull = false
            Me.columnBOX_NO.MaxLength = 6
            Me.columnPRV_BOX_NO.MaxLength = 6
            Me.columnWAFER_STATUS.MaxLength = 25
            Me.columnWAGON_NO.MaxLength = 5
            Me.columnREP_OPE_SEQ.AllowDBNull = false
            Me.columnREPEAT_QNT.AllowDBNull = false
            Me.columnTOTAL_MASK.MaxLength = 10
            Me.columnSTATUS2_SAVE.MaxLength = 1
            Me.columnSISAKU_FLG.AllowDBNull = false
            Me.columnSISAKU_FLG.MaxLength = 1
            Me.columnPARENT_LOT.MaxLength = 13
            Me.columnOPE_AREA.MaxLength = 15
            Me.columnOPE_CHG_FLG.MaxLength = 1
            Me.columnCOMMENT.MaxLength = 100
            Me.columnROHM_ORDER_MODEL_NAME_O.MaxLength = 20
            Me.columnORDER_NO.MaxLength = 12
            Me.columnFT_MODEL_NAME.MaxLength = 20
            Me.columnTP_RANK.MaxLength = 20
            Me.columnFORM_NAME.MaxLength = 20
            Me.columnGOOD_PIECES.AllowDBNull = false
            Me.columnBAD_PIECES.AllowDBNull = false
            Me.columnSection.MaxLength = 6
            Me.columnInvoiceNo.MaxLength = 20
            Me.columnQCCheckerPD.MaxLength = 10
            Me.columnQCCheckerQC.MaxLength = 10
            Me.columnQCMainReasonExceptOSNG.MaxLength = 20
            Me.columnSEND_FLG.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewLOT1_TABLERow() As LOT1_TABLERow
            Return CType(Me.NewRow,LOT1_TABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New LOT1_TABLERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(LOT1_TABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LOT1_TABLERowChangedEvent) Is Nothing) Then
                RaiseEvent LOT1_TABLERowChanged(Me, New LOT1_TABLERowChangeEvent(CType(e.Row,LOT1_TABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LOT1_TABLERowChangingEvent) Is Nothing) Then
                RaiseEvent LOT1_TABLERowChanging(Me, New LOT1_TABLERowChangeEvent(CType(e.Row,LOT1_TABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LOT1_TABLERowDeletedEvent) Is Nothing) Then
                RaiseEvent LOT1_TABLERowDeleted(Me, New LOT1_TABLERowChangeEvent(CType(e.Row,LOT1_TABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LOT1_TABLERowDeletingEvent) Is Nothing) Then
                RaiseEvent LOT1_TABLERowDeleting(Me, New LOT1_TABLERowChangeEvent(CType(e.Row,LOT1_TABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveLOT1_TABLERow(ByVal row As LOT1_TABLERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As APCSDBDataSet = New APCSDBDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LOT1_TABLEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LOT2_DATADataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnLOT_NO As Global.System.Data.DataColumn
        
        Private columnOPE_SEQ As Global.System.Data.DataColumn
        
        Private columnN_OPE_SEQ As Global.System.Data.DataColumn
        
        Private columnLAY_NO As Global.System.Data.DataColumn
        
        Private columnPLAN_DAY As Global.System.Data.DataColumn
        
        Private columnREAL_START As Global.System.Data.DataColumn
        
        Private columnONLINE_START As Global.System.Data.DataColumn
        
        Private columnREAL_DAY1 As Global.System.Data.DataColumn
        
        Private columnREAL_DAY As Global.System.Data.DataColumn
        
        Private columnRECIPE As Global.System.Data.DataColumn
        
        Private columnMACHINE As Global.System.Data.DataColumn
        
        Private columnMACHINE_SUB As Global.System.Data.DataColumn
        
        Private columnSTART_MSG As Global.System.Data.DataColumn
        
        Private columnEND_MSG As Global.System.Data.DataColumn
        
        Private columnOPERATOR1 As Global.System.Data.DataColumn
        
        Private columnOPERATOR2 As Global.System.Data.DataColumn
        
        Private columnQUANTITY As Global.System.Data.DataColumn
        
        Private columnLOSS_QTY As Global.System.Data.DataColumn
        
        Private columnDATA_NO As Global.System.Data.DataColumn
        
        Private columnLIMIT_TIME1 As Global.System.Data.DataColumn
        
        Private columnLIMIT_FLG1 As Global.System.Data.DataColumn
        
        Private columnLIMIT_MSG1 As Global.System.Data.DataColumn
        
        Private columnLIMIT_TIME2 As Global.System.Data.DataColumn
        
        Private columnLIMIT_FLG2 As Global.System.Data.DataColumn
        
        Private columnLIMIT_MSG2 As Global.System.Data.DataColumn
        
        Private columnOPE_AREA As Global.System.Data.DataColumn
        
        Private columnINTEG1 As Global.System.Data.DataColumn
        
        Private columnINTEG2 As Global.System.Data.DataColumn
        
        Private columnINTEG3 As Global.System.Data.DataColumn
        
        Private columnINTEG4 As Global.System.Data.DataColumn
        
        Private columnREPEAT_FLG As Global.System.Data.DataColumn
        
        Private columnREPEAT_TIME As Global.System.Data.DataColumn
        
        Private columnWAFER_STATUS As Global.System.Data.DataColumn
        
        Private columnLIMIT_FLG As Global.System.Data.DataColumn
        
        Private columnPRD_NAME As Global.System.Data.DataColumn
        
        Private columnPRV_BOX_NO As Global.System.Data.DataColumn
        
        Private columnMASK_NAME As Global.System.Data.DataColumn
        
        Private columnCOMMENT1 As Global.System.Data.DataColumn
        
        Private columnMACHINE_PRM1 As Global.System.Data.DataColumn
        
        Private columnMACHINE_PRM2 As Global.System.Data.DataColumn
        
        Private columnCOMMENT2 As Global.System.Data.DataColumn
        
        Private columnM_START_MSG As Global.System.Data.DataColumn
        
        Private columnM_END_MSG As Global.System.Data.DataColumn
        
        Private columnCOMMENT3 As Global.System.Data.DataColumn
        
        Private columnCOMMENT4 As Global.System.Data.DataColumn
        
        Private columnGOOD_PIECES As Global.System.Data.DataColumn
        
        Private columnBAD_PIECES As Global.System.Data.DataColumn
        
        Private columnProcessJobID As Global.System.Data.DataColumn
        
        Private columnCarrierNoIn As Global.System.Data.DataColumn
        
        Private columnCarrierNoOut As Global.System.Data.DataColumn
        
        Private columnRunTime As Global.System.Data.DataColumn
        
        Private columnStopTime As Global.System.Data.DataColumn
        
        Private columnAlarmTime As Global.System.Data.DataColumn
        
        Private columnMaterialChangeTime As Global.System.Data.DataColumn
        
        Private columnWIPIdleTime As Global.System.Data.DataColumn
        
        Private columnIdleTime As Global.System.Data.DataColumn
        
        Private columnTotalInputChip As Global.System.Data.DataColumn
        
        Private columnTotalProcessChip As Global.System.Data.DataColumn
        
        Private columnScrapChip As Global.System.Data.DataColumn
        
        Private columnVisualNGChip As Global.System.Data.DataColumn
        
        Private columnUnknownLostChip As Global.System.Data.DataColumn
        
        Private columnRankOutChip As Global.System.Data.DataColumn
        
        Private columnRankType As Global.System.Data.DataColumn
        
        Private columnKeepSample As Global.System.Data.DataColumn
        
        Private columnExcessChip As Global.System.Data.DataColumn
        
        Private columnNoChip As Global.System.Data.DataColumn
        
        Private columnMarkerNGCount As Global.System.Data.DataColumn
        
        Private columnTotalInputFrame As Global.System.Data.DataColumn
        
        Private columnTotalProcessFrame As Global.System.Data.DataColumn
        
        Private columnScrapFrame As Global.System.Data.DataColumn
        
        Private columnDummyFrame As Global.System.Data.DataColumn
        
        Private columnRepateFrameCount As Global.System.Data.DataColumn
        
        Private columnNote As Global.System.Data.DataColumn
        
        Private columnLotOperationRate As Global.System.Data.DataColumn
        
        Private columnLotMaximumRPM As Global.System.Data.DataColumn
        
        Private columnLotAverageRPM As Global.System.Data.DataColumn
        
        Private columnLotAlarmTotalCount As Global.System.Data.DataColumn
        
        Private columnInspectionJudge As Global.System.Data.DataColumn
        
        Private columnInspectionDefect As Global.System.Data.DataColumn
        
        Private columnRecognitionTotal As Global.System.Data.DataColumn
        
        Private columnRecognitionGood As Global.System.Data.DataColumn
        
        Private columnRecognitionNG As Global.System.Data.DataColumn
        
        Private columnRecognitionNG_Visual As Global.System.Data.DataColumn
        
        Private columnRecognitionNG_Bond As Global.System.Data.DataColumn
        
        Private columnRecognitionPass As Global.System.Data.DataColumn
        
        Private columnRecognitionRetry As Global.System.Data.DataColumn
        
        Private columnRecognitionAlarm As Global.System.Data.DataColumn
        
        Private columnCREATION_DATE As Global.System.Data.DataColumn
        
        Private columnSEND_FLG As Global.System.Data.DataColumn
        
        Private columnSEND_DATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "LOT2_DATA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPE_SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPE_SEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property N_OPE_SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnN_OPE_SEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LAY_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLAY_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PLAN_DAYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLAN_DAY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REAL_STARTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREAL_START
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ONLINE_STARTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnONLINE_START
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REAL_DAY1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnREAL_DAY1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REAL_DAYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREAL_DAY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RECIPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MACHINEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMACHINE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MACHINE_SUBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMACHINE_SUB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property START_MSGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTART_MSG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property END_MSGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEND_MSG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPERATOR1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPERATOR1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPERATOR2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPERATOR2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QUANTITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQUANTITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOSS_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOSS_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATA_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATA_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LIMIT_TIME1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIMIT_TIME1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LIMIT_FLG1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIMIT_FLG1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LIMIT_MSG1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIMIT_MSG1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LIMIT_TIME2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIMIT_TIME2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LIMIT_FLG2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIMIT_FLG2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LIMIT_MSG2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIMIT_MSG2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPE_AREAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPE_AREA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTEG1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTEG1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTEG2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTEG2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTEG3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTEG3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTEG4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTEG4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REPEAT_FLGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREPEAT_FLG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REPEAT_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREPEAT_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WAFER_STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWAFER_STATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LIMIT_FLGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIMIT_FLG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRD_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRD_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRV_BOX_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRV_BOX_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MASK_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMASK_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMMENT1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENT1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MACHINE_PRM1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMACHINE_PRM1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MACHINE_PRM2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMACHINE_PRM2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMMENT2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENT2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_START_MSGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_START_MSG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_END_MSGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_END_MSG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMMENT3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENT3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMMENT4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENT4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GOOD_PIECESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGOOD_PIECES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BAD_PIECESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBAD_PIECES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProcessJobIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProcessJobID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CarrierNoInColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCarrierNoIn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CarrierNoOutColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCarrierNoOut
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RunTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRunTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StopTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStopTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AlarmTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAlarmTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaterialChangeTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterialChangeTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIPIdleTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIPIdleTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdleTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdleTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalInputChipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalInputChip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalProcessChipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalProcessChip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScrapChipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnScrapChip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VisualNGChipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVisualNGChip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnknownLostChipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnknownLostChip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RankOutChipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRankOutChip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RankTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRankType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KeepSampleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKeepSample
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExcessChipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExcessChip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoChipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoChip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarkerNGCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarkerNGCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalInputFrameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalInputFrame
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalProcessFrameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalProcessFrame
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScrapFrameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnScrapFrame
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DummyFrameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDummyFrame
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RepateFrameCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRepateFrameCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNote
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LotOperationRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotOperationRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LotMaximumRPMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotMaximumRPM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LotAverageRPMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotAverageRPM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LotAlarmTotalCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotAlarmTotalCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InspectionJudgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInspectionJudge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InspectionDefectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInspectionDefect
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecognitionTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecognitionTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecognitionGoodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecognitionGood
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecognitionNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecognitionNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecognitionNG_VisualColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecognitionNG_Visual
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecognitionNG_BondColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecognitionNG_Bond
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecognitionPassColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecognitionPass
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecognitionRetryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecognitionRetry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecognitionAlarmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecognitionAlarm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CREATION_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATION_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEND_FLGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEND_FLG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEND_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEND_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LOT2_DATARow
            Get
                Return CType(Me.Rows(index),LOT2_DATARow)
            End Get
        End Property
        
        Public Event LOT2_DATARowChanging As LOT2_DATARowChangeEventHandler
        
        Public Event LOT2_DATARowChanged As LOT2_DATARowChangeEventHandler
        
        Public Event LOT2_DATARowDeleting As LOT2_DATARowChangeEventHandler
        
        Public Event LOT2_DATARowDeleted As LOT2_DATARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddLOT2_DATARow(ByVal row As LOT2_DATARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddLOT2_DATARow( _
                    ByVal LOT_NO As String,  _
                    ByVal OPE_SEQ As Short,  _
                    ByVal N_OPE_SEQ As Short,  _
                    ByVal LAY_NO As String,  _
                    ByVal PLAN_DAY As Date,  _
                    ByVal REAL_START As Date,  _
                    ByVal ONLINE_START As Date,  _
                    ByVal REAL_DAY1 As Date,  _
                    ByVal REAL_DAY As Date,  _
                    ByVal RECIPE As String,  _
                    ByVal MACHINE As String,  _
                    ByVal MACHINE_SUB As String,  _
                    ByVal START_MSG As String,  _
                    ByVal END_MSG As String,  _
                    ByVal OPERATOR1 As String,  _
                    ByVal OPERATOR2 As String,  _
                    ByVal QUANTITY As Short,  _
                    ByVal LOSS_QTY As Short,  _
                    ByVal DATA_NO As Integer,  _
                    ByVal LIMIT_TIME1 As Integer,  _
                    ByVal LIMIT_FLG1 As String,  _
                    ByVal LIMIT_MSG1 As String,  _
                    ByVal LIMIT_TIME2 As Integer,  _
                    ByVal LIMIT_FLG2 As String,  _
                    ByVal LIMIT_MSG2 As String,  _
                    ByVal OPE_AREA As String,  _
                    ByVal INTEG1 As Short,  _
                    ByVal INTEG2 As Short,  _
                    ByVal INTEG3 As Short,  _
                    ByVal INTEG4 As Short,  _
                    ByVal REPEAT_FLG As String,  _
                    ByVal REPEAT_TIME As Short,  _
                    ByVal WAFER_STATUS As String,  _
                    ByVal LIMIT_FLG As String,  _
                    ByVal PRD_NAME As String,  _
                    ByVal PRV_BOX_NO As String,  _
                    ByVal MASK_NAME As String,  _
                    ByVal COMMENT1 As String,  _
                    ByVal MACHINE_PRM1 As String,  _
                    ByVal MACHINE_PRM2 As String,  _
                    ByVal COMMENT2 As String,  _
                    ByVal M_START_MSG As String,  _
                    ByVal M_END_MSG As String,  _
                    ByVal COMMENT3 As String,  _
                    ByVal COMMENT4 As String,  _
                    ByVal GOOD_PIECES As Integer,  _
                    ByVal BAD_PIECES As Integer,  _
                    ByVal ProcessJobID As Integer,  _
                    ByVal CarrierNoIn As String,  _
                    ByVal CarrierNoOut As String,  _
                    ByVal RunTime As Double,  _
                    ByVal StopTime As Double,  _
                    ByVal AlarmTime As Double,  _
                    ByVal MaterialChangeTime As Double,  _
                    ByVal WIPIdleTime As Double,  _
                    ByVal IdleTime As Double,  _
                    ByVal TotalInputChip As Integer,  _
                    ByVal TotalProcessChip As Integer,  _
                    ByVal ScrapChip As Integer,  _
                    ByVal VisualNGChip As Integer,  _
                    ByVal UnknownLostChip As Integer,  _
                    ByVal RankOutChip As Integer,  _
                    ByVal RankType As String,  _
                    ByVal KeepSample As Integer,  _
                    ByVal ExcessChip As Integer,  _
                    ByVal NoChip As Integer,  _
                    ByVal MarkerNGCount As Integer,  _
                    ByVal TotalInputFrame As Short,  _
                    ByVal TotalProcessFrame As Short,  _
                    ByVal ScrapFrame As Short,  _
                    ByVal DummyFrame As Short,  _
                    ByVal RepateFrameCount As Short,  _
                    ByVal Note As String,  _
                    ByVal LotOperationRate As Double,  _
                    ByVal LotMaximumRPM As Double,  _
                    ByVal LotAverageRPM As Double,  _
                    ByVal LotAlarmTotalCount As Short,  _
                    ByVal InspectionJudge As Short,  _
                    ByVal InspectionDefect As String,  _
                    ByVal RecognitionTotal As Integer,  _
                    ByVal RecognitionGood As Integer,  _
                    ByVal RecognitionNG As Integer,  _
                    ByVal RecognitionNG_Visual As Integer,  _
                    ByVal RecognitionNG_Bond As Integer,  _
                    ByVal RecognitionPass As Integer,  _
                    ByVal RecognitionRetry As Integer,  _
                    ByVal RecognitionAlarm As Integer,  _
                    ByVal CREATION_DATE As Date,  _
                    ByVal SEND_FLG As String,  _
                    ByVal SEND_DATE As Date) As LOT2_DATARow
            Dim rowLOT2_DATARow As LOT2_DATARow = CType(Me.NewRow,LOT2_DATARow)
            Dim columnValuesArray() As Object = New Object() {LOT_NO, OPE_SEQ, N_OPE_SEQ, LAY_NO, PLAN_DAY, REAL_START, ONLINE_START, REAL_DAY1, REAL_DAY, RECIPE, MACHINE, MACHINE_SUB, START_MSG, END_MSG, OPERATOR1, OPERATOR2, QUANTITY, LOSS_QTY, DATA_NO, LIMIT_TIME1, LIMIT_FLG1, LIMIT_MSG1, LIMIT_TIME2, LIMIT_FLG2, LIMIT_MSG2, OPE_AREA, INTEG1, INTEG2, INTEG3, INTEG4, REPEAT_FLG, REPEAT_TIME, WAFER_STATUS, LIMIT_FLG, PRD_NAME, PRV_BOX_NO, MASK_NAME, COMMENT1, MACHINE_PRM1, MACHINE_PRM2, COMMENT2, M_START_MSG, M_END_MSG, COMMENT3, COMMENT4, GOOD_PIECES, BAD_PIECES, ProcessJobID, CarrierNoIn, CarrierNoOut, RunTime, StopTime, AlarmTime, MaterialChangeTime, WIPIdleTime, IdleTime, TotalInputChip, TotalProcessChip, ScrapChip, VisualNGChip, UnknownLostChip, RankOutChip, RankType, KeepSample, ExcessChip, NoChip, MarkerNGCount, TotalInputFrame, TotalProcessFrame, ScrapFrame, DummyFrame, RepateFrameCount, Note, LotOperationRate, LotMaximumRPM, LotAverageRPM, LotAlarmTotalCount, InspectionJudge, InspectionDefect, RecognitionTotal, RecognitionGood, RecognitionNG, RecognitionNG_Visual, RecognitionNG_Bond, RecognitionPass, RecognitionRetry, RecognitionAlarm, CREATION_DATE, SEND_FLG, SEND_DATE}
            rowLOT2_DATARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowLOT2_DATARow)
            Return rowLOT2_DATARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByLOT_NOREAL_START(ByVal LOT_NO As String, ByVal REAL_START As Date) As LOT2_DATARow
            Return CType(Me.Rows.Find(New Object() {LOT_NO, REAL_START}),LOT2_DATARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As LOT2_DATADataTable = CType(MyBase.Clone,LOT2_DATADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New LOT2_DATADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLOT_NO = MyBase.Columns("LOT_NO")
            Me.columnOPE_SEQ = MyBase.Columns("OPE_SEQ")
            Me.columnN_OPE_SEQ = MyBase.Columns("N_OPE_SEQ")
            Me.columnLAY_NO = MyBase.Columns("LAY_NO")
            Me.columnPLAN_DAY = MyBase.Columns("PLAN_DAY")
            Me.columnREAL_START = MyBase.Columns("REAL_START")
            Me.columnONLINE_START = MyBase.Columns("ONLINE_START")
            Me.columnREAL_DAY1 = MyBase.Columns("REAL_DAY1")
            Me.columnREAL_DAY = MyBase.Columns("REAL_DAY")
            Me.columnRECIPE = MyBase.Columns("RECIPE")
            Me.columnMACHINE = MyBase.Columns("MACHINE")
            Me.columnMACHINE_SUB = MyBase.Columns("MACHINE_SUB")
            Me.columnSTART_MSG = MyBase.Columns("START_MSG")
            Me.columnEND_MSG = MyBase.Columns("END_MSG")
            Me.columnOPERATOR1 = MyBase.Columns("OPERATOR1")
            Me.columnOPERATOR2 = MyBase.Columns("OPERATOR2")
            Me.columnQUANTITY = MyBase.Columns("QUANTITY")
            Me.columnLOSS_QTY = MyBase.Columns("LOSS_QTY")
            Me.columnDATA_NO = MyBase.Columns("DATA_NO")
            Me.columnLIMIT_TIME1 = MyBase.Columns("LIMIT_TIME1")
            Me.columnLIMIT_FLG1 = MyBase.Columns("LIMIT_FLG1")
            Me.columnLIMIT_MSG1 = MyBase.Columns("LIMIT_MSG1")
            Me.columnLIMIT_TIME2 = MyBase.Columns("LIMIT_TIME2")
            Me.columnLIMIT_FLG2 = MyBase.Columns("LIMIT_FLG2")
            Me.columnLIMIT_MSG2 = MyBase.Columns("LIMIT_MSG2")
            Me.columnOPE_AREA = MyBase.Columns("OPE_AREA")
            Me.columnINTEG1 = MyBase.Columns("INTEG1")
            Me.columnINTEG2 = MyBase.Columns("INTEG2")
            Me.columnINTEG3 = MyBase.Columns("INTEG3")
            Me.columnINTEG4 = MyBase.Columns("INTEG4")
            Me.columnREPEAT_FLG = MyBase.Columns("REPEAT_FLG")
            Me.columnREPEAT_TIME = MyBase.Columns("REPEAT_TIME")
            Me.columnWAFER_STATUS = MyBase.Columns("WAFER_STATUS")
            Me.columnLIMIT_FLG = MyBase.Columns("LIMIT_FLG")
            Me.columnPRD_NAME = MyBase.Columns("PRD_NAME")
            Me.columnPRV_BOX_NO = MyBase.Columns("PRV_BOX_NO")
            Me.columnMASK_NAME = MyBase.Columns("MASK_NAME")
            Me.columnCOMMENT1 = MyBase.Columns("COMMENT1")
            Me.columnMACHINE_PRM1 = MyBase.Columns("MACHINE_PRM1")
            Me.columnMACHINE_PRM2 = MyBase.Columns("MACHINE_PRM2")
            Me.columnCOMMENT2 = MyBase.Columns("COMMENT2")
            Me.columnM_START_MSG = MyBase.Columns("M_START_MSG")
            Me.columnM_END_MSG = MyBase.Columns("M_END_MSG")
            Me.columnCOMMENT3 = MyBase.Columns("COMMENT3")
            Me.columnCOMMENT4 = MyBase.Columns("COMMENT4")
            Me.columnGOOD_PIECES = MyBase.Columns("GOOD_PIECES")
            Me.columnBAD_PIECES = MyBase.Columns("BAD_PIECES")
            Me.columnProcessJobID = MyBase.Columns("ProcessJobID")
            Me.columnCarrierNoIn = MyBase.Columns("CarrierNoIn")
            Me.columnCarrierNoOut = MyBase.Columns("CarrierNoOut")
            Me.columnRunTime = MyBase.Columns("RunTime")
            Me.columnStopTime = MyBase.Columns("StopTime")
            Me.columnAlarmTime = MyBase.Columns("AlarmTime")
            Me.columnMaterialChangeTime = MyBase.Columns("MaterialChangeTime")
            Me.columnWIPIdleTime = MyBase.Columns("WIPIdleTime")
            Me.columnIdleTime = MyBase.Columns("IdleTime")
            Me.columnTotalInputChip = MyBase.Columns("TotalInputChip")
            Me.columnTotalProcessChip = MyBase.Columns("TotalProcessChip")
            Me.columnScrapChip = MyBase.Columns("ScrapChip")
            Me.columnVisualNGChip = MyBase.Columns("VisualNGChip")
            Me.columnUnknownLostChip = MyBase.Columns("UnknownLostChip")
            Me.columnRankOutChip = MyBase.Columns("RankOutChip")
            Me.columnRankType = MyBase.Columns("RankType")
            Me.columnKeepSample = MyBase.Columns("KeepSample")
            Me.columnExcessChip = MyBase.Columns("ExcessChip")
            Me.columnNoChip = MyBase.Columns("NoChip")
            Me.columnMarkerNGCount = MyBase.Columns("MarkerNGCount")
            Me.columnTotalInputFrame = MyBase.Columns("TotalInputFrame")
            Me.columnTotalProcessFrame = MyBase.Columns("TotalProcessFrame")
            Me.columnScrapFrame = MyBase.Columns("ScrapFrame")
            Me.columnDummyFrame = MyBase.Columns("DummyFrame")
            Me.columnRepateFrameCount = MyBase.Columns("RepateFrameCount")
            Me.columnNote = MyBase.Columns("Note")
            Me.columnLotOperationRate = MyBase.Columns("LotOperationRate")
            Me.columnLotMaximumRPM = MyBase.Columns("LotMaximumRPM")
            Me.columnLotAverageRPM = MyBase.Columns("LotAverageRPM")
            Me.columnLotAlarmTotalCount = MyBase.Columns("LotAlarmTotalCount")
            Me.columnInspectionJudge = MyBase.Columns("InspectionJudge")
            Me.columnInspectionDefect = MyBase.Columns("InspectionDefect")
            Me.columnRecognitionTotal = MyBase.Columns("RecognitionTotal")
            Me.columnRecognitionGood = MyBase.Columns("RecognitionGood")
            Me.columnRecognitionNG = MyBase.Columns("RecognitionNG")
            Me.columnRecognitionNG_Visual = MyBase.Columns("RecognitionNG_Visual")
            Me.columnRecognitionNG_Bond = MyBase.Columns("RecognitionNG_Bond")
            Me.columnRecognitionPass = MyBase.Columns("RecognitionPass")
            Me.columnRecognitionRetry = MyBase.Columns("RecognitionRetry")
            Me.columnRecognitionAlarm = MyBase.Columns("RecognitionAlarm")
            Me.columnCREATION_DATE = MyBase.Columns("CREATION_DATE")
            Me.columnSEND_FLG = MyBase.Columns("SEND_FLG")
            Me.columnSEND_DATE = MyBase.Columns("SEND_DATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLOT_NO = New Global.System.Data.DataColumn("LOT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_NO)
            Me.columnOPE_SEQ = New Global.System.Data.DataColumn("OPE_SEQ", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPE_SEQ)
            Me.columnN_OPE_SEQ = New Global.System.Data.DataColumn("N_OPE_SEQ", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnN_OPE_SEQ)
            Me.columnLAY_NO = New Global.System.Data.DataColumn("LAY_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLAY_NO)
            Me.columnPLAN_DAY = New Global.System.Data.DataColumn("PLAN_DAY", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLAN_DAY)
            Me.columnREAL_START = New Global.System.Data.DataColumn("REAL_START", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREAL_START)
            Me.columnONLINE_START = New Global.System.Data.DataColumn("ONLINE_START", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnONLINE_START)
            Me.columnREAL_DAY1 = New Global.System.Data.DataColumn("REAL_DAY1", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREAL_DAY1)
            Me.columnREAL_DAY = New Global.System.Data.DataColumn("REAL_DAY", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREAL_DAY)
            Me.columnRECIPE = New Global.System.Data.DataColumn("RECIPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE)
            Me.columnMACHINE = New Global.System.Data.DataColumn("MACHINE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMACHINE)
            Me.columnMACHINE_SUB = New Global.System.Data.DataColumn("MACHINE_SUB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMACHINE_SUB)
            Me.columnSTART_MSG = New Global.System.Data.DataColumn("START_MSG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTART_MSG)
            Me.columnEND_MSG = New Global.System.Data.DataColumn("END_MSG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEND_MSG)
            Me.columnOPERATOR1 = New Global.System.Data.DataColumn("OPERATOR1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPERATOR1)
            Me.columnOPERATOR2 = New Global.System.Data.DataColumn("OPERATOR2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPERATOR2)
            Me.columnQUANTITY = New Global.System.Data.DataColumn("QUANTITY", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQUANTITY)
            Me.columnLOSS_QTY = New Global.System.Data.DataColumn("LOSS_QTY", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOSS_QTY)
            Me.columnDATA_NO = New Global.System.Data.DataColumn("DATA_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATA_NO)
            Me.columnLIMIT_TIME1 = New Global.System.Data.DataColumn("LIMIT_TIME1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIMIT_TIME1)
            Me.columnLIMIT_FLG1 = New Global.System.Data.DataColumn("LIMIT_FLG1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIMIT_FLG1)
            Me.columnLIMIT_MSG1 = New Global.System.Data.DataColumn("LIMIT_MSG1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIMIT_MSG1)
            Me.columnLIMIT_TIME2 = New Global.System.Data.DataColumn("LIMIT_TIME2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIMIT_TIME2)
            Me.columnLIMIT_FLG2 = New Global.System.Data.DataColumn("LIMIT_FLG2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIMIT_FLG2)
            Me.columnLIMIT_MSG2 = New Global.System.Data.DataColumn("LIMIT_MSG2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIMIT_MSG2)
            Me.columnOPE_AREA = New Global.System.Data.DataColumn("OPE_AREA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPE_AREA)
            Me.columnINTEG1 = New Global.System.Data.DataColumn("INTEG1", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTEG1)
            Me.columnINTEG2 = New Global.System.Data.DataColumn("INTEG2", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTEG2)
            Me.columnINTEG3 = New Global.System.Data.DataColumn("INTEG3", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTEG3)
            Me.columnINTEG4 = New Global.System.Data.DataColumn("INTEG4", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTEG4)
            Me.columnREPEAT_FLG = New Global.System.Data.DataColumn("REPEAT_FLG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREPEAT_FLG)
            Me.columnREPEAT_TIME = New Global.System.Data.DataColumn("REPEAT_TIME", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREPEAT_TIME)
            Me.columnWAFER_STATUS = New Global.System.Data.DataColumn("WAFER_STATUS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWAFER_STATUS)
            Me.columnLIMIT_FLG = New Global.System.Data.DataColumn("LIMIT_FLG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIMIT_FLG)
            Me.columnPRD_NAME = New Global.System.Data.DataColumn("PRD_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRD_NAME)
            Me.columnPRV_BOX_NO = New Global.System.Data.DataColumn("PRV_BOX_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRV_BOX_NO)
            Me.columnMASK_NAME = New Global.System.Data.DataColumn("MASK_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMASK_NAME)
            Me.columnCOMMENT1 = New Global.System.Data.DataColumn("COMMENT1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENT1)
            Me.columnMACHINE_PRM1 = New Global.System.Data.DataColumn("MACHINE_PRM1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMACHINE_PRM1)
            Me.columnMACHINE_PRM2 = New Global.System.Data.DataColumn("MACHINE_PRM2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMACHINE_PRM2)
            Me.columnCOMMENT2 = New Global.System.Data.DataColumn("COMMENT2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENT2)
            Me.columnM_START_MSG = New Global.System.Data.DataColumn("M_START_MSG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_START_MSG)
            Me.columnM_END_MSG = New Global.System.Data.DataColumn("M_END_MSG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_END_MSG)
            Me.columnCOMMENT3 = New Global.System.Data.DataColumn("COMMENT3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENT3)
            Me.columnCOMMENT4 = New Global.System.Data.DataColumn("COMMENT4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENT4)
            Me.columnGOOD_PIECES = New Global.System.Data.DataColumn("GOOD_PIECES", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGOOD_PIECES)
            Me.columnBAD_PIECES = New Global.System.Data.DataColumn("BAD_PIECES", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBAD_PIECES)
            Me.columnProcessJobID = New Global.System.Data.DataColumn("ProcessJobID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProcessJobID)
            Me.columnCarrierNoIn = New Global.System.Data.DataColumn("CarrierNoIn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCarrierNoIn)
            Me.columnCarrierNoOut = New Global.System.Data.DataColumn("CarrierNoOut", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCarrierNoOut)
            Me.columnRunTime = New Global.System.Data.DataColumn("RunTime", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRunTime)
            Me.columnStopTime = New Global.System.Data.DataColumn("StopTime", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStopTime)
            Me.columnAlarmTime = New Global.System.Data.DataColumn("AlarmTime", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAlarmTime)
            Me.columnMaterialChangeTime = New Global.System.Data.DataColumn("MaterialChangeTime", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterialChangeTime)
            Me.columnWIPIdleTime = New Global.System.Data.DataColumn("WIPIdleTime", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIPIdleTime)
            Me.columnIdleTime = New Global.System.Data.DataColumn("IdleTime", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdleTime)
            Me.columnTotalInputChip = New Global.System.Data.DataColumn("TotalInputChip", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalInputChip)
            Me.columnTotalProcessChip = New Global.System.Data.DataColumn("TotalProcessChip", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalProcessChip)
            Me.columnScrapChip = New Global.System.Data.DataColumn("ScrapChip", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScrapChip)
            Me.columnVisualNGChip = New Global.System.Data.DataColumn("VisualNGChip", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVisualNGChip)
            Me.columnUnknownLostChip = New Global.System.Data.DataColumn("UnknownLostChip", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnknownLostChip)
            Me.columnRankOutChip = New Global.System.Data.DataColumn("RankOutChip", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRankOutChip)
            Me.columnRankType = New Global.System.Data.DataColumn("RankType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRankType)
            Me.columnKeepSample = New Global.System.Data.DataColumn("KeepSample", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKeepSample)
            Me.columnExcessChip = New Global.System.Data.DataColumn("ExcessChip", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExcessChip)
            Me.columnNoChip = New Global.System.Data.DataColumn("NoChip", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoChip)
            Me.columnMarkerNGCount = New Global.System.Data.DataColumn("MarkerNGCount", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarkerNGCount)
            Me.columnTotalInputFrame = New Global.System.Data.DataColumn("TotalInputFrame", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalInputFrame)
            Me.columnTotalProcessFrame = New Global.System.Data.DataColumn("TotalProcessFrame", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalProcessFrame)
            Me.columnScrapFrame = New Global.System.Data.DataColumn("ScrapFrame", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScrapFrame)
            Me.columnDummyFrame = New Global.System.Data.DataColumn("DummyFrame", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDummyFrame)
            Me.columnRepateFrameCount = New Global.System.Data.DataColumn("RepateFrameCount", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRepateFrameCount)
            Me.columnNote = New Global.System.Data.DataColumn("Note", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNote)
            Me.columnLotOperationRate = New Global.System.Data.DataColumn("LotOperationRate", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotOperationRate)
            Me.columnLotMaximumRPM = New Global.System.Data.DataColumn("LotMaximumRPM", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotMaximumRPM)
            Me.columnLotAverageRPM = New Global.System.Data.DataColumn("LotAverageRPM", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotAverageRPM)
            Me.columnLotAlarmTotalCount = New Global.System.Data.DataColumn("LotAlarmTotalCount", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotAlarmTotalCount)
            Me.columnInspectionJudge = New Global.System.Data.DataColumn("InspectionJudge", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInspectionJudge)
            Me.columnInspectionDefect = New Global.System.Data.DataColumn("InspectionDefect", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInspectionDefect)
            Me.columnRecognitionTotal = New Global.System.Data.DataColumn("RecognitionTotal", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecognitionTotal)
            Me.columnRecognitionGood = New Global.System.Data.DataColumn("RecognitionGood", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecognitionGood)
            Me.columnRecognitionNG = New Global.System.Data.DataColumn("RecognitionNG", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecognitionNG)
            Me.columnRecognitionNG_Visual = New Global.System.Data.DataColumn("RecognitionNG_Visual", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecognitionNG_Visual)
            Me.columnRecognitionNG_Bond = New Global.System.Data.DataColumn("RecognitionNG_Bond", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecognitionNG_Bond)
            Me.columnRecognitionPass = New Global.System.Data.DataColumn("RecognitionPass", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecognitionPass)
            Me.columnRecognitionRetry = New Global.System.Data.DataColumn("RecognitionRetry", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecognitionRetry)
            Me.columnRecognitionAlarm = New Global.System.Data.DataColumn("RecognitionAlarm", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecognitionAlarm)
            Me.columnCREATION_DATE = New Global.System.Data.DataColumn("CREATION_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATION_DATE)
            Me.columnSEND_FLG = New Global.System.Data.DataColumn("SEND_FLG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEND_FLG)
            Me.columnSEND_DATE = New Global.System.Data.DataColumn("SEND_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEND_DATE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnLOT_NO, Me.columnREAL_START}, true))
            Me.columnLOT_NO.AllowDBNull = false
            Me.columnLOT_NO.MaxLength = 13
            Me.columnOPE_SEQ.AllowDBNull = false
            Me.columnN_OPE_SEQ.AllowDBNull = false
            Me.columnLAY_NO.AllowDBNull = false
            Me.columnLAY_NO.MaxLength = 52
            Me.columnREAL_START.AllowDBNull = false
            Me.columnRECIPE.MaxLength = 50
            Me.columnMACHINE.MaxLength = 12
            Me.columnMACHINE_SUB.MaxLength = 3
            Me.columnSTART_MSG.MaxLength = 256
            Me.columnEND_MSG.MaxLength = 256
            Me.columnOPERATOR1.MaxLength = 16
            Me.columnOPERATOR2.MaxLength = 16
            Me.columnQUANTITY.AllowDBNull = false
            Me.columnLOSS_QTY.AllowDBNull = false
            Me.columnDATA_NO.AllowDBNull = false
            Me.columnLIMIT_TIME1.AllowDBNull = false
            Me.columnLIMIT_FLG1.AllowDBNull = false
            Me.columnLIMIT_FLG1.MaxLength = 1
            Me.columnLIMIT_MSG1.MaxLength = 30
            Me.columnLIMIT_TIME2.AllowDBNull = false
            Me.columnLIMIT_FLG2.AllowDBNull = false
            Me.columnLIMIT_FLG2.MaxLength = 1
            Me.columnLIMIT_MSG2.MaxLength = 30
            Me.columnOPE_AREA.MaxLength = 15
            Me.columnINTEG1.AllowDBNull = false
            Me.columnINTEG2.AllowDBNull = false
            Me.columnINTEG3.AllowDBNull = false
            Me.columnINTEG4.AllowDBNull = false
            Me.columnREPEAT_FLG.AllowDBNull = false
            Me.columnREPEAT_FLG.MaxLength = 1
            Me.columnREPEAT_TIME.AllowDBNull = false
            Me.columnWAFER_STATUS.MaxLength = 25
            Me.columnLIMIT_FLG.AllowDBNull = false
            Me.columnLIMIT_FLG.MaxLength = 1
            Me.columnPRD_NAME.MaxLength = 25
            Me.columnPRV_BOX_NO.MaxLength = 6
            Me.columnMASK_NAME.MaxLength = 10
            Me.columnCOMMENT1.MaxLength = 20
            Me.columnMACHINE_PRM1.MaxLength = 5
            Me.columnMACHINE_PRM2.MaxLength = 5
            Me.columnCOMMENT2.MaxLength = 50
            Me.columnM_START_MSG.MaxLength = 256
            Me.columnM_END_MSG.MaxLength = 256
            Me.columnCOMMENT3.MaxLength = 512
            Me.columnCOMMENT4.MaxLength = 256
            Me.columnGOOD_PIECES.AllowDBNull = false
            Me.columnBAD_PIECES.AllowDBNull = false
            Me.columnCarrierNoIn.MaxLength = 10
            Me.columnCarrierNoOut.MaxLength = 10
            Me.columnRankType.MaxLength = 10
            Me.columnNote.MaxLength = 100
            Me.columnInspectionDefect.MaxLength = 10
            Me.columnSEND_FLG.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewLOT2_DATARow() As LOT2_DATARow
            Return CType(Me.NewRow,LOT2_DATARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New LOT2_DATARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(LOT2_DATARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LOT2_DATARowChangedEvent) Is Nothing) Then
                RaiseEvent LOT2_DATARowChanged(Me, New LOT2_DATARowChangeEvent(CType(e.Row,LOT2_DATARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LOT2_DATARowChangingEvent) Is Nothing) Then
                RaiseEvent LOT2_DATARowChanging(Me, New LOT2_DATARowChangeEvent(CType(e.Row,LOT2_DATARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LOT2_DATARowDeletedEvent) Is Nothing) Then
                RaiseEvent LOT2_DATARowDeleted(Me, New LOT2_DATARowChangeEvent(CType(e.Row,LOT2_DATARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LOT2_DATARowDeletingEvent) Is Nothing) Then
                RaiseEvent LOT2_DATARowDeleting(Me, New LOT2_DATARowChangeEvent(CType(e.Row,LOT2_DATARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveLOT2_DATARow(ByVal row As LOT2_DATARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As APCSDBDataSet = New APCSDBDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LOT2_DATADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LOT2_TABLEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnLOT_NO As Global.System.Data.DataColumn
        
        Private columnDVI_NO As Global.System.Data.DataColumn
        
        Private columnPRD_NAME As Global.System.Data.DataColumn
        
        Private columnIN_DAY As Global.System.Data.DataColumn
        
        Private columnOUT_DAY As Global.System.Data.DataColumn
        
        Private columnOPE_SEQ As Global.System.Data.DataColumn
        
        Private columnPRD_PIECE As Global.System.Data.DataColumn
        
        Private columnINP_PIECE As Global.System.Data.DataColumn
        
        Private columnOUT_PIECE As Global.System.Data.DataColumn
        
        Private columnREAL_DAY As Global.System.Data.DataColumn
        
        Private columnBATCH_NO As Global.System.Data.DataColumn
        
        Private columnBATCH_SUB As Global.System.Data.DataColumn
        
        Private columnMATER_NAME As Global.System.Data.DataColumn
        
        Private columnMATER_SNAME As Global.System.Data.DataColumn
        
        Private columnMAKER As Global.System.Data.DataColumn
        
        Private columnY_LEVEL As Global.System.Data.DataColumn
        
        Private columnSTATUS1 As Global.System.Data.DataColumn
        
        Private columnSTATUS2 As Global.System.Data.DataColumn
        
        Private columnCYCLE As Global.System.Data.DataColumn
        
        Private columnBOX_NO As Global.System.Data.DataColumn
        
        Private columnPRV_BOX_NO As Global.System.Data.DataColumn
        
        Private columnWAFER_STATUS As Global.System.Data.DataColumn
        
        Private columnLMT_STR_TIME As Global.System.Data.DataColumn
        
        Private columnWAGON_NO As Global.System.Data.DataColumn
        
        Private columnREP_OPE_SEQ As Global.System.Data.DataColumn
        
        Private columnREPEAT_QNT As Global.System.Data.DataColumn
        
        Private columnTOTAL_MASK As Global.System.Data.DataColumn
        
        Private columnSTATUS2_SAVE As Global.System.Data.DataColumn
        
        Private columnREAL_START As Global.System.Data.DataColumn
        
        Private columnTRO_TIME As Global.System.Data.DataColumn
        
        Private columnSISAKU_FLG As Global.System.Data.DataColumn
        
        Private columnPARENT_LOT As Global.System.Data.DataColumn
        
        Private columnOPE_AREA As Global.System.Data.DataColumn
        
        Private columnOPE_CHG_FLG As Global.System.Data.DataColumn
        
        Private columnPLT_OPE_SEQ1 As Global.System.Data.DataColumn
        
        Private columnPLT_OPE_SEQ2 As Global.System.Data.DataColumn
        
        Private columnPILOT_QNT As Global.System.Data.DataColumn
        
        Private columnTOTAL_QNT As Global.System.Data.DataColumn
        
        Private columnCOMMENT As Global.System.Data.DataColumn
        
        Private columnROHM_ORDER_MODEL_NAME_O As Global.System.Data.DataColumn
        
        Private columnORDER_NO As Global.System.Data.DataColumn
        
        Private columnFT_MODEL_NAME As Global.System.Data.DataColumn
        
        Private columnTP_RANK As Global.System.Data.DataColumn
        
        Private columnWARI_STOCK_KBN As Global.System.Data.DataColumn
        
        Private columnWARI_INSTRUCT_KBN As Global.System.Data.DataColumn
        
        Private columnFORM_NAME As Global.System.Data.DataColumn
        
        Private columnGOOD_PIECES As Global.System.Data.DataColumn
        
        Private columnBAD_PIECES As Global.System.Data.DataColumn
        
        Private columnShipTargetChipCount As Global.System.Data.DataColumn
        
        Private columnOfficialChipCount As Global.System.Data.DataColumn
        
        Private columnRestLotInitialChipCount As Global.System.Data.DataColumn
        
        Private columnRestLotInitialInputMagazine As Global.System.Data.DataColumn
        
        Private columnRestLotInitialInputFrame As Global.System.Data.DataColumn
        
        Private columnSection As Global.System.Data.DataColumn
        
        Private columnInvoiceNo As Global.System.Data.DataColumn
        
        Private columnQCCheckDBNG As Global.System.Data.DataColumn
        
        Private columnQCCheckDBPNashi As Global.System.Data.DataColumn
        
        Private columnQCCheckHajikiPullShaer As Global.System.Data.DataColumn
        
        Private columnQCCheckWBNG As Global.System.Data.DataColumn
        
        Private columnQCCheckWBInsNG As Global.System.Data.DataColumn
        
        Private columnQCCheckOSNG As Global.System.Data.DataColumn
        
        Private columnQCCheckJudge As Global.System.Data.DataColumn
        
        Private columnQCCheckerPD As Global.System.Data.DataColumn
        
        Private columnQCCheckerQC As Global.System.Data.DataColumn
        
        Private columnQCAQIIssueDate As Global.System.Data.DataColumn
        
        Private columnQCCheckExceptOSNG As Global.System.Data.DataColumn
        
        Private columnQCMainReasonExceptOSNG As Global.System.Data.DataColumn
        
        Private columnQCNGChipInExceptOSNG As Global.System.Data.DataColumn
        
        Private columnQCNGIncludeExceptOSNG As Global.System.Data.DataColumn
        
        Private columnQCNGJudgeExceptOSNG As Global.System.Data.DataColumn
        
        Private columnQCNGChipInGoodChip As Global.System.Data.DataColumn
        
        Private columnQCNGIncludeGoodChip As Global.System.Data.DataColumn
        
        Private columnQCNGJudgeGoodChip As Global.System.Data.DataColumn
        
        Private columnCREATION_DATE As Global.System.Data.DataColumn
        
        Private columnSEND_FLG As Global.System.Data.DataColumn
        
        Private columnSEND_DATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "LOT2_TABLE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DVI_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDVI_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRD_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRD_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IN_DAYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIN_DAY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_DAYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_DAY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPE_SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPE_SEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRD_PIECEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRD_PIECE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INP_PIECEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINP_PIECE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_PIECEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_PIECE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REAL_DAYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREAL_DAY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BATCH_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BATCH_SUBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_SUB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MATER_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMATER_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MATER_SNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMATER_SNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAKERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAKER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Y_LEVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnY_LEVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CYCLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCYCLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BOX_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBOX_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRV_BOX_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRV_BOX_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WAFER_STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWAFER_STATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LMT_STR_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLMT_STR_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WAGON_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWAGON_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REP_OPE_SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREP_OPE_SEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REPEAT_QNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREPEAT_QNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_MASKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_MASK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS2_SAVEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS2_SAVE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REAL_STARTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREAL_START
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRO_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRO_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SISAKU_FLGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSISAKU_FLG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PARENT_LOTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPARENT_LOT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPE_AREAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPE_AREA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPE_CHG_FLGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPE_CHG_FLG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PLT_OPE_SEQ1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLT_OPE_SEQ1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PLT_OPE_SEQ2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLT_OPE_SEQ2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PILOT_QNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPILOT_QNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_QNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_QNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMMENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ROHM_ORDER_MODEL_NAME_OColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROHM_ORDER_MODEL_NAME_O
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDER_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDER_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FT_MODEL_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFT_MODEL_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TP_RANKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTP_RANK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WARI_STOCK_KBNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWARI_STOCK_KBN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WARI_INSTRUCT_KBNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWARI_INSTRUCT_KBN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FORM_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFORM_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GOOD_PIECESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGOOD_PIECES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BAD_PIECESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBAD_PIECES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShipTargetChipCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipTargetChipCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OfficialChipCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOfficialChipCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RestLotInitialChipCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRestLotInitialChipCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RestLotInitialInputMagazineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRestLotInitialInputMagazine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RestLotInitialInputFrameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRestLotInitialInputFrame
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoiceNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoiceNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCCheckDBNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCCheckDBNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCCheckDBPNashiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCCheckDBPNashi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCCheckHajikiPullShaerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCCheckHajikiPullShaer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCCheckWBNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCCheckWBNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCCheckWBInsNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCCheckWBInsNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCCheckOSNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCCheckOSNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCCheckJudgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCCheckJudge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCCheckerPDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCCheckerPD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCCheckerQCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCCheckerQC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCAQIIssueDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCAQIIssueDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCCheckExceptOSNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCCheckExceptOSNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCMainReasonExceptOSNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCMainReasonExceptOSNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCNGChipInExceptOSNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCNGChipInExceptOSNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCNGIncludeExceptOSNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCNGIncludeExceptOSNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCNGJudgeExceptOSNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCNGJudgeExceptOSNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCNGChipInGoodChipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCNGChipInGoodChip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCNGIncludeGoodChipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCNGIncludeGoodChip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCNGJudgeGoodChipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCNGJudgeGoodChip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CREATION_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATION_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEND_FLGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEND_FLG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEND_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEND_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LOT2_TABLERow
            Get
                Return CType(Me.Rows(index),LOT2_TABLERow)
            End Get
        End Property
        
        Public Event LOT2_TABLERowChanging As LOT2_TABLERowChangeEventHandler
        
        Public Event LOT2_TABLERowChanged As LOT2_TABLERowChangeEventHandler
        
        Public Event LOT2_TABLERowDeleting As LOT2_TABLERowChangeEventHandler
        
        Public Event LOT2_TABLERowDeleted As LOT2_TABLERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddLOT2_TABLERow(ByVal row As LOT2_TABLERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddLOT2_TABLERow( _
                    ByVal LOT_NO As String,  _
                    ByVal DVI_NO As Integer,  _
                    ByVal PRD_NAME As String,  _
                    ByVal IN_DAY As String,  _
                    ByVal OUT_DAY As String,  _
                    ByVal OPE_SEQ As Short,  _
                    ByVal PRD_PIECE As Integer,  _
                    ByVal INP_PIECE As Integer,  _
                    ByVal OUT_PIECE As Integer,  _
                    ByVal REAL_DAY As Date,  _
                    ByVal BATCH_NO As String,  _
                    ByVal BATCH_SUB As String,  _
                    ByVal MATER_NAME As String,  _
                    ByVal MATER_SNAME As String,  _
                    ByVal MAKER As String,  _
                    ByVal Y_LEVEL As String,  _
                    ByVal STATUS1 As String,  _
                    ByVal STATUS2 As String,  _
                    ByVal CYCLE As Short,  _
                    ByVal BOX_NO As String,  _
                    ByVal PRV_BOX_NO As String,  _
                    ByVal WAFER_STATUS As String,  _
                    ByVal LMT_STR_TIME As Date,  _
                    ByVal WAGON_NO As String,  _
                    ByVal REP_OPE_SEQ As Short,  _
                    ByVal REPEAT_QNT As Short,  _
                    ByVal TOTAL_MASK As String,  _
                    ByVal STATUS2_SAVE As String,  _
                    ByVal REAL_START As Date,  _
                    ByVal TRO_TIME As Date,  _
                    ByVal SISAKU_FLG As String,  _
                    ByVal PARENT_LOT As String,  _
                    ByVal OPE_AREA As String,  _
                    ByVal OPE_CHG_FLG As String,  _
                    ByVal PLT_OPE_SEQ1 As Short,  _
                    ByVal PLT_OPE_SEQ2 As Short,  _
                    ByVal PILOT_QNT As Short,  _
                    ByVal TOTAL_QNT As Short,  _
                    ByVal COMMENT As String,  _
                    ByVal ROHM_ORDER_MODEL_NAME_O As String,  _
                    ByVal ORDER_NO As String,  _
                    ByVal FT_MODEL_NAME As String,  _
                    ByVal TP_RANK As String,  _
                    ByVal WARI_STOCK_KBN As Short,  _
                    ByVal WARI_INSTRUCT_KBN As Short,  _
                    ByVal FORM_NAME As String,  _
                    ByVal GOOD_PIECES As Integer,  _
                    ByVal BAD_PIECES As Integer,  _
                    ByVal ShipTargetChipCount As Integer,  _
                    ByVal OfficialChipCount As Integer,  _
                    ByVal RestLotInitialChipCount As Integer,  _
                    ByVal RestLotInitialInputMagazine As Short,  _
                    ByVal RestLotInitialInputFrame As Short,  _
                    ByVal Section As String,  _
                    ByVal InvoiceNo As String,  _
                    ByVal QCCheckDBNG As Integer,  _
                    ByVal QCCheckDBPNashi As Integer,  _
                    ByVal QCCheckHajikiPullShaer As Integer,  _
                    ByVal QCCheckWBNG As Integer,  _
                    ByVal QCCheckWBInsNG As Integer,  _
                    ByVal QCCheckOSNG As Integer,  _
                    ByVal QCCheckJudge As Short,  _
                    ByVal QCCheckerPD As String,  _
                    ByVal QCCheckerQC As String,  _
                    ByVal QCAQIIssueDate As Date,  _
                    ByVal QCCheckExceptOSNG As Integer,  _
                    ByVal QCMainReasonExceptOSNG As String,  _
                    ByVal QCNGChipInExceptOSNG As Integer,  _
                    ByVal QCNGIncludeExceptOSNG As Short,  _
                    ByVal QCNGJudgeExceptOSNG As Short,  _
                    ByVal QCNGChipInGoodChip As Integer,  _
                    ByVal QCNGIncludeGoodChip As Short,  _
                    ByVal QCNGJudgeGoodChip As Short,  _
                    ByVal CREATION_DATE As Date,  _
                    ByVal SEND_FLG As String,  _
                    ByVal SEND_DATE As Date) As LOT2_TABLERow
            Dim rowLOT2_TABLERow As LOT2_TABLERow = CType(Me.NewRow,LOT2_TABLERow)
            Dim columnValuesArray() As Object = New Object() {LOT_NO, DVI_NO, PRD_NAME, IN_DAY, OUT_DAY, OPE_SEQ, PRD_PIECE, INP_PIECE, OUT_PIECE, REAL_DAY, BATCH_NO, BATCH_SUB, MATER_NAME, MATER_SNAME, MAKER, Y_LEVEL, STATUS1, STATUS2, CYCLE, BOX_NO, PRV_BOX_NO, WAFER_STATUS, LMT_STR_TIME, WAGON_NO, REP_OPE_SEQ, REPEAT_QNT, TOTAL_MASK, STATUS2_SAVE, REAL_START, TRO_TIME, SISAKU_FLG, PARENT_LOT, OPE_AREA, OPE_CHG_FLG, PLT_OPE_SEQ1, PLT_OPE_SEQ2, PILOT_QNT, TOTAL_QNT, COMMENT, ROHM_ORDER_MODEL_NAME_O, ORDER_NO, FT_MODEL_NAME, TP_RANK, WARI_STOCK_KBN, WARI_INSTRUCT_KBN, FORM_NAME, GOOD_PIECES, BAD_PIECES, ShipTargetChipCount, OfficialChipCount, RestLotInitialChipCount, RestLotInitialInputMagazine, RestLotInitialInputFrame, Section, InvoiceNo, QCCheckDBNG, QCCheckDBPNashi, QCCheckHajikiPullShaer, QCCheckWBNG, QCCheckWBInsNG, QCCheckOSNG, QCCheckJudge, QCCheckerPD, QCCheckerQC, QCAQIIssueDate, QCCheckExceptOSNG, QCMainReasonExceptOSNG, QCNGChipInExceptOSNG, QCNGIncludeExceptOSNG, QCNGJudgeExceptOSNG, QCNGChipInGoodChip, QCNGIncludeGoodChip, QCNGJudgeGoodChip, CREATION_DATE, SEND_FLG, SEND_DATE}
            rowLOT2_TABLERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowLOT2_TABLERow)
            Return rowLOT2_TABLERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByLOT_NO(ByVal LOT_NO As String) As LOT2_TABLERow
            Return CType(Me.Rows.Find(New Object() {LOT_NO}),LOT2_TABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As LOT2_TABLEDataTable = CType(MyBase.Clone,LOT2_TABLEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New LOT2_TABLEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLOT_NO = MyBase.Columns("LOT_NO")
            Me.columnDVI_NO = MyBase.Columns("DVI_NO")
            Me.columnPRD_NAME = MyBase.Columns("PRD_NAME")
            Me.columnIN_DAY = MyBase.Columns("IN_DAY")
            Me.columnOUT_DAY = MyBase.Columns("OUT_DAY")
            Me.columnOPE_SEQ = MyBase.Columns("OPE_SEQ")
            Me.columnPRD_PIECE = MyBase.Columns("PRD_PIECE")
            Me.columnINP_PIECE = MyBase.Columns("INP_PIECE")
            Me.columnOUT_PIECE = MyBase.Columns("OUT_PIECE")
            Me.columnREAL_DAY = MyBase.Columns("REAL_DAY")
            Me.columnBATCH_NO = MyBase.Columns("BATCH_NO")
            Me.columnBATCH_SUB = MyBase.Columns("BATCH_SUB")
            Me.columnMATER_NAME = MyBase.Columns("MATER_NAME")
            Me.columnMATER_SNAME = MyBase.Columns("MATER_SNAME")
            Me.columnMAKER = MyBase.Columns("MAKER")
            Me.columnY_LEVEL = MyBase.Columns("Y_LEVEL")
            Me.columnSTATUS1 = MyBase.Columns("STATUS1")
            Me.columnSTATUS2 = MyBase.Columns("STATUS2")
            Me.columnCYCLE = MyBase.Columns("CYCLE")
            Me.columnBOX_NO = MyBase.Columns("BOX_NO")
            Me.columnPRV_BOX_NO = MyBase.Columns("PRV_BOX_NO")
            Me.columnWAFER_STATUS = MyBase.Columns("WAFER_STATUS")
            Me.columnLMT_STR_TIME = MyBase.Columns("LMT_STR_TIME")
            Me.columnWAGON_NO = MyBase.Columns("WAGON_NO")
            Me.columnREP_OPE_SEQ = MyBase.Columns("REP_OPE_SEQ")
            Me.columnREPEAT_QNT = MyBase.Columns("REPEAT_QNT")
            Me.columnTOTAL_MASK = MyBase.Columns("TOTAL_MASK")
            Me.columnSTATUS2_SAVE = MyBase.Columns("STATUS2_SAVE")
            Me.columnREAL_START = MyBase.Columns("REAL_START")
            Me.columnTRO_TIME = MyBase.Columns("TRO_TIME")
            Me.columnSISAKU_FLG = MyBase.Columns("SISAKU_FLG")
            Me.columnPARENT_LOT = MyBase.Columns("PARENT_LOT")
            Me.columnOPE_AREA = MyBase.Columns("OPE_AREA")
            Me.columnOPE_CHG_FLG = MyBase.Columns("OPE_CHG_FLG")
            Me.columnPLT_OPE_SEQ1 = MyBase.Columns("PLT_OPE_SEQ1")
            Me.columnPLT_OPE_SEQ2 = MyBase.Columns("PLT_OPE_SEQ2")
            Me.columnPILOT_QNT = MyBase.Columns("PILOT_QNT")
            Me.columnTOTAL_QNT = MyBase.Columns("TOTAL_QNT")
            Me.columnCOMMENT = MyBase.Columns("COMMENT")
            Me.columnROHM_ORDER_MODEL_NAME_O = MyBase.Columns("ROHM_ORDER_MODEL_NAME_O")
            Me.columnORDER_NO = MyBase.Columns("ORDER_NO")
            Me.columnFT_MODEL_NAME = MyBase.Columns("FT_MODEL_NAME")
            Me.columnTP_RANK = MyBase.Columns("TP_RANK")
            Me.columnWARI_STOCK_KBN = MyBase.Columns("WARI_STOCK_KBN")
            Me.columnWARI_INSTRUCT_KBN = MyBase.Columns("WARI_INSTRUCT_KBN")
            Me.columnFORM_NAME = MyBase.Columns("FORM_NAME")
            Me.columnGOOD_PIECES = MyBase.Columns("GOOD_PIECES")
            Me.columnBAD_PIECES = MyBase.Columns("BAD_PIECES")
            Me.columnShipTargetChipCount = MyBase.Columns("ShipTargetChipCount")
            Me.columnOfficialChipCount = MyBase.Columns("OfficialChipCount")
            Me.columnRestLotInitialChipCount = MyBase.Columns("RestLotInitialChipCount")
            Me.columnRestLotInitialInputMagazine = MyBase.Columns("RestLotInitialInputMagazine")
            Me.columnRestLotInitialInputFrame = MyBase.Columns("RestLotInitialInputFrame")
            Me.columnSection = MyBase.Columns("Section")
            Me.columnInvoiceNo = MyBase.Columns("InvoiceNo")
            Me.columnQCCheckDBNG = MyBase.Columns("QCCheckDBNG")
            Me.columnQCCheckDBPNashi = MyBase.Columns("QCCheckDBPNashi")
            Me.columnQCCheckHajikiPullShaer = MyBase.Columns("QCCheckHajikiPullShaer")
            Me.columnQCCheckWBNG = MyBase.Columns("QCCheckWBNG")
            Me.columnQCCheckWBInsNG = MyBase.Columns("QCCheckWBInsNG")
            Me.columnQCCheckOSNG = MyBase.Columns("QCCheckOSNG")
            Me.columnQCCheckJudge = MyBase.Columns("QCCheckJudge")
            Me.columnQCCheckerPD = MyBase.Columns("QCCheckerPD")
            Me.columnQCCheckerQC = MyBase.Columns("QCCheckerQC")
            Me.columnQCAQIIssueDate = MyBase.Columns("QCAQIIssueDate")
            Me.columnQCCheckExceptOSNG = MyBase.Columns("QCCheckExceptOSNG")
            Me.columnQCMainReasonExceptOSNG = MyBase.Columns("QCMainReasonExceptOSNG")
            Me.columnQCNGChipInExceptOSNG = MyBase.Columns("QCNGChipInExceptOSNG")
            Me.columnQCNGIncludeExceptOSNG = MyBase.Columns("QCNGIncludeExceptOSNG")
            Me.columnQCNGJudgeExceptOSNG = MyBase.Columns("QCNGJudgeExceptOSNG")
            Me.columnQCNGChipInGoodChip = MyBase.Columns("QCNGChipInGoodChip")
            Me.columnQCNGIncludeGoodChip = MyBase.Columns("QCNGIncludeGoodChip")
            Me.columnQCNGJudgeGoodChip = MyBase.Columns("QCNGJudgeGoodChip")
            Me.columnCREATION_DATE = MyBase.Columns("CREATION_DATE")
            Me.columnSEND_FLG = MyBase.Columns("SEND_FLG")
            Me.columnSEND_DATE = MyBase.Columns("SEND_DATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLOT_NO = New Global.System.Data.DataColumn("LOT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_NO)
            Me.columnDVI_NO = New Global.System.Data.DataColumn("DVI_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDVI_NO)
            Me.columnPRD_NAME = New Global.System.Data.DataColumn("PRD_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRD_NAME)
            Me.columnIN_DAY = New Global.System.Data.DataColumn("IN_DAY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIN_DAY)
            Me.columnOUT_DAY = New Global.System.Data.DataColumn("OUT_DAY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_DAY)
            Me.columnOPE_SEQ = New Global.System.Data.DataColumn("OPE_SEQ", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPE_SEQ)
            Me.columnPRD_PIECE = New Global.System.Data.DataColumn("PRD_PIECE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRD_PIECE)
            Me.columnINP_PIECE = New Global.System.Data.DataColumn("INP_PIECE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINP_PIECE)
            Me.columnOUT_PIECE = New Global.System.Data.DataColumn("OUT_PIECE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_PIECE)
            Me.columnREAL_DAY = New Global.System.Data.DataColumn("REAL_DAY", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREAL_DAY)
            Me.columnBATCH_NO = New Global.System.Data.DataColumn("BATCH_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_NO)
            Me.columnBATCH_SUB = New Global.System.Data.DataColumn("BATCH_SUB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_SUB)
            Me.columnMATER_NAME = New Global.System.Data.DataColumn("MATER_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMATER_NAME)
            Me.columnMATER_SNAME = New Global.System.Data.DataColumn("MATER_SNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMATER_SNAME)
            Me.columnMAKER = New Global.System.Data.DataColumn("MAKER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAKER)
            Me.columnY_LEVEL = New Global.System.Data.DataColumn("Y_LEVEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnY_LEVEL)
            Me.columnSTATUS1 = New Global.System.Data.DataColumn("STATUS1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS1)
            Me.columnSTATUS2 = New Global.System.Data.DataColumn("STATUS2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS2)
            Me.columnCYCLE = New Global.System.Data.DataColumn("CYCLE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCYCLE)
            Me.columnBOX_NO = New Global.System.Data.DataColumn("BOX_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBOX_NO)
            Me.columnPRV_BOX_NO = New Global.System.Data.DataColumn("PRV_BOX_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRV_BOX_NO)
            Me.columnWAFER_STATUS = New Global.System.Data.DataColumn("WAFER_STATUS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWAFER_STATUS)
            Me.columnLMT_STR_TIME = New Global.System.Data.DataColumn("LMT_STR_TIME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLMT_STR_TIME)
            Me.columnWAGON_NO = New Global.System.Data.DataColumn("WAGON_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWAGON_NO)
            Me.columnREP_OPE_SEQ = New Global.System.Data.DataColumn("REP_OPE_SEQ", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREP_OPE_SEQ)
            Me.columnREPEAT_QNT = New Global.System.Data.DataColumn("REPEAT_QNT", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREPEAT_QNT)
            Me.columnTOTAL_MASK = New Global.System.Data.DataColumn("TOTAL_MASK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_MASK)
            Me.columnSTATUS2_SAVE = New Global.System.Data.DataColumn("STATUS2_SAVE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS2_SAVE)
            Me.columnREAL_START = New Global.System.Data.DataColumn("REAL_START", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREAL_START)
            Me.columnTRO_TIME = New Global.System.Data.DataColumn("TRO_TIME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRO_TIME)
            Me.columnSISAKU_FLG = New Global.System.Data.DataColumn("SISAKU_FLG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSISAKU_FLG)
            Me.columnPARENT_LOT = New Global.System.Data.DataColumn("PARENT_LOT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPARENT_LOT)
            Me.columnOPE_AREA = New Global.System.Data.DataColumn("OPE_AREA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPE_AREA)
            Me.columnOPE_CHG_FLG = New Global.System.Data.DataColumn("OPE_CHG_FLG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPE_CHG_FLG)
            Me.columnPLT_OPE_SEQ1 = New Global.System.Data.DataColumn("PLT_OPE_SEQ1", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLT_OPE_SEQ1)
            Me.columnPLT_OPE_SEQ2 = New Global.System.Data.DataColumn("PLT_OPE_SEQ2", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLT_OPE_SEQ2)
            Me.columnPILOT_QNT = New Global.System.Data.DataColumn("PILOT_QNT", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPILOT_QNT)
            Me.columnTOTAL_QNT = New Global.System.Data.DataColumn("TOTAL_QNT", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_QNT)
            Me.columnCOMMENT = New Global.System.Data.DataColumn("COMMENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENT)
            Me.columnROHM_ORDER_MODEL_NAME_O = New Global.System.Data.DataColumn("ROHM_ORDER_MODEL_NAME_O", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROHM_ORDER_MODEL_NAME_O)
            Me.columnORDER_NO = New Global.System.Data.DataColumn("ORDER_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDER_NO)
            Me.columnFT_MODEL_NAME = New Global.System.Data.DataColumn("FT_MODEL_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFT_MODEL_NAME)
            Me.columnTP_RANK = New Global.System.Data.DataColumn("TP_RANK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTP_RANK)
            Me.columnWARI_STOCK_KBN = New Global.System.Data.DataColumn("WARI_STOCK_KBN", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWARI_STOCK_KBN)
            Me.columnWARI_INSTRUCT_KBN = New Global.System.Data.DataColumn("WARI_INSTRUCT_KBN", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWARI_INSTRUCT_KBN)
            Me.columnFORM_NAME = New Global.System.Data.DataColumn("FORM_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFORM_NAME)
            Me.columnGOOD_PIECES = New Global.System.Data.DataColumn("GOOD_PIECES", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGOOD_PIECES)
            Me.columnBAD_PIECES = New Global.System.Data.DataColumn("BAD_PIECES", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBAD_PIECES)
            Me.columnShipTargetChipCount = New Global.System.Data.DataColumn("ShipTargetChipCount", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipTargetChipCount)
            Me.columnOfficialChipCount = New Global.System.Data.DataColumn("OfficialChipCount", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOfficialChipCount)
            Me.columnRestLotInitialChipCount = New Global.System.Data.DataColumn("RestLotInitialChipCount", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRestLotInitialChipCount)
            Me.columnRestLotInitialInputMagazine = New Global.System.Data.DataColumn("RestLotInitialInputMagazine", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRestLotInitialInputMagazine)
            Me.columnRestLotInitialInputFrame = New Global.System.Data.DataColumn("RestLotInitialInputFrame", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRestLotInitialInputFrame)
            Me.columnSection = New Global.System.Data.DataColumn("Section", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSection)
            Me.columnInvoiceNo = New Global.System.Data.DataColumn("InvoiceNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoiceNo)
            Me.columnQCCheckDBNG = New Global.System.Data.DataColumn("QCCheckDBNG", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCCheckDBNG)
            Me.columnQCCheckDBPNashi = New Global.System.Data.DataColumn("QCCheckDBPNashi", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCCheckDBPNashi)
            Me.columnQCCheckHajikiPullShaer = New Global.System.Data.DataColumn("QCCheckHajikiPullShaer", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCCheckHajikiPullShaer)
            Me.columnQCCheckWBNG = New Global.System.Data.DataColumn("QCCheckWBNG", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCCheckWBNG)
            Me.columnQCCheckWBInsNG = New Global.System.Data.DataColumn("QCCheckWBInsNG", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCCheckWBInsNG)
            Me.columnQCCheckOSNG = New Global.System.Data.DataColumn("QCCheckOSNG", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCCheckOSNG)
            Me.columnQCCheckJudge = New Global.System.Data.DataColumn("QCCheckJudge", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCCheckJudge)
            Me.columnQCCheckerPD = New Global.System.Data.DataColumn("QCCheckerPD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCCheckerPD)
            Me.columnQCCheckerQC = New Global.System.Data.DataColumn("QCCheckerQC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCCheckerQC)
            Me.columnQCAQIIssueDate = New Global.System.Data.DataColumn("QCAQIIssueDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCAQIIssueDate)
            Me.columnQCCheckExceptOSNG = New Global.System.Data.DataColumn("QCCheckExceptOSNG", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCCheckExceptOSNG)
            Me.columnQCMainReasonExceptOSNG = New Global.System.Data.DataColumn("QCMainReasonExceptOSNG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCMainReasonExceptOSNG)
            Me.columnQCNGChipInExceptOSNG = New Global.System.Data.DataColumn("QCNGChipInExceptOSNG", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCNGChipInExceptOSNG)
            Me.columnQCNGIncludeExceptOSNG = New Global.System.Data.DataColumn("QCNGIncludeExceptOSNG", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCNGIncludeExceptOSNG)
            Me.columnQCNGJudgeExceptOSNG = New Global.System.Data.DataColumn("QCNGJudgeExceptOSNG", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCNGJudgeExceptOSNG)
            Me.columnQCNGChipInGoodChip = New Global.System.Data.DataColumn("QCNGChipInGoodChip", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCNGChipInGoodChip)
            Me.columnQCNGIncludeGoodChip = New Global.System.Data.DataColumn("QCNGIncludeGoodChip", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCNGIncludeGoodChip)
            Me.columnQCNGJudgeGoodChip = New Global.System.Data.DataColumn("QCNGJudgeGoodChip", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCNGJudgeGoodChip)
            Me.columnCREATION_DATE = New Global.System.Data.DataColumn("CREATION_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATION_DATE)
            Me.columnSEND_FLG = New Global.System.Data.DataColumn("SEND_FLG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEND_FLG)
            Me.columnSEND_DATE = New Global.System.Data.DataColumn("SEND_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEND_DATE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnLOT_NO}, true))
            Me.columnLOT_NO.AllowDBNull = false
            Me.columnLOT_NO.Unique = true
            Me.columnLOT_NO.MaxLength = 13
            Me.columnDVI_NO.AllowDBNull = false
            Me.columnPRD_NAME.AllowDBNull = false
            Me.columnPRD_NAME.MaxLength = 25
            Me.columnIN_DAY.AllowDBNull = false
            Me.columnIN_DAY.MaxLength = 8
            Me.columnOUT_DAY.AllowDBNull = false
            Me.columnOUT_DAY.MaxLength = 8
            Me.columnOPE_SEQ.AllowDBNull = false
            Me.columnPRD_PIECE.AllowDBNull = false
            Me.columnINP_PIECE.AllowDBNull = false
            Me.columnOUT_PIECE.AllowDBNull = false
            Me.columnBATCH_NO.MaxLength = 6
            Me.columnBATCH_SUB.MaxLength = 2
            Me.columnMATER_NAME.MaxLength = 25
            Me.columnMATER_SNAME.MaxLength = 15
            Me.columnMAKER.MaxLength = 12
            Me.columnY_LEVEL.AllowDBNull = false
            Me.columnY_LEVEL.MaxLength = 1
            Me.columnSTATUS1.AllowDBNull = false
            Me.columnSTATUS1.MaxLength = 1
            Me.columnSTATUS2.AllowDBNull = false
            Me.columnSTATUS2.MaxLength = 1
            Me.columnCYCLE.AllowDBNull = false
            Me.columnBOX_NO.MaxLength = 6
            Me.columnPRV_BOX_NO.MaxLength = 6
            Me.columnWAFER_STATUS.MaxLength = 25
            Me.columnWAGON_NO.MaxLength = 5
            Me.columnREP_OPE_SEQ.AllowDBNull = false
            Me.columnREPEAT_QNT.AllowDBNull = false
            Me.columnTOTAL_MASK.MaxLength = 10
            Me.columnSTATUS2_SAVE.MaxLength = 1
            Me.columnSISAKU_FLG.AllowDBNull = false
            Me.columnSISAKU_FLG.MaxLength = 1
            Me.columnPARENT_LOT.MaxLength = 13
            Me.columnOPE_AREA.MaxLength = 15
            Me.columnOPE_CHG_FLG.MaxLength = 1
            Me.columnCOMMENT.MaxLength = 100
            Me.columnROHM_ORDER_MODEL_NAME_O.MaxLength = 20
            Me.columnORDER_NO.MaxLength = 12
            Me.columnFT_MODEL_NAME.MaxLength = 20
            Me.columnTP_RANK.MaxLength = 20
            Me.columnFORM_NAME.MaxLength = 20
            Me.columnGOOD_PIECES.AllowDBNull = false
            Me.columnBAD_PIECES.AllowDBNull = false
            Me.columnSection.MaxLength = 6
            Me.columnInvoiceNo.MaxLength = 20
            Me.columnQCCheckerPD.MaxLength = 10
            Me.columnQCCheckerQC.MaxLength = 10
            Me.columnQCMainReasonExceptOSNG.MaxLength = 20
            Me.columnSEND_FLG.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewLOT2_TABLERow() As LOT2_TABLERow
            Return CType(Me.NewRow,LOT2_TABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New LOT2_TABLERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(LOT2_TABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LOT2_TABLERowChangedEvent) Is Nothing) Then
                RaiseEvent LOT2_TABLERowChanged(Me, New LOT2_TABLERowChangeEvent(CType(e.Row,LOT2_TABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LOT2_TABLERowChangingEvent) Is Nothing) Then
                RaiseEvent LOT2_TABLERowChanging(Me, New LOT2_TABLERowChangeEvent(CType(e.Row,LOT2_TABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LOT2_TABLERowDeletedEvent) Is Nothing) Then
                RaiseEvent LOT2_TABLERowDeleted(Me, New LOT2_TABLERowChangeEvent(CType(e.Row,LOT2_TABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LOT2_TABLERowDeletingEvent) Is Nothing) Then
                RaiseEvent LOT2_TABLERowDeleting(Me, New LOT2_TABLERowChangeEvent(CType(e.Row,LOT2_TABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveLOT2_TABLERow(ByVal row As LOT2_TABLERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As APCSDBDataSet = New APCSDBDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LOT2_TABLEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MACHI_TABLEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMACHI_NAME As Global.System.Data.DataColumn
        
        Private columnPROCESS_TYPE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MACHI_TABLE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MACHI_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMACHI_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MACHI_TABLERow
            Get
                Return CType(Me.Rows(index),MACHI_TABLERow)
            End Get
        End Property
        
        Public Event MACHI_TABLERowChanging As MACHI_TABLERowChangeEventHandler
        
        Public Event MACHI_TABLERowChanged As MACHI_TABLERowChangeEventHandler
        
        Public Event MACHI_TABLERowDeleting As MACHI_TABLERowChangeEventHandler
        
        Public Event MACHI_TABLERowDeleted As MACHI_TABLERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMACHI_TABLERow(ByVal row As MACHI_TABLERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMACHI_TABLERow(ByVal MACHI_NAME As String, ByVal PROCESS_TYPE As String) As MACHI_TABLERow
            Dim rowMACHI_TABLERow As MACHI_TABLERow = CType(Me.NewRow,MACHI_TABLERow)
            Dim columnValuesArray() As Object = New Object() {MACHI_NAME, PROCESS_TYPE}
            rowMACHI_TABLERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMACHI_TABLERow)
            Return rowMACHI_TABLERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMACHI_NAME(ByVal MACHI_NAME As String) As MACHI_TABLERow
            Return CType(Me.Rows.Find(New Object() {MACHI_NAME}),MACHI_TABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MACHI_TABLEDataTable = CType(MyBase.Clone,MACHI_TABLEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MACHI_TABLEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMACHI_NAME = MyBase.Columns("MACHI_NAME")
            Me.columnPROCESS_TYPE = MyBase.Columns("PROCESS_TYPE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMACHI_NAME = New Global.System.Data.DataColumn("MACHI_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMACHI_NAME)
            Me.columnPROCESS_TYPE = New Global.System.Data.DataColumn("PROCESS_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_TYPE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMACHI_NAME}, true))
            Me.columnMACHI_NAME.AllowDBNull = false
            Me.columnMACHI_NAME.Unique = true
            Me.columnMACHI_NAME.MaxLength = 12
            Me.columnPROCESS_TYPE.MaxLength = 28
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMACHI_TABLERow() As MACHI_TABLERow
            Return CType(Me.NewRow,MACHI_TABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MACHI_TABLERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MACHI_TABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MACHI_TABLERowChangedEvent) Is Nothing) Then
                RaiseEvent MACHI_TABLERowChanged(Me, New MACHI_TABLERowChangeEvent(CType(e.Row,MACHI_TABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MACHI_TABLERowChangingEvent) Is Nothing) Then
                RaiseEvent MACHI_TABLERowChanging(Me, New MACHI_TABLERowChangeEvent(CType(e.Row,MACHI_TABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MACHI_TABLERowDeletedEvent) Is Nothing) Then
                RaiseEvent MACHI_TABLERowDeleted(Me, New MACHI_TABLERowChangeEvent(CType(e.Row,MACHI_TABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MACHI_TABLERowDeletingEvent) Is Nothing) Then
                RaiseEvent MACHI_TABLERowDeleting(Me, New MACHI_TABLERowChangeEvent(CType(e.Row,MACHI_TABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMACHI_TABLERow(ByVal row As MACHI_TABLERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As APCSDBDataSet = New APCSDBDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MACHI_TABLEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class WorkDataDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnLOT_NO As Global.System.Data.DataColumn
        
        Private columnDVI_NO As Global.System.Data.DataColumn
        
        Private columnPRD_NAME As Global.System.Data.DataColumn
        
        Private columnIN_DAY As Global.System.Data.DataColumn
        
        Private columnOUT_DAY As Global.System.Data.DataColumn
        
        Private columnOPE_SEQ As Global.System.Data.DataColumn
        
        Private columnPRD_PIECE As Global.System.Data.DataColumn
        
        Private columnINP_PIECE As Global.System.Data.DataColumn
        
        Private columnOUT_PIECE As Global.System.Data.DataColumn
        
        Private columnREAL_DAY As Global.System.Data.DataColumn
        
        Private columnBATCH_NO As Global.System.Data.DataColumn
        
        Private columnBATCH_SUB As Global.System.Data.DataColumn
        
        Private columnMATER_NAME As Global.System.Data.DataColumn
        
        Private columnMATER_SNAME As Global.System.Data.DataColumn
        
        Private columnMAKER As Global.System.Data.DataColumn
        
        Private columnY_LEVEL As Global.System.Data.DataColumn
        
        Private columnSTATUS1 As Global.System.Data.DataColumn
        
        Private columnSTATUS2 As Global.System.Data.DataColumn
        
        Private columnCYCLE As Global.System.Data.DataColumn
        
        Private columnBOX_NO As Global.System.Data.DataColumn
        
        Private columnPRV_BOX_NO As Global.System.Data.DataColumn
        
        Private columnWAFER_STATUS As Global.System.Data.DataColumn
        
        Private columnLMT_STR_TIME As Global.System.Data.DataColumn
        
        Private columnWAGON_NO As Global.System.Data.DataColumn
        
        Private columnREP_OPE_SEQ As Global.System.Data.DataColumn
        
        Private columnREPEAT_QNT As Global.System.Data.DataColumn
        
        Private columnTOTAL_MASK As Global.System.Data.DataColumn
        
        Private columnSTATUS2_SAVE As Global.System.Data.DataColumn
        
        Private columnREAL_START As Global.System.Data.DataColumn
        
        Private columnTRO_TIME As Global.System.Data.DataColumn
        
        Private columnSISAKU_FLG As Global.System.Data.DataColumn
        
        Private columnPARENT_LOT As Global.System.Data.DataColumn
        
        Private columnOPE_AREA As Global.System.Data.DataColumn
        
        Private columnOPE_CHG_FLG As Global.System.Data.DataColumn
        
        Private columnPLT_OPE_SEQ1 As Global.System.Data.DataColumn
        
        Private columnPLT_OPE_SEQ2 As Global.System.Data.DataColumn
        
        Private columnPILOT_QNT As Global.System.Data.DataColumn
        
        Private columnTOTAL_QNT As Global.System.Data.DataColumn
        
        Private columnCOMMENT As Global.System.Data.DataColumn
        
        Private columnROHM_ORDER_MODEL_NAME_O As Global.System.Data.DataColumn
        
        Private columnORDER_NO As Global.System.Data.DataColumn
        
        Private columnFT_MODEL_NAME As Global.System.Data.DataColumn
        
        Private columnTP_RANK As Global.System.Data.DataColumn
        
        Private columnWARI_STOCK_KBN As Global.System.Data.DataColumn
        
        Private columnWARI_INSTRUCT_KBN As Global.System.Data.DataColumn
        
        Private columnFORM_NAME As Global.System.Data.DataColumn
        
        Private columnGOOD_PIECES As Global.System.Data.DataColumn
        
        Private columnBAD_PIECES As Global.System.Data.DataColumn
        
        Private columnShipTargetChipCount As Global.System.Data.DataColumn
        
        Private columnOfficialChipCount As Global.System.Data.DataColumn
        
        Private columnRestLotInitialChipCount As Global.System.Data.DataColumn
        
        Private columnRestLotInitialInputMagazine As Global.System.Data.DataColumn
        
        Private columnRestLotInitialInputFrame As Global.System.Data.DataColumn
        
        Private columnSection As Global.System.Data.DataColumn
        
        Private columnInvoiceNo As Global.System.Data.DataColumn
        
        Private columnQCCheckDBNG As Global.System.Data.DataColumn
        
        Private columnQCCheckDBPNashi As Global.System.Data.DataColumn
        
        Private columnQCCheckHajikiPullShaer As Global.System.Data.DataColumn
        
        Private columnQCCheckWBNG As Global.System.Data.DataColumn
        
        Private columnQCCheckWBInsNG As Global.System.Data.DataColumn
        
        Private columnQCCheckOSNG As Global.System.Data.DataColumn
        
        Private columnQCCheckJudge As Global.System.Data.DataColumn
        
        Private columnQCCheckerPD As Global.System.Data.DataColumn
        
        Private columnQCCheckerQC As Global.System.Data.DataColumn
        
        Private columnQCAQIIssueDate As Global.System.Data.DataColumn
        
        Private columnQCCheckExceptOSNG As Global.System.Data.DataColumn
        
        Private columnQCMainReasonExceptOSNG As Global.System.Data.DataColumn
        
        Private columnQCNGChipInExceptOSNG As Global.System.Data.DataColumn
        
        Private columnQCNGIncludeExceptOSNG As Global.System.Data.DataColumn
        
        Private columnQCNGJudgeExceptOSNG As Global.System.Data.DataColumn
        
        Private columnQCNGChipInGoodChip As Global.System.Data.DataColumn
        
        Private columnQCNGIncludeGoodChip As Global.System.Data.DataColumn
        
        Private columnQCNGJudgeGoodChip As Global.System.Data.DataColumn
        
        Private columnCREATION_DATE As Global.System.Data.DataColumn
        
        Private columnSEND_FLG As Global.System.Data.DataColumn
        
        Private columnSEND_DATE As Global.System.Data.DataColumn
        
        Private columnLOT_NO1 As Global.System.Data.DataColumn
        
        Private columnOPE_SEQ1 As Global.System.Data.DataColumn
        
        Private columnN_OPE_SEQ As Global.System.Data.DataColumn
        
        Private columnLAY_NO As Global.System.Data.DataColumn
        
        Private columnB_PLAN_DAY As Global.System.Data.DataColumn
        
        Private columnPLAN_DAY As Global.System.Data.DataColumn
        
        Private columnRECIPE As Global.System.Data.DataColumn
        
        Private columnSTART_MSG As Global.System.Data.DataColumn
        
        Private columnEND_MSG As Global.System.Data.DataColumn
        
        Private columnSTOP_FLG As Global.System.Data.DataColumn
        
        Private columnSTOP_REASON As Global.System.Data.DataColumn
        
        Private columnSTOP_NAME As Global.System.Data.DataColumn
        
        Private columnLIMIT_TIME1 As Global.System.Data.DataColumn
        
        Private columnLIMIT_MSG1 As Global.System.Data.DataColumn
        
        Private columnLIMIT_TIME2 As Global.System.Data.DataColumn
        
        Private columnLIMIT_MSG2 As Global.System.Data.DataColumn
        
        Private columnOPE_AREA1 As Global.System.Data.DataColumn
        
        Private columnLIMIT_FLG As Global.System.Data.DataColumn
        
        Private columnDATA_NO As Global.System.Data.DataColumn
        
        Private columnMASK_NAME As Global.System.Data.DataColumn
        
        Private columnRESERVE_CODE As Global.System.Data.DataColumn
        
        Private columnRESERVE_MACHI As Global.System.Data.DataColumn
        
        Private columnM_START_MSG As Global.System.Data.DataColumn
        
        Private columnM_END_MSG As Global.System.Data.DataColumn
        
        Private columnCOMMENT3 As Global.System.Data.DataColumn
        
        Private columnCOMMENT4 As Global.System.Data.DataColumn
        
        Private columnENABLE_FLG As Global.System.Data.DataColumn
        
        Private columnCREATION_DATE1 As Global.System.Data.DataColumn
        
        Private columnSEND_FLG1 As Global.System.Data.DataColumn
        
        Private columnSEND_DATE1 As Global.System.Data.DataColumn
        
        Private columnLAY_NO1 As Global.System.Data.DataColumn
        
        Private columnOPE_NAME As Global.System.Data.DataColumn
        
        Private columnROUTE As Global.System.Data.DataColumn
        
        Private columnOPERATION As Global.System.Data.DataColumn
        
        Private columnOPERATION_CODE As Global.System.Data.DataColumn
        
        Private columnSTD_TIME As Global.System.Data.DataColumn
        
        Private columnCREATION_DATE2 As Global.System.Data.DataColumn
        
        Private columnSEND_DATE2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "WorkData"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DVI_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDVI_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRD_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRD_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IN_DAYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIN_DAY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_DAYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_DAY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPE_SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPE_SEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRD_PIECEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRD_PIECE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INP_PIECEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINP_PIECE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUT_PIECEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUT_PIECE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REAL_DAYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREAL_DAY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BATCH_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BATCH_SUBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_SUB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MATER_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMATER_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MATER_SNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMATER_SNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAKERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAKER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Y_LEVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnY_LEVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CYCLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCYCLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BOX_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBOX_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRV_BOX_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRV_BOX_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WAFER_STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWAFER_STATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LMT_STR_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLMT_STR_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WAGON_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWAGON_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REP_OPE_SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREP_OPE_SEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REPEAT_QNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREPEAT_QNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_MASKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_MASK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS2_SAVEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS2_SAVE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REAL_STARTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREAL_START
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRO_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRO_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SISAKU_FLGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSISAKU_FLG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PARENT_LOTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPARENT_LOT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPE_AREAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPE_AREA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPE_CHG_FLGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPE_CHG_FLG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PLT_OPE_SEQ1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLT_OPE_SEQ1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PLT_OPE_SEQ2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLT_OPE_SEQ2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PILOT_QNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPILOT_QNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_QNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_QNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMMENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ROHM_ORDER_MODEL_NAME_OColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROHM_ORDER_MODEL_NAME_O
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDER_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDER_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FT_MODEL_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFT_MODEL_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TP_RANKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTP_RANK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WARI_STOCK_KBNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWARI_STOCK_KBN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WARI_INSTRUCT_KBNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWARI_INSTRUCT_KBN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FORM_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFORM_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GOOD_PIECESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGOOD_PIECES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BAD_PIECESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBAD_PIECES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShipTargetChipCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipTargetChipCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OfficialChipCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOfficialChipCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RestLotInitialChipCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRestLotInitialChipCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RestLotInitialInputMagazineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRestLotInitialInputMagazine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RestLotInitialInputFrameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRestLotInitialInputFrame
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoiceNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoiceNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCCheckDBNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCCheckDBNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCCheckDBPNashiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCCheckDBPNashi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCCheckHajikiPullShaerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCCheckHajikiPullShaer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCCheckWBNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCCheckWBNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCCheckWBInsNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCCheckWBInsNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCCheckOSNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCCheckOSNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCCheckJudgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCCheckJudge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCCheckerPDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCCheckerPD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCCheckerQCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCCheckerQC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCAQIIssueDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCAQIIssueDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCCheckExceptOSNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCCheckExceptOSNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCMainReasonExceptOSNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCMainReasonExceptOSNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCNGChipInExceptOSNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCNGChipInExceptOSNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCNGIncludeExceptOSNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCNGIncludeExceptOSNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCNGJudgeExceptOSNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCNGJudgeExceptOSNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCNGChipInGoodChipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCNGChipInGoodChip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCNGIncludeGoodChipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCNGIncludeGoodChip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QCNGJudgeGoodChipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQCNGJudgeGoodChip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CREATION_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATION_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEND_FLGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEND_FLG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEND_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEND_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOT_NO1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_NO1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPE_SEQ1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPE_SEQ1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property N_OPE_SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnN_OPE_SEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LAY_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLAY_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_PLAN_DAYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_PLAN_DAY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PLAN_DAYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLAN_DAY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RECIPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property START_MSGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTART_MSG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property END_MSGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEND_MSG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STOP_FLGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTOP_FLG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STOP_REASONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTOP_REASON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STOP_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTOP_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LIMIT_TIME1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIMIT_TIME1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LIMIT_MSG1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIMIT_MSG1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LIMIT_TIME2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIMIT_TIME2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LIMIT_MSG2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIMIT_MSG2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPE_AREA1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPE_AREA1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LIMIT_FLGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIMIT_FLG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATA_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATA_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MASK_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMASK_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RESERVE_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESERVE_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RESERVE_MACHIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESERVE_MACHI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_START_MSGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_START_MSG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_END_MSGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_END_MSG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMMENT3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENT3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMMENT4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENT4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ENABLE_FLGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENABLE_FLG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CREATION_DATE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATION_DATE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEND_FLG1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEND_FLG1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEND_DATE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEND_DATE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LAY_NO1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLAY_NO1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPE_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPE_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ROUTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROUTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPERATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPERATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPERATION_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPERATION_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STD_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTD_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CREATION_DATE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATION_DATE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEND_DATE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEND_DATE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As WorkDataRow
            Get
                Return CType(Me.Rows(index),WorkDataRow)
            End Get
        End Property
        
        Public Event WorkDataRowChanging As WorkDataRowChangeEventHandler
        
        Public Event WorkDataRowChanged As WorkDataRowChangeEventHandler
        
        Public Event WorkDataRowDeleting As WorkDataRowChangeEventHandler
        
        Public Event WorkDataRowDeleted As WorkDataRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddWorkDataRow(ByVal row As WorkDataRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddWorkDataRow( _
                    ByVal LOT_NO As String,  _
                    ByVal DVI_NO As Integer,  _
                    ByVal PRD_NAME As String,  _
                    ByVal IN_DAY As String,  _
                    ByVal OUT_DAY As String,  _
                    ByVal OPE_SEQ As Short,  _
                    ByVal PRD_PIECE As Integer,  _
                    ByVal INP_PIECE As Integer,  _
                    ByVal OUT_PIECE As Integer,  _
                    ByVal REAL_DAY As Date,  _
                    ByVal BATCH_NO As String,  _
                    ByVal BATCH_SUB As String,  _
                    ByVal MATER_NAME As String,  _
                    ByVal MATER_SNAME As String,  _
                    ByVal MAKER As String,  _
                    ByVal Y_LEVEL As String,  _
                    ByVal STATUS1 As String,  _
                    ByVal STATUS2 As String,  _
                    ByVal CYCLE As Short,  _
                    ByVal BOX_NO As String,  _
                    ByVal PRV_BOX_NO As String,  _
                    ByVal WAFER_STATUS As String,  _
                    ByVal LMT_STR_TIME As Date,  _
                    ByVal WAGON_NO As String,  _
                    ByVal REP_OPE_SEQ As Short,  _
                    ByVal REPEAT_QNT As Short,  _
                    ByVal TOTAL_MASK As String,  _
                    ByVal STATUS2_SAVE As String,  _
                    ByVal REAL_START As Date,  _
                    ByVal TRO_TIME As Date,  _
                    ByVal SISAKU_FLG As String,  _
                    ByVal PARENT_LOT As String,  _
                    ByVal OPE_AREA As String,  _
                    ByVal OPE_CHG_FLG As String,  _
                    ByVal PLT_OPE_SEQ1 As Short,  _
                    ByVal PLT_OPE_SEQ2 As Short,  _
                    ByVal PILOT_QNT As Short,  _
                    ByVal TOTAL_QNT As Short,  _
                    ByVal COMMENT As String,  _
                    ByVal ROHM_ORDER_MODEL_NAME_O As String,  _
                    ByVal ORDER_NO As String,  _
                    ByVal FT_MODEL_NAME As String,  _
                    ByVal TP_RANK As String,  _
                    ByVal WARI_STOCK_KBN As Short,  _
                    ByVal WARI_INSTRUCT_KBN As Short,  _
                    ByVal FORM_NAME As String,  _
                    ByVal GOOD_PIECES As Integer,  _
                    ByVal BAD_PIECES As Integer,  _
                    ByVal ShipTargetChipCount As Integer,  _
                    ByVal OfficialChipCount As Integer,  _
                    ByVal RestLotInitialChipCount As Integer,  _
                    ByVal RestLotInitialInputMagazine As Short,  _
                    ByVal RestLotInitialInputFrame As Short,  _
                    ByVal Section As String,  _
                    ByVal InvoiceNo As String,  _
                    ByVal QCCheckDBNG As Integer,  _
                    ByVal QCCheckDBPNashi As Integer,  _
                    ByVal QCCheckHajikiPullShaer As Integer,  _
                    ByVal QCCheckWBNG As Integer,  _
                    ByVal QCCheckWBInsNG As Integer,  _
                    ByVal QCCheckOSNG As Integer,  _
                    ByVal QCCheckJudge As Short,  _
                    ByVal QCCheckerPD As String,  _
                    ByVal QCCheckerQC As String,  _
                    ByVal QCAQIIssueDate As Date,  _
                    ByVal QCCheckExceptOSNG As Integer,  _
                    ByVal QCMainReasonExceptOSNG As String,  _
                    ByVal QCNGChipInExceptOSNG As Integer,  _
                    ByVal QCNGIncludeExceptOSNG As Short,  _
                    ByVal QCNGJudgeExceptOSNG As Short,  _
                    ByVal QCNGChipInGoodChip As Integer,  _
                    ByVal QCNGIncludeGoodChip As Short,  _
                    ByVal QCNGJudgeGoodChip As Short,  _
                    ByVal CREATION_DATE As Date,  _
                    ByVal SEND_FLG As String,  _
                    ByVal SEND_DATE As Date,  _
                    ByVal LOT_NO1 As String,  _
                    ByVal OPE_SEQ1 As Short,  _
                    ByVal N_OPE_SEQ As Short,  _
                    ByVal LAY_NO As String,  _
                    ByVal B_PLAN_DAY As Date,  _
                    ByVal PLAN_DAY As Date,  _
                    ByVal RECIPE As String,  _
                    ByVal START_MSG As String,  _
                    ByVal END_MSG As String,  _
                    ByVal STOP_FLG As String,  _
                    ByVal STOP_REASON As String,  _
                    ByVal STOP_NAME As String,  _
                    ByVal LIMIT_TIME1 As Integer,  _
                    ByVal LIMIT_MSG1 As String,  _
                    ByVal LIMIT_TIME2 As Integer,  _
                    ByVal LIMIT_MSG2 As String,  _
                    ByVal OPE_AREA1 As String,  _
                    ByVal LIMIT_FLG As String,  _
                    ByVal DATA_NO As Integer,  _
                    ByVal MASK_NAME As String,  _
                    ByVal RESERVE_CODE As String,  _
                    ByVal RESERVE_MACHI As String,  _
                    ByVal M_START_MSG As String,  _
                    ByVal M_END_MSG As String,  _
                    ByVal COMMENT3 As String,  _
                    ByVal COMMENT4 As String,  _
                    ByVal ENABLE_FLG As Short,  _
                    ByVal CREATION_DATE1 As Date,  _
                    ByVal SEND_FLG1 As String,  _
                    ByVal SEND_DATE1 As Date,  _
                    ByVal LAY_NO1 As String,  _
                    ByVal OPE_NAME As String,  _
                    ByVal ROUTE As String,  _
                    ByVal OPERATION As String,  _
                    ByVal OPERATION_CODE As String,  _
                    ByVal STD_TIME As Integer,  _
                    ByVal CREATION_DATE2 As Date,  _
                    ByVal SEND_DATE2 As Date) As WorkDataRow
            Dim rowWorkDataRow As WorkDataRow = CType(Me.NewRow,WorkDataRow)
            Dim columnValuesArray() As Object = New Object() {LOT_NO, DVI_NO, PRD_NAME, IN_DAY, OUT_DAY, OPE_SEQ, PRD_PIECE, INP_PIECE, OUT_PIECE, REAL_DAY, BATCH_NO, BATCH_SUB, MATER_NAME, MATER_SNAME, MAKER, Y_LEVEL, STATUS1, STATUS2, CYCLE, BOX_NO, PRV_BOX_NO, WAFER_STATUS, LMT_STR_TIME, WAGON_NO, REP_OPE_SEQ, REPEAT_QNT, TOTAL_MASK, STATUS2_SAVE, REAL_START, TRO_TIME, SISAKU_FLG, PARENT_LOT, OPE_AREA, OPE_CHG_FLG, PLT_OPE_SEQ1, PLT_OPE_SEQ2, PILOT_QNT, TOTAL_QNT, COMMENT, ROHM_ORDER_MODEL_NAME_O, ORDER_NO, FT_MODEL_NAME, TP_RANK, WARI_STOCK_KBN, WARI_INSTRUCT_KBN, FORM_NAME, GOOD_PIECES, BAD_PIECES, ShipTargetChipCount, OfficialChipCount, RestLotInitialChipCount, RestLotInitialInputMagazine, RestLotInitialInputFrame, Section, InvoiceNo, QCCheckDBNG, QCCheckDBPNashi, QCCheckHajikiPullShaer, QCCheckWBNG, QCCheckWBInsNG, QCCheckOSNG, QCCheckJudge, QCCheckerPD, QCCheckerQC, QCAQIIssueDate, QCCheckExceptOSNG, QCMainReasonExceptOSNG, QCNGChipInExceptOSNG, QCNGIncludeExceptOSNG, QCNGJudgeExceptOSNG, QCNGChipInGoodChip, QCNGIncludeGoodChip, QCNGJudgeGoodChip, CREATION_DATE, SEND_FLG, SEND_DATE, LOT_NO1, OPE_SEQ1, N_OPE_SEQ, LAY_NO, B_PLAN_DAY, PLAN_DAY, RECIPE, START_MSG, END_MSG, STOP_FLG, STOP_REASON, STOP_NAME, LIMIT_TIME1, LIMIT_MSG1, LIMIT_TIME2, LIMIT_MSG2, OPE_AREA1, LIMIT_FLG, DATA_NO, MASK_NAME, RESERVE_CODE, RESERVE_MACHI, M_START_MSG, M_END_MSG, COMMENT3, COMMENT4, ENABLE_FLG, CREATION_DATE1, SEND_FLG1, SEND_DATE1, LAY_NO1, OPE_NAME, ROUTE, OPERATION, OPERATION_CODE, STD_TIME, CREATION_DATE2, SEND_DATE2}
            rowWorkDataRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowWorkDataRow)
            Return rowWorkDataRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByLOT_NOLOT_NO1OPE_SEQ1LAY_NO1(ByVal LOT_NO As String, ByVal LOT_NO1 As String, ByVal OPE_SEQ1 As Short, ByVal LAY_NO1 As String) As WorkDataRow
            Return CType(Me.Rows.Find(New Object() {LOT_NO, LOT_NO1, OPE_SEQ1, LAY_NO1}),WorkDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As WorkDataDataTable = CType(MyBase.Clone,WorkDataDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New WorkDataDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLOT_NO = MyBase.Columns("LOT_NO")
            Me.columnDVI_NO = MyBase.Columns("DVI_NO")
            Me.columnPRD_NAME = MyBase.Columns("PRD_NAME")
            Me.columnIN_DAY = MyBase.Columns("IN_DAY")
            Me.columnOUT_DAY = MyBase.Columns("OUT_DAY")
            Me.columnOPE_SEQ = MyBase.Columns("OPE_SEQ")
            Me.columnPRD_PIECE = MyBase.Columns("PRD_PIECE")
            Me.columnINP_PIECE = MyBase.Columns("INP_PIECE")
            Me.columnOUT_PIECE = MyBase.Columns("OUT_PIECE")
            Me.columnREAL_DAY = MyBase.Columns("REAL_DAY")
            Me.columnBATCH_NO = MyBase.Columns("BATCH_NO")
            Me.columnBATCH_SUB = MyBase.Columns("BATCH_SUB")
            Me.columnMATER_NAME = MyBase.Columns("MATER_NAME")
            Me.columnMATER_SNAME = MyBase.Columns("MATER_SNAME")
            Me.columnMAKER = MyBase.Columns("MAKER")
            Me.columnY_LEVEL = MyBase.Columns("Y_LEVEL")
            Me.columnSTATUS1 = MyBase.Columns("STATUS1")
            Me.columnSTATUS2 = MyBase.Columns("STATUS2")
            Me.columnCYCLE = MyBase.Columns("CYCLE")
            Me.columnBOX_NO = MyBase.Columns("BOX_NO")
            Me.columnPRV_BOX_NO = MyBase.Columns("PRV_BOX_NO")
            Me.columnWAFER_STATUS = MyBase.Columns("WAFER_STATUS")
            Me.columnLMT_STR_TIME = MyBase.Columns("LMT_STR_TIME")
            Me.columnWAGON_NO = MyBase.Columns("WAGON_NO")
            Me.columnREP_OPE_SEQ = MyBase.Columns("REP_OPE_SEQ")
            Me.columnREPEAT_QNT = MyBase.Columns("REPEAT_QNT")
            Me.columnTOTAL_MASK = MyBase.Columns("TOTAL_MASK")
            Me.columnSTATUS2_SAVE = MyBase.Columns("STATUS2_SAVE")
            Me.columnREAL_START = MyBase.Columns("REAL_START")
            Me.columnTRO_TIME = MyBase.Columns("TRO_TIME")
            Me.columnSISAKU_FLG = MyBase.Columns("SISAKU_FLG")
            Me.columnPARENT_LOT = MyBase.Columns("PARENT_LOT")
            Me.columnOPE_AREA = MyBase.Columns("OPE_AREA")
            Me.columnOPE_CHG_FLG = MyBase.Columns("OPE_CHG_FLG")
            Me.columnPLT_OPE_SEQ1 = MyBase.Columns("PLT_OPE_SEQ1")
            Me.columnPLT_OPE_SEQ2 = MyBase.Columns("PLT_OPE_SEQ2")
            Me.columnPILOT_QNT = MyBase.Columns("PILOT_QNT")
            Me.columnTOTAL_QNT = MyBase.Columns("TOTAL_QNT")
            Me.columnCOMMENT = MyBase.Columns("COMMENT")
            Me.columnROHM_ORDER_MODEL_NAME_O = MyBase.Columns("ROHM_ORDER_MODEL_NAME_O")
            Me.columnORDER_NO = MyBase.Columns("ORDER_NO")
            Me.columnFT_MODEL_NAME = MyBase.Columns("FT_MODEL_NAME")
            Me.columnTP_RANK = MyBase.Columns("TP_RANK")
            Me.columnWARI_STOCK_KBN = MyBase.Columns("WARI_STOCK_KBN")
            Me.columnWARI_INSTRUCT_KBN = MyBase.Columns("WARI_INSTRUCT_KBN")
            Me.columnFORM_NAME = MyBase.Columns("FORM_NAME")
            Me.columnGOOD_PIECES = MyBase.Columns("GOOD_PIECES")
            Me.columnBAD_PIECES = MyBase.Columns("BAD_PIECES")
            Me.columnShipTargetChipCount = MyBase.Columns("ShipTargetChipCount")
            Me.columnOfficialChipCount = MyBase.Columns("OfficialChipCount")
            Me.columnRestLotInitialChipCount = MyBase.Columns("RestLotInitialChipCount")
            Me.columnRestLotInitialInputMagazine = MyBase.Columns("RestLotInitialInputMagazine")
            Me.columnRestLotInitialInputFrame = MyBase.Columns("RestLotInitialInputFrame")
            Me.columnSection = MyBase.Columns("Section")
            Me.columnInvoiceNo = MyBase.Columns("InvoiceNo")
            Me.columnQCCheckDBNG = MyBase.Columns("QCCheckDBNG")
            Me.columnQCCheckDBPNashi = MyBase.Columns("QCCheckDBPNashi")
            Me.columnQCCheckHajikiPullShaer = MyBase.Columns("QCCheckHajikiPullShaer")
            Me.columnQCCheckWBNG = MyBase.Columns("QCCheckWBNG")
            Me.columnQCCheckWBInsNG = MyBase.Columns("QCCheckWBInsNG")
            Me.columnQCCheckOSNG = MyBase.Columns("QCCheckOSNG")
            Me.columnQCCheckJudge = MyBase.Columns("QCCheckJudge")
            Me.columnQCCheckerPD = MyBase.Columns("QCCheckerPD")
            Me.columnQCCheckerQC = MyBase.Columns("QCCheckerQC")
            Me.columnQCAQIIssueDate = MyBase.Columns("QCAQIIssueDate")
            Me.columnQCCheckExceptOSNG = MyBase.Columns("QCCheckExceptOSNG")
            Me.columnQCMainReasonExceptOSNG = MyBase.Columns("QCMainReasonExceptOSNG")
            Me.columnQCNGChipInExceptOSNG = MyBase.Columns("QCNGChipInExceptOSNG")
            Me.columnQCNGIncludeExceptOSNG = MyBase.Columns("QCNGIncludeExceptOSNG")
            Me.columnQCNGJudgeExceptOSNG = MyBase.Columns("QCNGJudgeExceptOSNG")
            Me.columnQCNGChipInGoodChip = MyBase.Columns("QCNGChipInGoodChip")
            Me.columnQCNGIncludeGoodChip = MyBase.Columns("QCNGIncludeGoodChip")
            Me.columnQCNGJudgeGoodChip = MyBase.Columns("QCNGJudgeGoodChip")
            Me.columnCREATION_DATE = MyBase.Columns("CREATION_DATE")
            Me.columnSEND_FLG = MyBase.Columns("SEND_FLG")
            Me.columnSEND_DATE = MyBase.Columns("SEND_DATE")
            Me.columnLOT_NO1 = MyBase.Columns("LOT_NO1")
            Me.columnOPE_SEQ1 = MyBase.Columns("OPE_SEQ1")
            Me.columnN_OPE_SEQ = MyBase.Columns("N_OPE_SEQ")
            Me.columnLAY_NO = MyBase.Columns("LAY_NO")
            Me.columnB_PLAN_DAY = MyBase.Columns("B_PLAN_DAY")
            Me.columnPLAN_DAY = MyBase.Columns("PLAN_DAY")
            Me.columnRECIPE = MyBase.Columns("RECIPE")
            Me.columnSTART_MSG = MyBase.Columns("START_MSG")
            Me.columnEND_MSG = MyBase.Columns("END_MSG")
            Me.columnSTOP_FLG = MyBase.Columns("STOP_FLG")
            Me.columnSTOP_REASON = MyBase.Columns("STOP_REASON")
            Me.columnSTOP_NAME = MyBase.Columns("STOP_NAME")
            Me.columnLIMIT_TIME1 = MyBase.Columns("LIMIT_TIME1")
            Me.columnLIMIT_MSG1 = MyBase.Columns("LIMIT_MSG1")
            Me.columnLIMIT_TIME2 = MyBase.Columns("LIMIT_TIME2")
            Me.columnLIMIT_MSG2 = MyBase.Columns("LIMIT_MSG2")
            Me.columnOPE_AREA1 = MyBase.Columns("OPE_AREA1")
            Me.columnLIMIT_FLG = MyBase.Columns("LIMIT_FLG")
            Me.columnDATA_NO = MyBase.Columns("DATA_NO")
            Me.columnMASK_NAME = MyBase.Columns("MASK_NAME")
            Me.columnRESERVE_CODE = MyBase.Columns("RESERVE_CODE")
            Me.columnRESERVE_MACHI = MyBase.Columns("RESERVE_MACHI")
            Me.columnM_START_MSG = MyBase.Columns("M_START_MSG")
            Me.columnM_END_MSG = MyBase.Columns("M_END_MSG")
            Me.columnCOMMENT3 = MyBase.Columns("COMMENT3")
            Me.columnCOMMENT4 = MyBase.Columns("COMMENT4")
            Me.columnENABLE_FLG = MyBase.Columns("ENABLE_FLG")
            Me.columnCREATION_DATE1 = MyBase.Columns("CREATION_DATE1")
            Me.columnSEND_FLG1 = MyBase.Columns("SEND_FLG1")
            Me.columnSEND_DATE1 = MyBase.Columns("SEND_DATE1")
            Me.columnLAY_NO1 = MyBase.Columns("LAY_NO1")
            Me.columnOPE_NAME = MyBase.Columns("OPE_NAME")
            Me.columnROUTE = MyBase.Columns("ROUTE")
            Me.columnOPERATION = MyBase.Columns("OPERATION")
            Me.columnOPERATION_CODE = MyBase.Columns("OPERATION_CODE")
            Me.columnSTD_TIME = MyBase.Columns("STD_TIME")
            Me.columnCREATION_DATE2 = MyBase.Columns("CREATION_DATE2")
            Me.columnSEND_DATE2 = MyBase.Columns("SEND_DATE2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLOT_NO = New Global.System.Data.DataColumn("LOT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_NO)
            Me.columnDVI_NO = New Global.System.Data.DataColumn("DVI_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDVI_NO)
            Me.columnPRD_NAME = New Global.System.Data.DataColumn("PRD_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRD_NAME)
            Me.columnIN_DAY = New Global.System.Data.DataColumn("IN_DAY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIN_DAY)
            Me.columnOUT_DAY = New Global.System.Data.DataColumn("OUT_DAY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_DAY)
            Me.columnOPE_SEQ = New Global.System.Data.DataColumn("OPE_SEQ", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPE_SEQ)
            Me.columnPRD_PIECE = New Global.System.Data.DataColumn("PRD_PIECE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRD_PIECE)
            Me.columnINP_PIECE = New Global.System.Data.DataColumn("INP_PIECE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINP_PIECE)
            Me.columnOUT_PIECE = New Global.System.Data.DataColumn("OUT_PIECE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUT_PIECE)
            Me.columnREAL_DAY = New Global.System.Data.DataColumn("REAL_DAY", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREAL_DAY)
            Me.columnBATCH_NO = New Global.System.Data.DataColumn("BATCH_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_NO)
            Me.columnBATCH_SUB = New Global.System.Data.DataColumn("BATCH_SUB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_SUB)
            Me.columnMATER_NAME = New Global.System.Data.DataColumn("MATER_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMATER_NAME)
            Me.columnMATER_SNAME = New Global.System.Data.DataColumn("MATER_SNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMATER_SNAME)
            Me.columnMAKER = New Global.System.Data.DataColumn("MAKER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAKER)
            Me.columnY_LEVEL = New Global.System.Data.DataColumn("Y_LEVEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnY_LEVEL)
            Me.columnSTATUS1 = New Global.System.Data.DataColumn("STATUS1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS1)
            Me.columnSTATUS2 = New Global.System.Data.DataColumn("STATUS2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS2)
            Me.columnCYCLE = New Global.System.Data.DataColumn("CYCLE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCYCLE)
            Me.columnBOX_NO = New Global.System.Data.DataColumn("BOX_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBOX_NO)
            Me.columnPRV_BOX_NO = New Global.System.Data.DataColumn("PRV_BOX_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRV_BOX_NO)
            Me.columnWAFER_STATUS = New Global.System.Data.DataColumn("WAFER_STATUS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWAFER_STATUS)
            Me.columnLMT_STR_TIME = New Global.System.Data.DataColumn("LMT_STR_TIME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLMT_STR_TIME)
            Me.columnWAGON_NO = New Global.System.Data.DataColumn("WAGON_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWAGON_NO)
            Me.columnREP_OPE_SEQ = New Global.System.Data.DataColumn("REP_OPE_SEQ", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREP_OPE_SEQ)
            Me.columnREPEAT_QNT = New Global.System.Data.DataColumn("REPEAT_QNT", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREPEAT_QNT)
            Me.columnTOTAL_MASK = New Global.System.Data.DataColumn("TOTAL_MASK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_MASK)
            Me.columnSTATUS2_SAVE = New Global.System.Data.DataColumn("STATUS2_SAVE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS2_SAVE)
            Me.columnREAL_START = New Global.System.Data.DataColumn("REAL_START", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREAL_START)
            Me.columnTRO_TIME = New Global.System.Data.DataColumn("TRO_TIME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRO_TIME)
            Me.columnSISAKU_FLG = New Global.System.Data.DataColumn("SISAKU_FLG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSISAKU_FLG)
            Me.columnPARENT_LOT = New Global.System.Data.DataColumn("PARENT_LOT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPARENT_LOT)
            Me.columnOPE_AREA = New Global.System.Data.DataColumn("OPE_AREA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPE_AREA)
            Me.columnOPE_CHG_FLG = New Global.System.Data.DataColumn("OPE_CHG_FLG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPE_CHG_FLG)
            Me.columnPLT_OPE_SEQ1 = New Global.System.Data.DataColumn("PLT_OPE_SEQ1", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLT_OPE_SEQ1)
            Me.columnPLT_OPE_SEQ2 = New Global.System.Data.DataColumn("PLT_OPE_SEQ2", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLT_OPE_SEQ2)
            Me.columnPILOT_QNT = New Global.System.Data.DataColumn("PILOT_QNT", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPILOT_QNT)
            Me.columnTOTAL_QNT = New Global.System.Data.DataColumn("TOTAL_QNT", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_QNT)
            Me.columnCOMMENT = New Global.System.Data.DataColumn("COMMENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENT)
            Me.columnROHM_ORDER_MODEL_NAME_O = New Global.System.Data.DataColumn("ROHM_ORDER_MODEL_NAME_O", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROHM_ORDER_MODEL_NAME_O)
            Me.columnORDER_NO = New Global.System.Data.DataColumn("ORDER_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDER_NO)
            Me.columnFT_MODEL_NAME = New Global.System.Data.DataColumn("FT_MODEL_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFT_MODEL_NAME)
            Me.columnTP_RANK = New Global.System.Data.DataColumn("TP_RANK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTP_RANK)
            Me.columnWARI_STOCK_KBN = New Global.System.Data.DataColumn("WARI_STOCK_KBN", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWARI_STOCK_KBN)
            Me.columnWARI_INSTRUCT_KBN = New Global.System.Data.DataColumn("WARI_INSTRUCT_KBN", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWARI_INSTRUCT_KBN)
            Me.columnFORM_NAME = New Global.System.Data.DataColumn("FORM_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFORM_NAME)
            Me.columnGOOD_PIECES = New Global.System.Data.DataColumn("GOOD_PIECES", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGOOD_PIECES)
            Me.columnBAD_PIECES = New Global.System.Data.DataColumn("BAD_PIECES", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBAD_PIECES)
            Me.columnShipTargetChipCount = New Global.System.Data.DataColumn("ShipTargetChipCount", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipTargetChipCount)
            Me.columnOfficialChipCount = New Global.System.Data.DataColumn("OfficialChipCount", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOfficialChipCount)
            Me.columnRestLotInitialChipCount = New Global.System.Data.DataColumn("RestLotInitialChipCount", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRestLotInitialChipCount)
            Me.columnRestLotInitialInputMagazine = New Global.System.Data.DataColumn("RestLotInitialInputMagazine", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRestLotInitialInputMagazine)
            Me.columnRestLotInitialInputFrame = New Global.System.Data.DataColumn("RestLotInitialInputFrame", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRestLotInitialInputFrame)
            Me.columnSection = New Global.System.Data.DataColumn("Section", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSection)
            Me.columnInvoiceNo = New Global.System.Data.DataColumn("InvoiceNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoiceNo)
            Me.columnQCCheckDBNG = New Global.System.Data.DataColumn("QCCheckDBNG", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCCheckDBNG)
            Me.columnQCCheckDBPNashi = New Global.System.Data.DataColumn("QCCheckDBPNashi", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCCheckDBPNashi)
            Me.columnQCCheckHajikiPullShaer = New Global.System.Data.DataColumn("QCCheckHajikiPullShaer", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCCheckHajikiPullShaer)
            Me.columnQCCheckWBNG = New Global.System.Data.DataColumn("QCCheckWBNG", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCCheckWBNG)
            Me.columnQCCheckWBInsNG = New Global.System.Data.DataColumn("QCCheckWBInsNG", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCCheckWBInsNG)
            Me.columnQCCheckOSNG = New Global.System.Data.DataColumn("QCCheckOSNG", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCCheckOSNG)
            Me.columnQCCheckJudge = New Global.System.Data.DataColumn("QCCheckJudge", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCCheckJudge)
            Me.columnQCCheckerPD = New Global.System.Data.DataColumn("QCCheckerPD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCCheckerPD)
            Me.columnQCCheckerQC = New Global.System.Data.DataColumn("QCCheckerQC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCCheckerQC)
            Me.columnQCAQIIssueDate = New Global.System.Data.DataColumn("QCAQIIssueDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCAQIIssueDate)
            Me.columnQCCheckExceptOSNG = New Global.System.Data.DataColumn("QCCheckExceptOSNG", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCCheckExceptOSNG)
            Me.columnQCMainReasonExceptOSNG = New Global.System.Data.DataColumn("QCMainReasonExceptOSNG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCMainReasonExceptOSNG)
            Me.columnQCNGChipInExceptOSNG = New Global.System.Data.DataColumn("QCNGChipInExceptOSNG", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCNGChipInExceptOSNG)
            Me.columnQCNGIncludeExceptOSNG = New Global.System.Data.DataColumn("QCNGIncludeExceptOSNG", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCNGIncludeExceptOSNG)
            Me.columnQCNGJudgeExceptOSNG = New Global.System.Data.DataColumn("QCNGJudgeExceptOSNG", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCNGJudgeExceptOSNG)
            Me.columnQCNGChipInGoodChip = New Global.System.Data.DataColumn("QCNGChipInGoodChip", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCNGChipInGoodChip)
            Me.columnQCNGIncludeGoodChip = New Global.System.Data.DataColumn("QCNGIncludeGoodChip", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCNGIncludeGoodChip)
            Me.columnQCNGJudgeGoodChip = New Global.System.Data.DataColumn("QCNGJudgeGoodChip", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQCNGJudgeGoodChip)
            Me.columnCREATION_DATE = New Global.System.Data.DataColumn("CREATION_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATION_DATE)
            Me.columnSEND_FLG = New Global.System.Data.DataColumn("SEND_FLG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEND_FLG)
            Me.columnSEND_DATE = New Global.System.Data.DataColumn("SEND_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEND_DATE)
            Me.columnLOT_NO1 = New Global.System.Data.DataColumn("LOT_NO1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_NO1)
            Me.columnOPE_SEQ1 = New Global.System.Data.DataColumn("OPE_SEQ1", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPE_SEQ1)
            Me.columnN_OPE_SEQ = New Global.System.Data.DataColumn("N_OPE_SEQ", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnN_OPE_SEQ)
            Me.columnLAY_NO = New Global.System.Data.DataColumn("LAY_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLAY_NO)
            Me.columnB_PLAN_DAY = New Global.System.Data.DataColumn("B_PLAN_DAY", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_PLAN_DAY)
            Me.columnPLAN_DAY = New Global.System.Data.DataColumn("PLAN_DAY", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLAN_DAY)
            Me.columnRECIPE = New Global.System.Data.DataColumn("RECIPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE)
            Me.columnSTART_MSG = New Global.System.Data.DataColumn("START_MSG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTART_MSG)
            Me.columnEND_MSG = New Global.System.Data.DataColumn("END_MSG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEND_MSG)
            Me.columnSTOP_FLG = New Global.System.Data.DataColumn("STOP_FLG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTOP_FLG)
            Me.columnSTOP_REASON = New Global.System.Data.DataColumn("STOP_REASON", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTOP_REASON)
            Me.columnSTOP_NAME = New Global.System.Data.DataColumn("STOP_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTOP_NAME)
            Me.columnLIMIT_TIME1 = New Global.System.Data.DataColumn("LIMIT_TIME1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIMIT_TIME1)
            Me.columnLIMIT_MSG1 = New Global.System.Data.DataColumn("LIMIT_MSG1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIMIT_MSG1)
            Me.columnLIMIT_TIME2 = New Global.System.Data.DataColumn("LIMIT_TIME2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIMIT_TIME2)
            Me.columnLIMIT_MSG2 = New Global.System.Data.DataColumn("LIMIT_MSG2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIMIT_MSG2)
            Me.columnOPE_AREA1 = New Global.System.Data.DataColumn("OPE_AREA1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPE_AREA1)
            Me.columnLIMIT_FLG = New Global.System.Data.DataColumn("LIMIT_FLG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIMIT_FLG)
            Me.columnDATA_NO = New Global.System.Data.DataColumn("DATA_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATA_NO)
            Me.columnMASK_NAME = New Global.System.Data.DataColumn("MASK_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMASK_NAME)
            Me.columnRESERVE_CODE = New Global.System.Data.DataColumn("RESERVE_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESERVE_CODE)
            Me.columnRESERVE_MACHI = New Global.System.Data.DataColumn("RESERVE_MACHI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESERVE_MACHI)
            Me.columnM_START_MSG = New Global.System.Data.DataColumn("M_START_MSG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_START_MSG)
            Me.columnM_END_MSG = New Global.System.Data.DataColumn("M_END_MSG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_END_MSG)
            Me.columnCOMMENT3 = New Global.System.Data.DataColumn("COMMENT3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENT3)
            Me.columnCOMMENT4 = New Global.System.Data.DataColumn("COMMENT4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENT4)
            Me.columnENABLE_FLG = New Global.System.Data.DataColumn("ENABLE_FLG", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENABLE_FLG)
            Me.columnCREATION_DATE1 = New Global.System.Data.DataColumn("CREATION_DATE1", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATION_DATE1)
            Me.columnSEND_FLG1 = New Global.System.Data.DataColumn("SEND_FLG1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEND_FLG1)
            Me.columnSEND_DATE1 = New Global.System.Data.DataColumn("SEND_DATE1", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEND_DATE1)
            Me.columnLAY_NO1 = New Global.System.Data.DataColumn("LAY_NO1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLAY_NO1)
            Me.columnOPE_NAME = New Global.System.Data.DataColumn("OPE_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPE_NAME)
            Me.columnROUTE = New Global.System.Data.DataColumn("ROUTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROUTE)
            Me.columnOPERATION = New Global.System.Data.DataColumn("OPERATION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPERATION)
            Me.columnOPERATION_CODE = New Global.System.Data.DataColumn("OPERATION_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPERATION_CODE)
            Me.columnSTD_TIME = New Global.System.Data.DataColumn("STD_TIME", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTD_TIME)
            Me.columnCREATION_DATE2 = New Global.System.Data.DataColumn("CREATION_DATE2", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATION_DATE2)
            Me.columnSEND_DATE2 = New Global.System.Data.DataColumn("SEND_DATE2", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEND_DATE2)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnLOT_NO, Me.columnLOT_NO1, Me.columnOPE_SEQ1, Me.columnLAY_NO1}, true))
            Me.columnLOT_NO.AllowDBNull = false
            Me.columnLOT_NO.MaxLength = 13
            Me.columnDVI_NO.AllowDBNull = false
            Me.columnPRD_NAME.AllowDBNull = false
            Me.columnPRD_NAME.MaxLength = 25
            Me.columnIN_DAY.AllowDBNull = false
            Me.columnIN_DAY.MaxLength = 8
            Me.columnOUT_DAY.AllowDBNull = false
            Me.columnOUT_DAY.MaxLength = 8
            Me.columnOPE_SEQ.AllowDBNull = false
            Me.columnPRD_PIECE.AllowDBNull = false
            Me.columnINP_PIECE.AllowDBNull = false
            Me.columnOUT_PIECE.AllowDBNull = false
            Me.columnBATCH_NO.MaxLength = 6
            Me.columnBATCH_SUB.MaxLength = 2
            Me.columnMATER_NAME.MaxLength = 25
            Me.columnMATER_SNAME.MaxLength = 15
            Me.columnMAKER.MaxLength = 12
            Me.columnY_LEVEL.AllowDBNull = false
            Me.columnY_LEVEL.MaxLength = 1
            Me.columnSTATUS1.AllowDBNull = false
            Me.columnSTATUS1.MaxLength = 1
            Me.columnSTATUS2.AllowDBNull = false
            Me.columnSTATUS2.MaxLength = 1
            Me.columnCYCLE.AllowDBNull = false
            Me.columnBOX_NO.MaxLength = 6
            Me.columnPRV_BOX_NO.MaxLength = 6
            Me.columnWAFER_STATUS.MaxLength = 25
            Me.columnWAGON_NO.MaxLength = 5
            Me.columnREP_OPE_SEQ.AllowDBNull = false
            Me.columnREPEAT_QNT.AllowDBNull = false
            Me.columnTOTAL_MASK.MaxLength = 10
            Me.columnSTATUS2_SAVE.MaxLength = 1
            Me.columnSISAKU_FLG.AllowDBNull = false
            Me.columnSISAKU_FLG.MaxLength = 1
            Me.columnPARENT_LOT.MaxLength = 13
            Me.columnOPE_AREA.MaxLength = 15
            Me.columnOPE_CHG_FLG.MaxLength = 1
            Me.columnCOMMENT.MaxLength = 100
            Me.columnROHM_ORDER_MODEL_NAME_O.MaxLength = 20
            Me.columnORDER_NO.MaxLength = 12
            Me.columnFT_MODEL_NAME.MaxLength = 20
            Me.columnTP_RANK.MaxLength = 20
            Me.columnFORM_NAME.MaxLength = 20
            Me.columnGOOD_PIECES.AllowDBNull = false
            Me.columnBAD_PIECES.AllowDBNull = false
            Me.columnSection.MaxLength = 6
            Me.columnInvoiceNo.MaxLength = 20
            Me.columnQCCheckerPD.MaxLength = 10
            Me.columnQCCheckerQC.MaxLength = 10
            Me.columnQCMainReasonExceptOSNG.MaxLength = 20
            Me.columnSEND_FLG.MaxLength = 1
            Me.columnLOT_NO1.AllowDBNull = false
            Me.columnLOT_NO1.MaxLength = 13
            Me.columnOPE_SEQ1.AllowDBNull = false
            Me.columnN_OPE_SEQ.AllowDBNull = false
            Me.columnLAY_NO.AllowDBNull = false
            Me.columnLAY_NO.MaxLength = 52
            Me.columnRECIPE.MaxLength = 50
            Me.columnSTART_MSG.MaxLength = 256
            Me.columnEND_MSG.MaxLength = 256
            Me.columnSTOP_FLG.AllowDBNull = false
            Me.columnSTOP_FLG.MaxLength = 1
            Me.columnSTOP_REASON.MaxLength = 15
            Me.columnSTOP_NAME.MaxLength = 8
            Me.columnLIMIT_TIME1.AllowDBNull = false
            Me.columnLIMIT_MSG1.MaxLength = 30
            Me.columnLIMIT_TIME2.AllowDBNull = false
            Me.columnLIMIT_MSG2.MaxLength = 30
            Me.columnOPE_AREA1.MaxLength = 15
            Me.columnLIMIT_FLG.AllowDBNull = false
            Me.columnLIMIT_FLG.MaxLength = 1
            Me.columnDATA_NO.AllowDBNull = false
            Me.columnMASK_NAME.MaxLength = 10
            Me.columnRESERVE_CODE.MaxLength = 10
            Me.columnRESERVE_MACHI.MaxLength = 10
            Me.columnM_START_MSG.MaxLength = 256
            Me.columnM_END_MSG.MaxLength = 256
            Me.columnCOMMENT3.MaxLength = 512
            Me.columnCOMMENT4.MaxLength = 256
            Me.columnSEND_FLG1.MaxLength = 1
            Me.columnLAY_NO1.AllowDBNull = false
            Me.columnLAY_NO1.MaxLength = 52
            Me.columnOPE_NAME.MaxLength = 28
            Me.columnROUTE.MaxLength = 12
            Me.columnOPERATION.MaxLength = 10
            Me.columnOPERATION_CODE.MaxLength = 6
            Me.columnSTD_TIME.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewWorkDataRow() As WorkDataRow
            Return CType(Me.NewRow,WorkDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New WorkDataRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(WorkDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.WorkDataRowChangedEvent) Is Nothing) Then
                RaiseEvent WorkDataRowChanged(Me, New WorkDataRowChangeEvent(CType(e.Row,WorkDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.WorkDataRowChangingEvent) Is Nothing) Then
                RaiseEvent WorkDataRowChanging(Me, New WorkDataRowChangeEvent(CType(e.Row,WorkDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.WorkDataRowDeletedEvent) Is Nothing) Then
                RaiseEvent WorkDataRowDeleted(Me, New WorkDataRowChangeEvent(CType(e.Row,WorkDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.WorkDataRowDeletingEvent) Is Nothing) Then
                RaiseEvent WorkDataRowDeleting(Me, New WorkDataRowChangeEvent(CType(e.Row,WorkDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveWorkDataRow(ByVal row As WorkDataRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As APCSDBDataSet = New APCSDBDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "WorkDataDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class LOT1_DATARow
        Inherits Global.System.Data.DataRow
        
        Private tableLOT1_DATA As LOT1_DATADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLOT1_DATA = CType(Me.Table,LOT1_DATADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOT_NO() As String
            Get
                Return CType(Me(Me.tableLOT1_DATA.LOT_NOColumn),String)
            End Get
            Set
                Me(Me.tableLOT1_DATA.LOT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPE_SEQ() As Short
            Get
                Return CType(Me(Me.tableLOT1_DATA.OPE_SEQColumn),Short)
            End Get
            Set
                Me(Me.tableLOT1_DATA.OPE_SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property N_OPE_SEQ() As Short
            Get
                Return CType(Me(Me.tableLOT1_DATA.N_OPE_SEQColumn),Short)
            End Get
            Set
                Me(Me.tableLOT1_DATA.N_OPE_SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LAY_NO() As String
            Get
                Return CType(Me(Me.tableLOT1_DATA.LAY_NOColumn),String)
            End Get
            Set
                Me(Me.tableLOT1_DATA.LAY_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_PLAN_DAY() As Date
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_DATA.B_PLAN_DAYColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_PLAN_DAY' in table 'LOT1_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_DATA.B_PLAN_DAYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PLAN_DAY() As Date
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_DATA.PLAN_DAYColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLAN_DAY' in table 'LOT1_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_DATA.PLAN_DAYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RECIPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_DATA.RECIPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE' in table 'LOT1_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_DATA.RECIPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property START_MSG() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_DATA.START_MSGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'START_MSG' in table 'LOT1_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_DATA.START_MSGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property END_MSG() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_DATA.END_MSGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'END_MSG' in table 'LOT1_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_DATA.END_MSGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STOP_FLG() As String
            Get
                Return CType(Me(Me.tableLOT1_DATA.STOP_FLGColumn),String)
            End Get
            Set
                Me(Me.tableLOT1_DATA.STOP_FLGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STOP_REASON() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_DATA.STOP_REASONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STOP_REASON' in table 'LOT1_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_DATA.STOP_REASONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STOP_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_DATA.STOP_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STOP_NAME' in table 'LOT1_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_DATA.STOP_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LIMIT_TIME1() As Integer
            Get
                Return CType(Me(Me.tableLOT1_DATA.LIMIT_TIME1Column),Integer)
            End Get
            Set
                Me(Me.tableLOT1_DATA.LIMIT_TIME1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LIMIT_MSG1() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_DATA.LIMIT_MSG1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LIMIT_MSG1' in table 'LOT1_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_DATA.LIMIT_MSG1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LIMIT_TIME2() As Integer
            Get
                Return CType(Me(Me.tableLOT1_DATA.LIMIT_TIME2Column),Integer)
            End Get
            Set
                Me(Me.tableLOT1_DATA.LIMIT_TIME2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LIMIT_MSG2() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_DATA.LIMIT_MSG2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LIMIT_MSG2' in table 'LOT1_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_DATA.LIMIT_MSG2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPE_AREA() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_DATA.OPE_AREAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPE_AREA' in table 'LOT1_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_DATA.OPE_AREAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LIMIT_FLG() As String
            Get
                Return CType(Me(Me.tableLOT1_DATA.LIMIT_FLGColumn),String)
            End Get
            Set
                Me(Me.tableLOT1_DATA.LIMIT_FLGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATA_NO() As Integer
            Get
                Return CType(Me(Me.tableLOT1_DATA.DATA_NOColumn),Integer)
            End Get
            Set
                Me(Me.tableLOT1_DATA.DATA_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MASK_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_DATA.MASK_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MASK_NAME' in table 'LOT1_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_DATA.MASK_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RESERVE_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_DATA.RESERVE_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RESERVE_CODE' in table 'LOT1_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_DATA.RESERVE_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RESERVE_MACHI() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_DATA.RESERVE_MACHIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RESERVE_MACHI' in table 'LOT1_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_DATA.RESERVE_MACHIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_START_MSG() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_DATA.M_START_MSGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M_START_MSG' in table 'LOT1_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_DATA.M_START_MSGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_END_MSG() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_DATA.M_END_MSGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M_END_MSG' in table 'LOT1_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_DATA.M_END_MSGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMMENT3() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_DATA.COMMENT3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMENT3' in table 'LOT1_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_DATA.COMMENT3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMMENT4() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_DATA.COMMENT4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMENT4' in table 'LOT1_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_DATA.COMMENT4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ENABLE_FLG() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_DATA.ENABLE_FLGColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ENABLE_FLG' in table 'LOT1_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_DATA.ENABLE_FLGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CREATION_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_DATA.CREATION_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATION_DATE' in table 'LOT1_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_DATA.CREATION_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEND_FLG() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_DATA.SEND_FLGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SEND_FLG' in table 'LOT1_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_DATA.SEND_FLGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEND_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_DATA.SEND_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SEND_DATE' in table 'LOT1_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_DATA.SEND_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_PLAN_DAYNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_DATA.B_PLAN_DAYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_PLAN_DAYNull()
            Me(Me.tableLOT1_DATA.B_PLAN_DAYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPLAN_DAYNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_DATA.PLAN_DAYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPLAN_DAYNull()
            Me(Me.tableLOT1_DATA.PLAN_DAYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRECIPENull() As Boolean
            Return Me.IsNull(Me.tableLOT1_DATA.RECIPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRECIPENull()
            Me(Me.tableLOT1_DATA.RECIPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTART_MSGNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_DATA.START_MSGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTART_MSGNull()
            Me(Me.tableLOT1_DATA.START_MSGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEND_MSGNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_DATA.END_MSGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEND_MSGNull()
            Me(Me.tableLOT1_DATA.END_MSGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTOP_REASONNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_DATA.STOP_REASONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTOP_REASONNull()
            Me(Me.tableLOT1_DATA.STOP_REASONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTOP_NAMENull() As Boolean
            Return Me.IsNull(Me.tableLOT1_DATA.STOP_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTOP_NAMENull()
            Me(Me.tableLOT1_DATA.STOP_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLIMIT_MSG1Null() As Boolean
            Return Me.IsNull(Me.tableLOT1_DATA.LIMIT_MSG1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLIMIT_MSG1Null()
            Me(Me.tableLOT1_DATA.LIMIT_MSG1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLIMIT_MSG2Null() As Boolean
            Return Me.IsNull(Me.tableLOT1_DATA.LIMIT_MSG2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLIMIT_MSG2Null()
            Me(Me.tableLOT1_DATA.LIMIT_MSG2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPE_AREANull() As Boolean
            Return Me.IsNull(Me.tableLOT1_DATA.OPE_AREAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPE_AREANull()
            Me(Me.tableLOT1_DATA.OPE_AREAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMASK_NAMENull() As Boolean
            Return Me.IsNull(Me.tableLOT1_DATA.MASK_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMASK_NAMENull()
            Me(Me.tableLOT1_DATA.MASK_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRESERVE_CODENull() As Boolean
            Return Me.IsNull(Me.tableLOT1_DATA.RESERVE_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRESERVE_CODENull()
            Me(Me.tableLOT1_DATA.RESERVE_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRESERVE_MACHINull() As Boolean
            Return Me.IsNull(Me.tableLOT1_DATA.RESERVE_MACHIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRESERVE_MACHINull()
            Me(Me.tableLOT1_DATA.RESERVE_MACHIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_START_MSGNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_DATA.M_START_MSGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_START_MSGNull()
            Me(Me.tableLOT1_DATA.M_START_MSGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_END_MSGNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_DATA.M_END_MSGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_END_MSGNull()
            Me(Me.tableLOT1_DATA.M_END_MSGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOMMENT3Null() As Boolean
            Return Me.IsNull(Me.tableLOT1_DATA.COMMENT3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOMMENT3Null()
            Me(Me.tableLOT1_DATA.COMMENT3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOMMENT4Null() As Boolean
            Return Me.IsNull(Me.tableLOT1_DATA.COMMENT4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOMMENT4Null()
            Me(Me.tableLOT1_DATA.COMMENT4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsENABLE_FLGNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_DATA.ENABLE_FLGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetENABLE_FLGNull()
            Me(Me.tableLOT1_DATA.ENABLE_FLGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCREATION_DATENull() As Boolean
            Return Me.IsNull(Me.tableLOT1_DATA.CREATION_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCREATION_DATENull()
            Me(Me.tableLOT1_DATA.CREATION_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEND_FLGNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_DATA.SEND_FLGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEND_FLGNull()
            Me(Me.tableLOT1_DATA.SEND_FLGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEND_DATENull() As Boolean
            Return Me.IsNull(Me.tableLOT1_DATA.SEND_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEND_DATENull()
            Me(Me.tableLOT1_DATA.SEND_DATEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class LOT1_TABLERow
        Inherits Global.System.Data.DataRow
        
        Private tableLOT1_TABLE As LOT1_TABLEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLOT1_TABLE = CType(Me.Table,LOT1_TABLEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOT_NO() As String
            Get
                Return CType(Me(Me.tableLOT1_TABLE.LOT_NOColumn),String)
            End Get
            Set
                Me(Me.tableLOT1_TABLE.LOT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DVI_NO() As Integer
            Get
                Return CType(Me(Me.tableLOT1_TABLE.DVI_NOColumn),Integer)
            End Get
            Set
                Me(Me.tableLOT1_TABLE.DVI_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRD_NAME() As String
            Get
                Return CType(Me(Me.tableLOT1_TABLE.PRD_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableLOT1_TABLE.PRD_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IN_DAY() As String
            Get
                Return CType(Me(Me.tableLOT1_TABLE.IN_DAYColumn),String)
            End Get
            Set
                Me(Me.tableLOT1_TABLE.IN_DAYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_DAY() As String
            Get
                Return CType(Me(Me.tableLOT1_TABLE.OUT_DAYColumn),String)
            End Get
            Set
                Me(Me.tableLOT1_TABLE.OUT_DAYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPE_SEQ() As Short
            Get
                Return CType(Me(Me.tableLOT1_TABLE.OPE_SEQColumn),Short)
            End Get
            Set
                Me(Me.tableLOT1_TABLE.OPE_SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRD_PIECE() As Integer
            Get
                Return CType(Me(Me.tableLOT1_TABLE.PRD_PIECEColumn),Integer)
            End Get
            Set
                Me(Me.tableLOT1_TABLE.PRD_PIECEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INP_PIECE() As Integer
            Get
                Return CType(Me(Me.tableLOT1_TABLE.INP_PIECEColumn),Integer)
            End Get
            Set
                Me(Me.tableLOT1_TABLE.INP_PIECEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_PIECE() As Integer
            Get
                Return CType(Me(Me.tableLOT1_TABLE.OUT_PIECEColumn),Integer)
            End Get
            Set
                Me(Me.tableLOT1_TABLE.OUT_PIECEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REAL_DAY() As Date
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.REAL_DAYColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REAL_DAY' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.REAL_DAYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BATCH_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.BATCH_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCH_NO' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.BATCH_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BATCH_SUB() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.BATCH_SUBColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCH_SUB' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.BATCH_SUBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MATER_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.MATER_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MATER_NAME' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.MATER_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MATER_SNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.MATER_SNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MATER_SNAME' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.MATER_SNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAKER() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.MAKERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAKER' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.MAKERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Y_LEVEL() As String
            Get
                Return CType(Me(Me.tableLOT1_TABLE.Y_LEVELColumn),String)
            End Get
            Set
                Me(Me.tableLOT1_TABLE.Y_LEVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS1() As String
            Get
                Return CType(Me(Me.tableLOT1_TABLE.STATUS1Column),String)
            End Get
            Set
                Me(Me.tableLOT1_TABLE.STATUS1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS2() As String
            Get
                Return CType(Me(Me.tableLOT1_TABLE.STATUS2Column),String)
            End Get
            Set
                Me(Me.tableLOT1_TABLE.STATUS2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CYCLE() As Short
            Get
                Return CType(Me(Me.tableLOT1_TABLE.CYCLEColumn),Short)
            End Get
            Set
                Me(Me.tableLOT1_TABLE.CYCLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BOX_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.BOX_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BOX_NO' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.BOX_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRV_BOX_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.PRV_BOX_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRV_BOX_NO' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.PRV_BOX_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WAFER_STATUS() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.WAFER_STATUSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WAFER_STATUS' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.WAFER_STATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LMT_STR_TIME() As Date
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.LMT_STR_TIMEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LMT_STR_TIME' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.LMT_STR_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WAGON_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.WAGON_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WAGON_NO' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.WAGON_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REP_OPE_SEQ() As Short
            Get
                Return CType(Me(Me.tableLOT1_TABLE.REP_OPE_SEQColumn),Short)
            End Get
            Set
                Me(Me.tableLOT1_TABLE.REP_OPE_SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REPEAT_QNT() As Short
            Get
                Return CType(Me(Me.tableLOT1_TABLE.REPEAT_QNTColumn),Short)
            End Get
            Set
                Me(Me.tableLOT1_TABLE.REPEAT_QNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_MASK() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.TOTAL_MASKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_MASK' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.TOTAL_MASKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS2_SAVE() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.STATUS2_SAVEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STATUS2_SAVE' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.STATUS2_SAVEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REAL_START() As Date
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.REAL_STARTColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REAL_START' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.REAL_STARTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRO_TIME() As Date
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.TRO_TIMEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRO_TIME' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.TRO_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SISAKU_FLG() As String
            Get
                Return CType(Me(Me.tableLOT1_TABLE.SISAKU_FLGColumn),String)
            End Get
            Set
                Me(Me.tableLOT1_TABLE.SISAKU_FLGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PARENT_LOT() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.PARENT_LOTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PARENT_LOT' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.PARENT_LOTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPE_AREA() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.OPE_AREAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPE_AREA' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.OPE_AREAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPE_CHG_FLG() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.OPE_CHG_FLGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPE_CHG_FLG' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.OPE_CHG_FLGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PLT_OPE_SEQ1() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.PLT_OPE_SEQ1Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLT_OPE_SEQ1' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.PLT_OPE_SEQ1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PLT_OPE_SEQ2() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.PLT_OPE_SEQ2Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLT_OPE_SEQ2' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.PLT_OPE_SEQ2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PILOT_QNT() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.PILOT_QNTColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PILOT_QNT' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.PILOT_QNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_QNT() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.TOTAL_QNTColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_QNT' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.TOTAL_QNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMMENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.COMMENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMENT' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.COMMENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ROHM_ORDER_MODEL_NAME_O() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.ROHM_ORDER_MODEL_NAME_OColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ROHM_ORDER_MODEL_NAME_O' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.ROHM_ORDER_MODEL_NAME_OColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDER_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.ORDER_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDER_NO' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.ORDER_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FT_MODEL_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.FT_MODEL_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FT_MODEL_NAME' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.FT_MODEL_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TP_RANK() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.TP_RANKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TP_RANK' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.TP_RANKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WARI_STOCK_KBN() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.WARI_STOCK_KBNColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WARI_STOCK_KBN' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.WARI_STOCK_KBNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WARI_INSTRUCT_KBN() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.WARI_INSTRUCT_KBNColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WARI_INSTRUCT_KBN' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.WARI_INSTRUCT_KBNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FORM_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.FORM_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FORM_NAME' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.FORM_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GOOD_PIECES() As Integer
            Get
                Return CType(Me(Me.tableLOT1_TABLE.GOOD_PIECESColumn),Integer)
            End Get
            Set
                Me(Me.tableLOT1_TABLE.GOOD_PIECESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BAD_PIECES() As Integer
            Get
                Return CType(Me(Me.tableLOT1_TABLE.BAD_PIECESColumn),Integer)
            End Get
            Set
                Me(Me.tableLOT1_TABLE.BAD_PIECESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShipTargetChipCount() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.ShipTargetChipCountColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShipTargetChipCount' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.ShipTargetChipCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OfficialChipCount() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.OfficialChipCountColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OfficialChipCount' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.OfficialChipCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RestLotInitialChipCount() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.RestLotInitialChipCountColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RestLotInitialChipCount' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.RestLotInitialChipCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RestLotInitialInputMagazine() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.RestLotInitialInputMagazineColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RestLotInitialInputMagazine' in table 'LOT1_TABLE' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.RestLotInitialInputMagazineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RestLotInitialInputFrame() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.RestLotInitialInputFrameColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RestLotInitialInputFrame' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.RestLotInitialInputFrameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Section() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.SectionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Section' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.SectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvoiceNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.InvoiceNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvoiceNo' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.InvoiceNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCCheckDBNG() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.QCCheckDBNGColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCCheckDBNG' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.QCCheckDBNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCCheckDBPNashi() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.QCCheckDBPNashiColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCCheckDBPNashi' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.QCCheckDBPNashiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCCheckHajikiPullShaer() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.QCCheckHajikiPullShaerColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCCheckHajikiPullShaer' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.QCCheckHajikiPullShaerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCCheckWBNG() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.QCCheckWBNGColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCCheckWBNG' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.QCCheckWBNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCCheckWBInsNG() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.QCCheckWBInsNGColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCCheckWBInsNG' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.QCCheckWBInsNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCCheckOSNG() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.QCCheckOSNGColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCCheckOSNG' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.QCCheckOSNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCCheckJudge() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.QCCheckJudgeColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCCheckJudge' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.QCCheckJudgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCCheckerPD() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.QCCheckerPDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCCheckerPD' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.QCCheckerPDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCCheckerQC() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.QCCheckerQCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCCheckerQC' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.QCCheckerQCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCAQIIssueDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.QCAQIIssueDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCAQIIssueDate' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.QCAQIIssueDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCCheckExceptOSNG() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.QCCheckExceptOSNGColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCCheckExceptOSNG' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.QCCheckExceptOSNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCMainReasonExceptOSNG() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.QCMainReasonExceptOSNGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCMainReasonExceptOSNG' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.QCMainReasonExceptOSNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCNGChipInExceptOSNG() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.QCNGChipInExceptOSNGColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCNGChipInExceptOSNG' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.QCNGChipInExceptOSNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCNGIncludeExceptOSNG() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.QCNGIncludeExceptOSNGColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCNGIncludeExceptOSNG' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.QCNGIncludeExceptOSNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCNGJudgeExceptOSNG() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.QCNGJudgeExceptOSNGColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCNGJudgeExceptOSNG' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.QCNGJudgeExceptOSNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCNGChipInGoodChip() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.QCNGChipInGoodChipColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCNGChipInGoodChip' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.QCNGChipInGoodChipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCNGIncludeGoodChip() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.QCNGIncludeGoodChipColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCNGIncludeGoodChip' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.QCNGIncludeGoodChipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCNGJudgeGoodChip() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.QCNGJudgeGoodChipColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCNGJudgeGoodChip' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.QCNGJudgeGoodChipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CREATION_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.CREATION_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATION_DATE' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.CREATION_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEND_FLG() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.SEND_FLGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SEND_FLG' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.SEND_FLGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEND_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableLOT1_TABLE.SEND_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SEND_DATE' in table 'LOT1_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT1_TABLE.SEND_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREAL_DAYNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.REAL_DAYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREAL_DAYNull()
            Me(Me.tableLOT1_TABLE.REAL_DAYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBATCH_NONull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.BATCH_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBATCH_NONull()
            Me(Me.tableLOT1_TABLE.BATCH_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBATCH_SUBNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.BATCH_SUBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBATCH_SUBNull()
            Me(Me.tableLOT1_TABLE.BATCH_SUBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMATER_NAMENull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.MATER_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMATER_NAMENull()
            Me(Me.tableLOT1_TABLE.MATER_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMATER_SNAMENull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.MATER_SNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMATER_SNAMENull()
            Me(Me.tableLOT1_TABLE.MATER_SNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMAKERNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.MAKERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMAKERNull()
            Me(Me.tableLOT1_TABLE.MAKERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBOX_NONull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.BOX_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBOX_NONull()
            Me(Me.tableLOT1_TABLE.BOX_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRV_BOX_NONull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.PRV_BOX_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRV_BOX_NONull()
            Me(Me.tableLOT1_TABLE.PRV_BOX_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWAFER_STATUSNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.WAFER_STATUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWAFER_STATUSNull()
            Me(Me.tableLOT1_TABLE.WAFER_STATUSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLMT_STR_TIMENull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.LMT_STR_TIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLMT_STR_TIMENull()
            Me(Me.tableLOT1_TABLE.LMT_STR_TIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWAGON_NONull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.WAGON_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWAGON_NONull()
            Me(Me.tableLOT1_TABLE.WAGON_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_MASKNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.TOTAL_MASKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_MASKNull()
            Me(Me.tableLOT1_TABLE.TOTAL_MASKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUS2_SAVENull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.STATUS2_SAVEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUS2_SAVENull()
            Me(Me.tableLOT1_TABLE.STATUS2_SAVEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREAL_STARTNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.REAL_STARTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREAL_STARTNull()
            Me(Me.tableLOT1_TABLE.REAL_STARTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRO_TIMENull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.TRO_TIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRO_TIMENull()
            Me(Me.tableLOT1_TABLE.TRO_TIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPARENT_LOTNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.PARENT_LOTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPARENT_LOTNull()
            Me(Me.tableLOT1_TABLE.PARENT_LOTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPE_AREANull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.OPE_AREAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPE_AREANull()
            Me(Me.tableLOT1_TABLE.OPE_AREAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPE_CHG_FLGNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.OPE_CHG_FLGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPE_CHG_FLGNull()
            Me(Me.tableLOT1_TABLE.OPE_CHG_FLGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPLT_OPE_SEQ1Null() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.PLT_OPE_SEQ1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPLT_OPE_SEQ1Null()
            Me(Me.tableLOT1_TABLE.PLT_OPE_SEQ1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPLT_OPE_SEQ2Null() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.PLT_OPE_SEQ2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPLT_OPE_SEQ2Null()
            Me(Me.tableLOT1_TABLE.PLT_OPE_SEQ2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPILOT_QNTNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.PILOT_QNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPILOT_QNTNull()
            Me(Me.tableLOT1_TABLE.PILOT_QNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_QNTNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.TOTAL_QNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_QNTNull()
            Me(Me.tableLOT1_TABLE.TOTAL_QNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOMMENTNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.COMMENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOMMENTNull()
            Me(Me.tableLOT1_TABLE.COMMENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsROHM_ORDER_MODEL_NAME_ONull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.ROHM_ORDER_MODEL_NAME_OColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetROHM_ORDER_MODEL_NAME_ONull()
            Me(Me.tableLOT1_TABLE.ROHM_ORDER_MODEL_NAME_OColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDER_NONull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.ORDER_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDER_NONull()
            Me(Me.tableLOT1_TABLE.ORDER_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFT_MODEL_NAMENull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.FT_MODEL_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFT_MODEL_NAMENull()
            Me(Me.tableLOT1_TABLE.FT_MODEL_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTP_RANKNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.TP_RANKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTP_RANKNull()
            Me(Me.tableLOT1_TABLE.TP_RANKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWARI_STOCK_KBNNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.WARI_STOCK_KBNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWARI_STOCK_KBNNull()
            Me(Me.tableLOT1_TABLE.WARI_STOCK_KBNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWARI_INSTRUCT_KBNNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.WARI_INSTRUCT_KBNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWARI_INSTRUCT_KBNNull()
            Me(Me.tableLOT1_TABLE.WARI_INSTRUCT_KBNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFORM_NAMENull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.FORM_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFORM_NAMENull()
            Me(Me.tableLOT1_TABLE.FORM_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShipTargetChipCountNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.ShipTargetChipCountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShipTargetChipCountNull()
            Me(Me.tableLOT1_TABLE.ShipTargetChipCountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOfficialChipCountNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.OfficialChipCountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOfficialChipCountNull()
            Me(Me.tableLOT1_TABLE.OfficialChipCountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRestLotInitialChipCountNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.RestLotInitialChipCountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRestLotInitialChipCountNull()
            Me(Me.tableLOT1_TABLE.RestLotInitialChipCountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRestLotInitialInputMagazineNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.RestLotInitialInputMagazineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRestLotInitialInputMagazineNull()
            Me(Me.tableLOT1_TABLE.RestLotInitialInputMagazineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRestLotInitialInputFrameNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.RestLotInitialInputFrameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRestLotInitialInputFrameNull()
            Me(Me.tableLOT1_TABLE.RestLotInitialInputFrameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSectionNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.SectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSectionNull()
            Me(Me.tableLOT1_TABLE.SectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoiceNoNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.InvoiceNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoiceNoNull()
            Me(Me.tableLOT1_TABLE.InvoiceNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCCheckDBNGNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.QCCheckDBNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCCheckDBNGNull()
            Me(Me.tableLOT1_TABLE.QCCheckDBNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCCheckDBPNashiNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.QCCheckDBPNashiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCCheckDBPNashiNull()
            Me(Me.tableLOT1_TABLE.QCCheckDBPNashiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCCheckHajikiPullShaerNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.QCCheckHajikiPullShaerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCCheckHajikiPullShaerNull()
            Me(Me.tableLOT1_TABLE.QCCheckHajikiPullShaerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCCheckWBNGNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.QCCheckWBNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCCheckWBNGNull()
            Me(Me.tableLOT1_TABLE.QCCheckWBNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCCheckWBInsNGNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.QCCheckWBInsNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCCheckWBInsNGNull()
            Me(Me.tableLOT1_TABLE.QCCheckWBInsNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCCheckOSNGNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.QCCheckOSNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCCheckOSNGNull()
            Me(Me.tableLOT1_TABLE.QCCheckOSNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCCheckJudgeNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.QCCheckJudgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCCheckJudgeNull()
            Me(Me.tableLOT1_TABLE.QCCheckJudgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCCheckerPDNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.QCCheckerPDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCCheckerPDNull()
            Me(Me.tableLOT1_TABLE.QCCheckerPDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCCheckerQCNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.QCCheckerQCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCCheckerQCNull()
            Me(Me.tableLOT1_TABLE.QCCheckerQCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCAQIIssueDateNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.QCAQIIssueDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCAQIIssueDateNull()
            Me(Me.tableLOT1_TABLE.QCAQIIssueDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCCheckExceptOSNGNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.QCCheckExceptOSNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCCheckExceptOSNGNull()
            Me(Me.tableLOT1_TABLE.QCCheckExceptOSNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCMainReasonExceptOSNGNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.QCMainReasonExceptOSNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCMainReasonExceptOSNGNull()
            Me(Me.tableLOT1_TABLE.QCMainReasonExceptOSNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCNGChipInExceptOSNGNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.QCNGChipInExceptOSNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCNGChipInExceptOSNGNull()
            Me(Me.tableLOT1_TABLE.QCNGChipInExceptOSNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCNGIncludeExceptOSNGNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.QCNGIncludeExceptOSNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCNGIncludeExceptOSNGNull()
            Me(Me.tableLOT1_TABLE.QCNGIncludeExceptOSNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCNGJudgeExceptOSNGNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.QCNGJudgeExceptOSNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCNGJudgeExceptOSNGNull()
            Me(Me.tableLOT1_TABLE.QCNGJudgeExceptOSNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCNGChipInGoodChipNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.QCNGChipInGoodChipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCNGChipInGoodChipNull()
            Me(Me.tableLOT1_TABLE.QCNGChipInGoodChipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCNGIncludeGoodChipNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.QCNGIncludeGoodChipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCNGIncludeGoodChipNull()
            Me(Me.tableLOT1_TABLE.QCNGIncludeGoodChipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCNGJudgeGoodChipNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.QCNGJudgeGoodChipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCNGJudgeGoodChipNull()
            Me(Me.tableLOT1_TABLE.QCNGJudgeGoodChipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCREATION_DATENull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.CREATION_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCREATION_DATENull()
            Me(Me.tableLOT1_TABLE.CREATION_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEND_FLGNull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.SEND_FLGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEND_FLGNull()
            Me(Me.tableLOT1_TABLE.SEND_FLGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEND_DATENull() As Boolean
            Return Me.IsNull(Me.tableLOT1_TABLE.SEND_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEND_DATENull()
            Me(Me.tableLOT1_TABLE.SEND_DATEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class LOT2_DATARow
        Inherits Global.System.Data.DataRow
        
        Private tableLOT2_DATA As LOT2_DATADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLOT2_DATA = CType(Me.Table,LOT2_DATADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOT_NO() As String
            Get
                Return CType(Me(Me.tableLOT2_DATA.LOT_NOColumn),String)
            End Get
            Set
                Me(Me.tableLOT2_DATA.LOT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPE_SEQ() As Short
            Get
                Return CType(Me(Me.tableLOT2_DATA.OPE_SEQColumn),Short)
            End Get
            Set
                Me(Me.tableLOT2_DATA.OPE_SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property N_OPE_SEQ() As Short
            Get
                Return CType(Me(Me.tableLOT2_DATA.N_OPE_SEQColumn),Short)
            End Get
            Set
                Me(Me.tableLOT2_DATA.N_OPE_SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LAY_NO() As String
            Get
                Return CType(Me(Me.tableLOT2_DATA.LAY_NOColumn),String)
            End Get
            Set
                Me(Me.tableLOT2_DATA.LAY_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PLAN_DAY() As Date
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.PLAN_DAYColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLAN_DAY' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.PLAN_DAYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REAL_START() As Date
            Get
                Return CType(Me(Me.tableLOT2_DATA.REAL_STARTColumn),Date)
            End Get
            Set
                Me(Me.tableLOT2_DATA.REAL_STARTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ONLINE_START() As Date
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.ONLINE_STARTColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ONLINE_START' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.ONLINE_STARTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REAL_DAY1() As Date
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.REAL_DAY1Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REAL_DAY1' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.REAL_DAY1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REAL_DAY() As Date
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.REAL_DAYColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REAL_DAY' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.REAL_DAYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RECIPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.RECIPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.RECIPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MACHINE() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.MACHINEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MACHINE' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.MACHINEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MACHINE_SUB() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.MACHINE_SUBColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MACHINE_SUB' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.MACHINE_SUBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property START_MSG() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.START_MSGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'START_MSG' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.START_MSGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property END_MSG() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.END_MSGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'END_MSG' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.END_MSGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPERATOR1() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.OPERATOR1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPERATOR1' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.OPERATOR1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPERATOR2() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.OPERATOR2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPERATOR2' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.OPERATOR2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QUANTITY() As Short
            Get
                Return CType(Me(Me.tableLOT2_DATA.QUANTITYColumn),Short)
            End Get
            Set
                Me(Me.tableLOT2_DATA.QUANTITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOSS_QTY() As Short
            Get
                Return CType(Me(Me.tableLOT2_DATA.LOSS_QTYColumn),Short)
            End Get
            Set
                Me(Me.tableLOT2_DATA.LOSS_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATA_NO() As Integer
            Get
                Return CType(Me(Me.tableLOT2_DATA.DATA_NOColumn),Integer)
            End Get
            Set
                Me(Me.tableLOT2_DATA.DATA_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LIMIT_TIME1() As Integer
            Get
                Return CType(Me(Me.tableLOT2_DATA.LIMIT_TIME1Column),Integer)
            End Get
            Set
                Me(Me.tableLOT2_DATA.LIMIT_TIME1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LIMIT_FLG1() As String
            Get
                Return CType(Me(Me.tableLOT2_DATA.LIMIT_FLG1Column),String)
            End Get
            Set
                Me(Me.tableLOT2_DATA.LIMIT_FLG1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LIMIT_MSG1() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.LIMIT_MSG1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LIMIT_MSG1' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.LIMIT_MSG1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LIMIT_TIME2() As Integer
            Get
                Return CType(Me(Me.tableLOT2_DATA.LIMIT_TIME2Column),Integer)
            End Get
            Set
                Me(Me.tableLOT2_DATA.LIMIT_TIME2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LIMIT_FLG2() As String
            Get
                Return CType(Me(Me.tableLOT2_DATA.LIMIT_FLG2Column),String)
            End Get
            Set
                Me(Me.tableLOT2_DATA.LIMIT_FLG2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LIMIT_MSG2() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.LIMIT_MSG2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LIMIT_MSG2' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.LIMIT_MSG2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPE_AREA() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.OPE_AREAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPE_AREA' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.OPE_AREAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTEG1() As Short
            Get
                Return CType(Me(Me.tableLOT2_DATA.INTEG1Column),Short)
            End Get
            Set
                Me(Me.tableLOT2_DATA.INTEG1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTEG2() As Short
            Get
                Return CType(Me(Me.tableLOT2_DATA.INTEG2Column),Short)
            End Get
            Set
                Me(Me.tableLOT2_DATA.INTEG2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTEG3() As Short
            Get
                Return CType(Me(Me.tableLOT2_DATA.INTEG3Column),Short)
            End Get
            Set
                Me(Me.tableLOT2_DATA.INTEG3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTEG4() As Short
            Get
                Return CType(Me(Me.tableLOT2_DATA.INTEG4Column),Short)
            End Get
            Set
                Me(Me.tableLOT2_DATA.INTEG4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REPEAT_FLG() As String
            Get
                Return CType(Me(Me.tableLOT2_DATA.REPEAT_FLGColumn),String)
            End Get
            Set
                Me(Me.tableLOT2_DATA.REPEAT_FLGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REPEAT_TIME() As Short
            Get
                Return CType(Me(Me.tableLOT2_DATA.REPEAT_TIMEColumn),Short)
            End Get
            Set
                Me(Me.tableLOT2_DATA.REPEAT_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WAFER_STATUS() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.WAFER_STATUSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WAFER_STATUS' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.WAFER_STATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LIMIT_FLG() As String
            Get
                Return CType(Me(Me.tableLOT2_DATA.LIMIT_FLGColumn),String)
            End Get
            Set
                Me(Me.tableLOT2_DATA.LIMIT_FLGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRD_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.PRD_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRD_NAME' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.PRD_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRV_BOX_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.PRV_BOX_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRV_BOX_NO' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.PRV_BOX_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MASK_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.MASK_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MASK_NAME' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.MASK_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMMENT1() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.COMMENT1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMENT1' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.COMMENT1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MACHINE_PRM1() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.MACHINE_PRM1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MACHINE_PRM1' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.MACHINE_PRM1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MACHINE_PRM2() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.MACHINE_PRM2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MACHINE_PRM2' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.MACHINE_PRM2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMMENT2() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.COMMENT2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMENT2' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.COMMENT2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_START_MSG() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.M_START_MSGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M_START_MSG' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.M_START_MSGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_END_MSG() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.M_END_MSGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M_END_MSG' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.M_END_MSGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMMENT3() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.COMMENT3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMENT3' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.COMMENT3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMMENT4() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.COMMENT4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMENT4' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.COMMENT4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GOOD_PIECES() As Integer
            Get
                Return CType(Me(Me.tableLOT2_DATA.GOOD_PIECESColumn),Integer)
            End Get
            Set
                Me(Me.tableLOT2_DATA.GOOD_PIECESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BAD_PIECES() As Integer
            Get
                Return CType(Me(Me.tableLOT2_DATA.BAD_PIECESColumn),Integer)
            End Get
            Set
                Me(Me.tableLOT2_DATA.BAD_PIECESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProcessJobID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.ProcessJobIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProcessJobID' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.ProcessJobIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CarrierNoIn() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.CarrierNoInColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CarrierNoIn' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.CarrierNoInColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CarrierNoOut() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.CarrierNoOutColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CarrierNoOut' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.CarrierNoOutColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RunTime() As Double
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.RunTimeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RunTime' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.RunTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StopTime() As Double
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.StopTimeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StopTime' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.StopTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AlarmTime() As Double
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.AlarmTimeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AlarmTime' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.AlarmTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaterialChangeTime() As Double
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.MaterialChangeTimeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MaterialChangeTime' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.MaterialChangeTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIPIdleTime() As Double
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.WIPIdleTimeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WIPIdleTime' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.WIPIdleTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdleTime() As Double
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.IdleTimeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdleTime' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.IdleTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalInputChip() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.TotalInputChipColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalInputChip' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.TotalInputChipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalProcessChip() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.TotalProcessChipColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalProcessChip' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.TotalProcessChipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ScrapChip() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.ScrapChipColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ScrapChip' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.ScrapChipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VisualNGChip() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.VisualNGChipColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VisualNGChip' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.VisualNGChipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnknownLostChip() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.UnknownLostChipColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UnknownLostChip' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.UnknownLostChipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RankOutChip() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.RankOutChipColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RankOutChip' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.RankOutChipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RankType() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.RankTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RankType' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.RankTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KeepSample() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.KeepSampleColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KeepSample' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.KeepSampleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExcessChip() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.ExcessChipColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExcessChip' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.ExcessChipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoChip() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.NoChipColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NoChip' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.NoChipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MarkerNGCount() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.MarkerNGCountColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MarkerNGCount' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.MarkerNGCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalInputFrame() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.TotalInputFrameColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalInputFrame' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.TotalInputFrameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalProcessFrame() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.TotalProcessFrameColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalProcessFrame' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.TotalProcessFrameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ScrapFrame() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.ScrapFrameColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ScrapFrame' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.ScrapFrameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DummyFrame() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.DummyFrameColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DummyFrame' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.DummyFrameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RepateFrameCount() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.RepateFrameCountColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RepateFrameCount' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.RepateFrameCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Note() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.NoteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Note' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.NoteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LotOperationRate() As Double
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.LotOperationRateColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LotOperationRate' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.LotOperationRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LotMaximumRPM() As Double
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.LotMaximumRPMColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LotMaximumRPM' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.LotMaximumRPMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LotAverageRPM() As Double
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.LotAverageRPMColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LotAverageRPM' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.LotAverageRPMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LotAlarmTotalCount() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.LotAlarmTotalCountColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LotAlarmTotalCount' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.LotAlarmTotalCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InspectionJudge() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.InspectionJudgeColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InspectionJudge' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.InspectionJudgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InspectionDefect() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.InspectionDefectColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InspectionDefect' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.InspectionDefectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecognitionTotal() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.RecognitionTotalColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecognitionTotal' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.RecognitionTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecognitionGood() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.RecognitionGoodColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecognitionGood' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.RecognitionGoodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecognitionNG() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.RecognitionNGColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecognitionNG' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.RecognitionNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecognitionNG_Visual() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.RecognitionNG_VisualColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecognitionNG_Visual' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.RecognitionNG_VisualColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecognitionNG_Bond() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.RecognitionNG_BondColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecognitionNG_Bond' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.RecognitionNG_BondColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecognitionPass() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.RecognitionPassColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecognitionPass' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.RecognitionPassColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecognitionRetry() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.RecognitionRetryColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecognitionRetry' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.RecognitionRetryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecognitionAlarm() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.RecognitionAlarmColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecognitionAlarm' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.RecognitionAlarmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CREATION_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.CREATION_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATION_DATE' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.CREATION_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEND_FLG() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.SEND_FLGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SEND_FLG' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.SEND_FLGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEND_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_DATA.SEND_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SEND_DATE' in table 'LOT2_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_DATA.SEND_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPLAN_DAYNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.PLAN_DAYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPLAN_DAYNull()
            Me(Me.tableLOT2_DATA.PLAN_DAYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsONLINE_STARTNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.ONLINE_STARTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetONLINE_STARTNull()
            Me(Me.tableLOT2_DATA.ONLINE_STARTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREAL_DAY1Null() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.REAL_DAY1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREAL_DAY1Null()
            Me(Me.tableLOT2_DATA.REAL_DAY1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREAL_DAYNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.REAL_DAYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREAL_DAYNull()
            Me(Me.tableLOT2_DATA.REAL_DAYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRECIPENull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.RECIPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRECIPENull()
            Me(Me.tableLOT2_DATA.RECIPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMACHINENull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.MACHINEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMACHINENull()
            Me(Me.tableLOT2_DATA.MACHINEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMACHINE_SUBNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.MACHINE_SUBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMACHINE_SUBNull()
            Me(Me.tableLOT2_DATA.MACHINE_SUBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTART_MSGNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.START_MSGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTART_MSGNull()
            Me(Me.tableLOT2_DATA.START_MSGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEND_MSGNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.END_MSGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEND_MSGNull()
            Me(Me.tableLOT2_DATA.END_MSGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPERATOR1Null() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.OPERATOR1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPERATOR1Null()
            Me(Me.tableLOT2_DATA.OPERATOR1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPERATOR2Null() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.OPERATOR2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPERATOR2Null()
            Me(Me.tableLOT2_DATA.OPERATOR2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLIMIT_MSG1Null() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.LIMIT_MSG1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLIMIT_MSG1Null()
            Me(Me.tableLOT2_DATA.LIMIT_MSG1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLIMIT_MSG2Null() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.LIMIT_MSG2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLIMIT_MSG2Null()
            Me(Me.tableLOT2_DATA.LIMIT_MSG2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPE_AREANull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.OPE_AREAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPE_AREANull()
            Me(Me.tableLOT2_DATA.OPE_AREAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWAFER_STATUSNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.WAFER_STATUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWAFER_STATUSNull()
            Me(Me.tableLOT2_DATA.WAFER_STATUSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRD_NAMENull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.PRD_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRD_NAMENull()
            Me(Me.tableLOT2_DATA.PRD_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRV_BOX_NONull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.PRV_BOX_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRV_BOX_NONull()
            Me(Me.tableLOT2_DATA.PRV_BOX_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMASK_NAMENull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.MASK_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMASK_NAMENull()
            Me(Me.tableLOT2_DATA.MASK_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOMMENT1Null() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.COMMENT1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOMMENT1Null()
            Me(Me.tableLOT2_DATA.COMMENT1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMACHINE_PRM1Null() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.MACHINE_PRM1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMACHINE_PRM1Null()
            Me(Me.tableLOT2_DATA.MACHINE_PRM1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMACHINE_PRM2Null() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.MACHINE_PRM2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMACHINE_PRM2Null()
            Me(Me.tableLOT2_DATA.MACHINE_PRM2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOMMENT2Null() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.COMMENT2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOMMENT2Null()
            Me(Me.tableLOT2_DATA.COMMENT2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_START_MSGNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.M_START_MSGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_START_MSGNull()
            Me(Me.tableLOT2_DATA.M_START_MSGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_END_MSGNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.M_END_MSGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_END_MSGNull()
            Me(Me.tableLOT2_DATA.M_END_MSGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOMMENT3Null() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.COMMENT3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOMMENT3Null()
            Me(Me.tableLOT2_DATA.COMMENT3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOMMENT4Null() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.COMMENT4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOMMENT4Null()
            Me(Me.tableLOT2_DATA.COMMENT4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProcessJobIDNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.ProcessJobIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProcessJobIDNull()
            Me(Me.tableLOT2_DATA.ProcessJobIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCarrierNoInNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.CarrierNoInColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCarrierNoInNull()
            Me(Me.tableLOT2_DATA.CarrierNoInColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCarrierNoOutNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.CarrierNoOutColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCarrierNoOutNull()
            Me(Me.tableLOT2_DATA.CarrierNoOutColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRunTimeNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.RunTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRunTimeNull()
            Me(Me.tableLOT2_DATA.RunTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStopTimeNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.StopTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStopTimeNull()
            Me(Me.tableLOT2_DATA.StopTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAlarmTimeNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.AlarmTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAlarmTimeNull()
            Me(Me.tableLOT2_DATA.AlarmTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaterialChangeTimeNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.MaterialChangeTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaterialChangeTimeNull()
            Me(Me.tableLOT2_DATA.MaterialChangeTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIPIdleTimeNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.WIPIdleTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIPIdleTimeNull()
            Me(Me.tableLOT2_DATA.WIPIdleTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdleTimeNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.IdleTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdleTimeNull()
            Me(Me.tableLOT2_DATA.IdleTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalInputChipNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.TotalInputChipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalInputChipNull()
            Me(Me.tableLOT2_DATA.TotalInputChipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalProcessChipNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.TotalProcessChipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalProcessChipNull()
            Me(Me.tableLOT2_DATA.TotalProcessChipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsScrapChipNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.ScrapChipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetScrapChipNull()
            Me(Me.tableLOT2_DATA.ScrapChipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVisualNGChipNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.VisualNGChipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVisualNGChipNull()
            Me(Me.tableLOT2_DATA.VisualNGChipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnknownLostChipNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.UnknownLostChipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnknownLostChipNull()
            Me(Me.tableLOT2_DATA.UnknownLostChipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRankOutChipNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.RankOutChipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRankOutChipNull()
            Me(Me.tableLOT2_DATA.RankOutChipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRankTypeNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.RankTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRankTypeNull()
            Me(Me.tableLOT2_DATA.RankTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKeepSampleNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.KeepSampleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKeepSampleNull()
            Me(Me.tableLOT2_DATA.KeepSampleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExcessChipNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.ExcessChipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExcessChipNull()
            Me(Me.tableLOT2_DATA.ExcessChipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNoChipNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.NoChipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNoChipNull()
            Me(Me.tableLOT2_DATA.NoChipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarkerNGCountNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.MarkerNGCountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarkerNGCountNull()
            Me(Me.tableLOT2_DATA.MarkerNGCountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalInputFrameNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.TotalInputFrameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalInputFrameNull()
            Me(Me.tableLOT2_DATA.TotalInputFrameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalProcessFrameNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.TotalProcessFrameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalProcessFrameNull()
            Me(Me.tableLOT2_DATA.TotalProcessFrameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsScrapFrameNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.ScrapFrameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetScrapFrameNull()
            Me(Me.tableLOT2_DATA.ScrapFrameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDummyFrameNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.DummyFrameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDummyFrameNull()
            Me(Me.tableLOT2_DATA.DummyFrameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRepateFrameCountNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.RepateFrameCountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRepateFrameCountNull()
            Me(Me.tableLOT2_DATA.RepateFrameCountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNoteNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.NoteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNoteNull()
            Me(Me.tableLOT2_DATA.NoteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLotOperationRateNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.LotOperationRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLotOperationRateNull()
            Me(Me.tableLOT2_DATA.LotOperationRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLotMaximumRPMNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.LotMaximumRPMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLotMaximumRPMNull()
            Me(Me.tableLOT2_DATA.LotMaximumRPMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLotAverageRPMNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.LotAverageRPMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLotAverageRPMNull()
            Me(Me.tableLOT2_DATA.LotAverageRPMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLotAlarmTotalCountNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.LotAlarmTotalCountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLotAlarmTotalCountNull()
            Me(Me.tableLOT2_DATA.LotAlarmTotalCountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInspectionJudgeNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.InspectionJudgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInspectionJudgeNull()
            Me(Me.tableLOT2_DATA.InspectionJudgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInspectionDefectNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.InspectionDefectColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInspectionDefectNull()
            Me(Me.tableLOT2_DATA.InspectionDefectColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRecognitionTotalNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.RecognitionTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRecognitionTotalNull()
            Me(Me.tableLOT2_DATA.RecognitionTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRecognitionGoodNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.RecognitionGoodColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRecognitionGoodNull()
            Me(Me.tableLOT2_DATA.RecognitionGoodColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRecognitionNGNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.RecognitionNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRecognitionNGNull()
            Me(Me.tableLOT2_DATA.RecognitionNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRecognitionNG_VisualNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.RecognitionNG_VisualColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRecognitionNG_VisualNull()
            Me(Me.tableLOT2_DATA.RecognitionNG_VisualColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRecognitionNG_BondNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.RecognitionNG_BondColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRecognitionNG_BondNull()
            Me(Me.tableLOT2_DATA.RecognitionNG_BondColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRecognitionPassNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.RecognitionPassColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRecognitionPassNull()
            Me(Me.tableLOT2_DATA.RecognitionPassColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRecognitionRetryNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.RecognitionRetryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRecognitionRetryNull()
            Me(Me.tableLOT2_DATA.RecognitionRetryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRecognitionAlarmNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.RecognitionAlarmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRecognitionAlarmNull()
            Me(Me.tableLOT2_DATA.RecognitionAlarmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCREATION_DATENull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.CREATION_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCREATION_DATENull()
            Me(Me.tableLOT2_DATA.CREATION_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEND_FLGNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.SEND_FLGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEND_FLGNull()
            Me(Me.tableLOT2_DATA.SEND_FLGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEND_DATENull() As Boolean
            Return Me.IsNull(Me.tableLOT2_DATA.SEND_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEND_DATENull()
            Me(Me.tableLOT2_DATA.SEND_DATEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class LOT2_TABLERow
        Inherits Global.System.Data.DataRow
        
        Private tableLOT2_TABLE As LOT2_TABLEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLOT2_TABLE = CType(Me.Table,LOT2_TABLEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOT_NO() As String
            Get
                Return CType(Me(Me.tableLOT2_TABLE.LOT_NOColumn),String)
            End Get
            Set
                Me(Me.tableLOT2_TABLE.LOT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DVI_NO() As Integer
            Get
                Return CType(Me(Me.tableLOT2_TABLE.DVI_NOColumn),Integer)
            End Get
            Set
                Me(Me.tableLOT2_TABLE.DVI_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRD_NAME() As String
            Get
                Return CType(Me(Me.tableLOT2_TABLE.PRD_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableLOT2_TABLE.PRD_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IN_DAY() As String
            Get
                Return CType(Me(Me.tableLOT2_TABLE.IN_DAYColumn),String)
            End Get
            Set
                Me(Me.tableLOT2_TABLE.IN_DAYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_DAY() As String
            Get
                Return CType(Me(Me.tableLOT2_TABLE.OUT_DAYColumn),String)
            End Get
            Set
                Me(Me.tableLOT2_TABLE.OUT_DAYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPE_SEQ() As Short
            Get
                Return CType(Me(Me.tableLOT2_TABLE.OPE_SEQColumn),Short)
            End Get
            Set
                Me(Me.tableLOT2_TABLE.OPE_SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRD_PIECE() As Integer
            Get
                Return CType(Me(Me.tableLOT2_TABLE.PRD_PIECEColumn),Integer)
            End Get
            Set
                Me(Me.tableLOT2_TABLE.PRD_PIECEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INP_PIECE() As Integer
            Get
                Return CType(Me(Me.tableLOT2_TABLE.INP_PIECEColumn),Integer)
            End Get
            Set
                Me(Me.tableLOT2_TABLE.INP_PIECEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_PIECE() As Integer
            Get
                Return CType(Me(Me.tableLOT2_TABLE.OUT_PIECEColumn),Integer)
            End Get
            Set
                Me(Me.tableLOT2_TABLE.OUT_PIECEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REAL_DAY() As Date
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.REAL_DAYColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REAL_DAY' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.REAL_DAYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BATCH_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.BATCH_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCH_NO' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.BATCH_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BATCH_SUB() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.BATCH_SUBColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCH_SUB' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.BATCH_SUBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MATER_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.MATER_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MATER_NAME' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.MATER_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MATER_SNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.MATER_SNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MATER_SNAME' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.MATER_SNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAKER() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.MAKERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAKER' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.MAKERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Y_LEVEL() As String
            Get
                Return CType(Me(Me.tableLOT2_TABLE.Y_LEVELColumn),String)
            End Get
            Set
                Me(Me.tableLOT2_TABLE.Y_LEVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS1() As String
            Get
                Return CType(Me(Me.tableLOT2_TABLE.STATUS1Column),String)
            End Get
            Set
                Me(Me.tableLOT2_TABLE.STATUS1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS2() As String
            Get
                Return CType(Me(Me.tableLOT2_TABLE.STATUS2Column),String)
            End Get
            Set
                Me(Me.tableLOT2_TABLE.STATUS2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CYCLE() As Short
            Get
                Return CType(Me(Me.tableLOT2_TABLE.CYCLEColumn),Short)
            End Get
            Set
                Me(Me.tableLOT2_TABLE.CYCLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BOX_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.BOX_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BOX_NO' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.BOX_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRV_BOX_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.PRV_BOX_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRV_BOX_NO' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.PRV_BOX_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WAFER_STATUS() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.WAFER_STATUSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WAFER_STATUS' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.WAFER_STATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LMT_STR_TIME() As Date
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.LMT_STR_TIMEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LMT_STR_TIME' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.LMT_STR_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WAGON_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.WAGON_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WAGON_NO' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.WAGON_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REP_OPE_SEQ() As Short
            Get
                Return CType(Me(Me.tableLOT2_TABLE.REP_OPE_SEQColumn),Short)
            End Get
            Set
                Me(Me.tableLOT2_TABLE.REP_OPE_SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REPEAT_QNT() As Short
            Get
                Return CType(Me(Me.tableLOT2_TABLE.REPEAT_QNTColumn),Short)
            End Get
            Set
                Me(Me.tableLOT2_TABLE.REPEAT_QNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_MASK() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.TOTAL_MASKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_MASK' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.TOTAL_MASKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS2_SAVE() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.STATUS2_SAVEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STATUS2_SAVE' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.STATUS2_SAVEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REAL_START() As Date
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.REAL_STARTColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REAL_START' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.REAL_STARTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRO_TIME() As Date
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.TRO_TIMEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRO_TIME' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.TRO_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SISAKU_FLG() As String
            Get
                Return CType(Me(Me.tableLOT2_TABLE.SISAKU_FLGColumn),String)
            End Get
            Set
                Me(Me.tableLOT2_TABLE.SISAKU_FLGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PARENT_LOT() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.PARENT_LOTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PARENT_LOT' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.PARENT_LOTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPE_AREA() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.OPE_AREAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPE_AREA' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.OPE_AREAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPE_CHG_FLG() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.OPE_CHG_FLGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPE_CHG_FLG' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.OPE_CHG_FLGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PLT_OPE_SEQ1() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.PLT_OPE_SEQ1Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLT_OPE_SEQ1' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.PLT_OPE_SEQ1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PLT_OPE_SEQ2() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.PLT_OPE_SEQ2Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLT_OPE_SEQ2' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.PLT_OPE_SEQ2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PILOT_QNT() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.PILOT_QNTColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PILOT_QNT' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.PILOT_QNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_QNT() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.TOTAL_QNTColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_QNT' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.TOTAL_QNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMMENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.COMMENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMENT' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.COMMENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ROHM_ORDER_MODEL_NAME_O() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.ROHM_ORDER_MODEL_NAME_OColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ROHM_ORDER_MODEL_NAME_O' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.ROHM_ORDER_MODEL_NAME_OColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDER_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.ORDER_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDER_NO' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.ORDER_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FT_MODEL_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.FT_MODEL_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FT_MODEL_NAME' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.FT_MODEL_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TP_RANK() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.TP_RANKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TP_RANK' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.TP_RANKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WARI_STOCK_KBN() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.WARI_STOCK_KBNColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WARI_STOCK_KBN' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.WARI_STOCK_KBNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WARI_INSTRUCT_KBN() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.WARI_INSTRUCT_KBNColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WARI_INSTRUCT_KBN' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.WARI_INSTRUCT_KBNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FORM_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.FORM_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FORM_NAME' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.FORM_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GOOD_PIECES() As Integer
            Get
                Return CType(Me(Me.tableLOT2_TABLE.GOOD_PIECESColumn),Integer)
            End Get
            Set
                Me(Me.tableLOT2_TABLE.GOOD_PIECESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BAD_PIECES() As Integer
            Get
                Return CType(Me(Me.tableLOT2_TABLE.BAD_PIECESColumn),Integer)
            End Get
            Set
                Me(Me.tableLOT2_TABLE.BAD_PIECESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShipTargetChipCount() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.ShipTargetChipCountColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShipTargetChipCount' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.ShipTargetChipCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OfficialChipCount() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.OfficialChipCountColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OfficialChipCount' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.OfficialChipCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RestLotInitialChipCount() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.RestLotInitialChipCountColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RestLotInitialChipCount' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.RestLotInitialChipCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RestLotInitialInputMagazine() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.RestLotInitialInputMagazineColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RestLotInitialInputMagazine' in table 'LOT2_TABLE' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.RestLotInitialInputMagazineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RestLotInitialInputFrame() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.RestLotInitialInputFrameColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RestLotInitialInputFrame' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.RestLotInitialInputFrameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Section() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.SectionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Section' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.SectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvoiceNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.InvoiceNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvoiceNo' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.InvoiceNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCCheckDBNG() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.QCCheckDBNGColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCCheckDBNG' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.QCCheckDBNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCCheckDBPNashi() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.QCCheckDBPNashiColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCCheckDBPNashi' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.QCCheckDBPNashiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCCheckHajikiPullShaer() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.QCCheckHajikiPullShaerColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCCheckHajikiPullShaer' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.QCCheckHajikiPullShaerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCCheckWBNG() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.QCCheckWBNGColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCCheckWBNG' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.QCCheckWBNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCCheckWBInsNG() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.QCCheckWBInsNGColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCCheckWBInsNG' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.QCCheckWBInsNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCCheckOSNG() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.QCCheckOSNGColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCCheckOSNG' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.QCCheckOSNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCCheckJudge() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.QCCheckJudgeColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCCheckJudge' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.QCCheckJudgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCCheckerPD() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.QCCheckerPDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCCheckerPD' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.QCCheckerPDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCCheckerQC() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.QCCheckerQCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCCheckerQC' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.QCCheckerQCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCAQIIssueDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.QCAQIIssueDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCAQIIssueDate' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.QCAQIIssueDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCCheckExceptOSNG() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.QCCheckExceptOSNGColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCCheckExceptOSNG' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.QCCheckExceptOSNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCMainReasonExceptOSNG() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.QCMainReasonExceptOSNGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCMainReasonExceptOSNG' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.QCMainReasonExceptOSNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCNGChipInExceptOSNG() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.QCNGChipInExceptOSNGColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCNGChipInExceptOSNG' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.QCNGChipInExceptOSNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCNGIncludeExceptOSNG() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.QCNGIncludeExceptOSNGColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCNGIncludeExceptOSNG' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.QCNGIncludeExceptOSNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCNGJudgeExceptOSNG() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.QCNGJudgeExceptOSNGColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCNGJudgeExceptOSNG' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.QCNGJudgeExceptOSNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCNGChipInGoodChip() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.QCNGChipInGoodChipColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCNGChipInGoodChip' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.QCNGChipInGoodChipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCNGIncludeGoodChip() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.QCNGIncludeGoodChipColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCNGIncludeGoodChip' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.QCNGIncludeGoodChipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCNGJudgeGoodChip() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.QCNGJudgeGoodChipColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCNGJudgeGoodChip' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.QCNGJudgeGoodChipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CREATION_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.CREATION_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATION_DATE' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.CREATION_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEND_FLG() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.SEND_FLGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SEND_FLG' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.SEND_FLGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEND_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableLOT2_TABLE.SEND_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SEND_DATE' in table 'LOT2_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOT2_TABLE.SEND_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREAL_DAYNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.REAL_DAYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREAL_DAYNull()
            Me(Me.tableLOT2_TABLE.REAL_DAYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBATCH_NONull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.BATCH_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBATCH_NONull()
            Me(Me.tableLOT2_TABLE.BATCH_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBATCH_SUBNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.BATCH_SUBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBATCH_SUBNull()
            Me(Me.tableLOT2_TABLE.BATCH_SUBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMATER_NAMENull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.MATER_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMATER_NAMENull()
            Me(Me.tableLOT2_TABLE.MATER_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMATER_SNAMENull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.MATER_SNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMATER_SNAMENull()
            Me(Me.tableLOT2_TABLE.MATER_SNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMAKERNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.MAKERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMAKERNull()
            Me(Me.tableLOT2_TABLE.MAKERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBOX_NONull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.BOX_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBOX_NONull()
            Me(Me.tableLOT2_TABLE.BOX_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRV_BOX_NONull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.PRV_BOX_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRV_BOX_NONull()
            Me(Me.tableLOT2_TABLE.PRV_BOX_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWAFER_STATUSNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.WAFER_STATUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWAFER_STATUSNull()
            Me(Me.tableLOT2_TABLE.WAFER_STATUSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLMT_STR_TIMENull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.LMT_STR_TIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLMT_STR_TIMENull()
            Me(Me.tableLOT2_TABLE.LMT_STR_TIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWAGON_NONull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.WAGON_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWAGON_NONull()
            Me(Me.tableLOT2_TABLE.WAGON_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_MASKNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.TOTAL_MASKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_MASKNull()
            Me(Me.tableLOT2_TABLE.TOTAL_MASKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUS2_SAVENull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.STATUS2_SAVEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUS2_SAVENull()
            Me(Me.tableLOT2_TABLE.STATUS2_SAVEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREAL_STARTNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.REAL_STARTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREAL_STARTNull()
            Me(Me.tableLOT2_TABLE.REAL_STARTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRO_TIMENull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.TRO_TIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRO_TIMENull()
            Me(Me.tableLOT2_TABLE.TRO_TIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPARENT_LOTNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.PARENT_LOTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPARENT_LOTNull()
            Me(Me.tableLOT2_TABLE.PARENT_LOTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPE_AREANull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.OPE_AREAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPE_AREANull()
            Me(Me.tableLOT2_TABLE.OPE_AREAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPE_CHG_FLGNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.OPE_CHG_FLGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPE_CHG_FLGNull()
            Me(Me.tableLOT2_TABLE.OPE_CHG_FLGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPLT_OPE_SEQ1Null() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.PLT_OPE_SEQ1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPLT_OPE_SEQ1Null()
            Me(Me.tableLOT2_TABLE.PLT_OPE_SEQ1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPLT_OPE_SEQ2Null() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.PLT_OPE_SEQ2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPLT_OPE_SEQ2Null()
            Me(Me.tableLOT2_TABLE.PLT_OPE_SEQ2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPILOT_QNTNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.PILOT_QNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPILOT_QNTNull()
            Me(Me.tableLOT2_TABLE.PILOT_QNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_QNTNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.TOTAL_QNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_QNTNull()
            Me(Me.tableLOT2_TABLE.TOTAL_QNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOMMENTNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.COMMENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOMMENTNull()
            Me(Me.tableLOT2_TABLE.COMMENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsROHM_ORDER_MODEL_NAME_ONull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.ROHM_ORDER_MODEL_NAME_OColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetROHM_ORDER_MODEL_NAME_ONull()
            Me(Me.tableLOT2_TABLE.ROHM_ORDER_MODEL_NAME_OColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDER_NONull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.ORDER_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDER_NONull()
            Me(Me.tableLOT2_TABLE.ORDER_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFT_MODEL_NAMENull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.FT_MODEL_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFT_MODEL_NAMENull()
            Me(Me.tableLOT2_TABLE.FT_MODEL_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTP_RANKNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.TP_RANKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTP_RANKNull()
            Me(Me.tableLOT2_TABLE.TP_RANKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWARI_STOCK_KBNNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.WARI_STOCK_KBNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWARI_STOCK_KBNNull()
            Me(Me.tableLOT2_TABLE.WARI_STOCK_KBNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWARI_INSTRUCT_KBNNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.WARI_INSTRUCT_KBNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWARI_INSTRUCT_KBNNull()
            Me(Me.tableLOT2_TABLE.WARI_INSTRUCT_KBNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFORM_NAMENull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.FORM_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFORM_NAMENull()
            Me(Me.tableLOT2_TABLE.FORM_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShipTargetChipCountNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.ShipTargetChipCountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShipTargetChipCountNull()
            Me(Me.tableLOT2_TABLE.ShipTargetChipCountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOfficialChipCountNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.OfficialChipCountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOfficialChipCountNull()
            Me(Me.tableLOT2_TABLE.OfficialChipCountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRestLotInitialChipCountNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.RestLotInitialChipCountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRestLotInitialChipCountNull()
            Me(Me.tableLOT2_TABLE.RestLotInitialChipCountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRestLotInitialInputMagazineNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.RestLotInitialInputMagazineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRestLotInitialInputMagazineNull()
            Me(Me.tableLOT2_TABLE.RestLotInitialInputMagazineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRestLotInitialInputFrameNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.RestLotInitialInputFrameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRestLotInitialInputFrameNull()
            Me(Me.tableLOT2_TABLE.RestLotInitialInputFrameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSectionNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.SectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSectionNull()
            Me(Me.tableLOT2_TABLE.SectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoiceNoNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.InvoiceNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoiceNoNull()
            Me(Me.tableLOT2_TABLE.InvoiceNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCCheckDBNGNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.QCCheckDBNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCCheckDBNGNull()
            Me(Me.tableLOT2_TABLE.QCCheckDBNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCCheckDBPNashiNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.QCCheckDBPNashiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCCheckDBPNashiNull()
            Me(Me.tableLOT2_TABLE.QCCheckDBPNashiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCCheckHajikiPullShaerNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.QCCheckHajikiPullShaerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCCheckHajikiPullShaerNull()
            Me(Me.tableLOT2_TABLE.QCCheckHajikiPullShaerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCCheckWBNGNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.QCCheckWBNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCCheckWBNGNull()
            Me(Me.tableLOT2_TABLE.QCCheckWBNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCCheckWBInsNGNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.QCCheckWBInsNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCCheckWBInsNGNull()
            Me(Me.tableLOT2_TABLE.QCCheckWBInsNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCCheckOSNGNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.QCCheckOSNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCCheckOSNGNull()
            Me(Me.tableLOT2_TABLE.QCCheckOSNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCCheckJudgeNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.QCCheckJudgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCCheckJudgeNull()
            Me(Me.tableLOT2_TABLE.QCCheckJudgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCCheckerPDNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.QCCheckerPDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCCheckerPDNull()
            Me(Me.tableLOT2_TABLE.QCCheckerPDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCCheckerQCNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.QCCheckerQCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCCheckerQCNull()
            Me(Me.tableLOT2_TABLE.QCCheckerQCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCAQIIssueDateNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.QCAQIIssueDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCAQIIssueDateNull()
            Me(Me.tableLOT2_TABLE.QCAQIIssueDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCCheckExceptOSNGNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.QCCheckExceptOSNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCCheckExceptOSNGNull()
            Me(Me.tableLOT2_TABLE.QCCheckExceptOSNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCMainReasonExceptOSNGNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.QCMainReasonExceptOSNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCMainReasonExceptOSNGNull()
            Me(Me.tableLOT2_TABLE.QCMainReasonExceptOSNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCNGChipInExceptOSNGNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.QCNGChipInExceptOSNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCNGChipInExceptOSNGNull()
            Me(Me.tableLOT2_TABLE.QCNGChipInExceptOSNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCNGIncludeExceptOSNGNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.QCNGIncludeExceptOSNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCNGIncludeExceptOSNGNull()
            Me(Me.tableLOT2_TABLE.QCNGIncludeExceptOSNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCNGJudgeExceptOSNGNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.QCNGJudgeExceptOSNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCNGJudgeExceptOSNGNull()
            Me(Me.tableLOT2_TABLE.QCNGJudgeExceptOSNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCNGChipInGoodChipNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.QCNGChipInGoodChipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCNGChipInGoodChipNull()
            Me(Me.tableLOT2_TABLE.QCNGChipInGoodChipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCNGIncludeGoodChipNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.QCNGIncludeGoodChipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCNGIncludeGoodChipNull()
            Me(Me.tableLOT2_TABLE.QCNGIncludeGoodChipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCNGJudgeGoodChipNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.QCNGJudgeGoodChipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCNGJudgeGoodChipNull()
            Me(Me.tableLOT2_TABLE.QCNGJudgeGoodChipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCREATION_DATENull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.CREATION_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCREATION_DATENull()
            Me(Me.tableLOT2_TABLE.CREATION_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEND_FLGNull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.SEND_FLGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEND_FLGNull()
            Me(Me.tableLOT2_TABLE.SEND_FLGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEND_DATENull() As Boolean
            Return Me.IsNull(Me.tableLOT2_TABLE.SEND_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEND_DATENull()
            Me(Me.tableLOT2_TABLE.SEND_DATEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MACHI_TABLERow
        Inherits Global.System.Data.DataRow
        
        Private tableMACHI_TABLE As MACHI_TABLEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMACHI_TABLE = CType(Me.Table,MACHI_TABLEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MACHI_NAME() As String
            Get
                Return CType(Me(Me.tableMACHI_TABLE.MACHI_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableMACHI_TABLE.MACHI_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMACHI_TABLE.PROCESS_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROCESS_TYPE' in table 'MACHI_TABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMACHI_TABLE.PROCESS_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROCESS_TYPENull() As Boolean
            Return Me.IsNull(Me.tableMACHI_TABLE.PROCESS_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROCESS_TYPENull()
            Me(Me.tableMACHI_TABLE.PROCESS_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class WorkDataRow
        Inherits Global.System.Data.DataRow
        
        Private tableWorkData As WorkDataDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableWorkData = CType(Me.Table,WorkDataDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOT_NO() As String
            Get
                Return CType(Me(Me.tableWorkData.LOT_NOColumn),String)
            End Get
            Set
                Me(Me.tableWorkData.LOT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DVI_NO() As Integer
            Get
                Return CType(Me(Me.tableWorkData.DVI_NOColumn),Integer)
            End Get
            Set
                Me(Me.tableWorkData.DVI_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRD_NAME() As String
            Get
                Return CType(Me(Me.tableWorkData.PRD_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableWorkData.PRD_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IN_DAY() As String
            Get
                Return CType(Me(Me.tableWorkData.IN_DAYColumn),String)
            End Get
            Set
                Me(Me.tableWorkData.IN_DAYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_DAY() As String
            Get
                Return CType(Me(Me.tableWorkData.OUT_DAYColumn),String)
            End Get
            Set
                Me(Me.tableWorkData.OUT_DAYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPE_SEQ() As Short
            Get
                Return CType(Me(Me.tableWorkData.OPE_SEQColumn),Short)
            End Get
            Set
                Me(Me.tableWorkData.OPE_SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRD_PIECE() As Integer
            Get
                Return CType(Me(Me.tableWorkData.PRD_PIECEColumn),Integer)
            End Get
            Set
                Me(Me.tableWorkData.PRD_PIECEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INP_PIECE() As Integer
            Get
                Return CType(Me(Me.tableWorkData.INP_PIECEColumn),Integer)
            End Get
            Set
                Me(Me.tableWorkData.INP_PIECEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUT_PIECE() As Integer
            Get
                Return CType(Me(Me.tableWorkData.OUT_PIECEColumn),Integer)
            End Get
            Set
                Me(Me.tableWorkData.OUT_PIECEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REAL_DAY() As Date
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.REAL_DAYColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REAL_DAY' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.REAL_DAYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BATCH_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.BATCH_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCH_NO' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.BATCH_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BATCH_SUB() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.BATCH_SUBColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCH_SUB' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.BATCH_SUBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MATER_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.MATER_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MATER_NAME' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.MATER_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MATER_SNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.MATER_SNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MATER_SNAME' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.MATER_SNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAKER() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.MAKERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAKER' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.MAKERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Y_LEVEL() As String
            Get
                Return CType(Me(Me.tableWorkData.Y_LEVELColumn),String)
            End Get
            Set
                Me(Me.tableWorkData.Y_LEVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS1() As String
            Get
                Return CType(Me(Me.tableWorkData.STATUS1Column),String)
            End Get
            Set
                Me(Me.tableWorkData.STATUS1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS2() As String
            Get
                Return CType(Me(Me.tableWorkData.STATUS2Column),String)
            End Get
            Set
                Me(Me.tableWorkData.STATUS2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CYCLE() As Short
            Get
                Return CType(Me(Me.tableWorkData.CYCLEColumn),Short)
            End Get
            Set
                Me(Me.tableWorkData.CYCLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BOX_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.BOX_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BOX_NO' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.BOX_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRV_BOX_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.PRV_BOX_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRV_BOX_NO' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.PRV_BOX_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WAFER_STATUS() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.WAFER_STATUSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WAFER_STATUS' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.WAFER_STATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LMT_STR_TIME() As Date
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.LMT_STR_TIMEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LMT_STR_TIME' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.LMT_STR_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WAGON_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.WAGON_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WAGON_NO' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.WAGON_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REP_OPE_SEQ() As Short
            Get
                Return CType(Me(Me.tableWorkData.REP_OPE_SEQColumn),Short)
            End Get
            Set
                Me(Me.tableWorkData.REP_OPE_SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REPEAT_QNT() As Short
            Get
                Return CType(Me(Me.tableWorkData.REPEAT_QNTColumn),Short)
            End Get
            Set
                Me(Me.tableWorkData.REPEAT_QNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_MASK() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.TOTAL_MASKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_MASK' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.TOTAL_MASKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS2_SAVE() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.STATUS2_SAVEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STATUS2_SAVE' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.STATUS2_SAVEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REAL_START() As Date
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.REAL_STARTColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REAL_START' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.REAL_STARTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRO_TIME() As Date
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.TRO_TIMEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRO_TIME' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.TRO_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SISAKU_FLG() As String
            Get
                Return CType(Me(Me.tableWorkData.SISAKU_FLGColumn),String)
            End Get
            Set
                Me(Me.tableWorkData.SISAKU_FLGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PARENT_LOT() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.PARENT_LOTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PARENT_LOT' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.PARENT_LOTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPE_AREA() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.OPE_AREAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPE_AREA' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.OPE_AREAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPE_CHG_FLG() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.OPE_CHG_FLGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPE_CHG_FLG' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.OPE_CHG_FLGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PLT_OPE_SEQ1() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.PLT_OPE_SEQ1Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLT_OPE_SEQ1' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.PLT_OPE_SEQ1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PLT_OPE_SEQ2() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.PLT_OPE_SEQ2Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLT_OPE_SEQ2' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.PLT_OPE_SEQ2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PILOT_QNT() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.PILOT_QNTColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PILOT_QNT' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.PILOT_QNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_QNT() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.TOTAL_QNTColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_QNT' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.TOTAL_QNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMMENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.COMMENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMENT' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.COMMENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ROHM_ORDER_MODEL_NAME_O() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.ROHM_ORDER_MODEL_NAME_OColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ROHM_ORDER_MODEL_NAME_O' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.ROHM_ORDER_MODEL_NAME_OColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDER_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.ORDER_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDER_NO' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.ORDER_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FT_MODEL_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.FT_MODEL_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FT_MODEL_NAME' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.FT_MODEL_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TP_RANK() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.TP_RANKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TP_RANK' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.TP_RANKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WARI_STOCK_KBN() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.WARI_STOCK_KBNColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WARI_STOCK_KBN' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.WARI_STOCK_KBNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WARI_INSTRUCT_KBN() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.WARI_INSTRUCT_KBNColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WARI_INSTRUCT_KBN' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.WARI_INSTRUCT_KBNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FORM_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.FORM_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FORM_NAME' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.FORM_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GOOD_PIECES() As Integer
            Get
                Return CType(Me(Me.tableWorkData.GOOD_PIECESColumn),Integer)
            End Get
            Set
                Me(Me.tableWorkData.GOOD_PIECESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BAD_PIECES() As Integer
            Get
                Return CType(Me(Me.tableWorkData.BAD_PIECESColumn),Integer)
            End Get
            Set
                Me(Me.tableWorkData.BAD_PIECESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShipTargetChipCount() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.ShipTargetChipCountColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShipTargetChipCount' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.ShipTargetChipCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OfficialChipCount() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.OfficialChipCountColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OfficialChipCount' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.OfficialChipCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RestLotInitialChipCount() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.RestLotInitialChipCountColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RestLotInitialChipCount' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.RestLotInitialChipCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RestLotInitialInputMagazine() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.RestLotInitialInputMagazineColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RestLotInitialInputMagazine' in table 'WorkData' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.RestLotInitialInputMagazineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RestLotInitialInputFrame() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.RestLotInitialInputFrameColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RestLotInitialInputFrame' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.RestLotInitialInputFrameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Section() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.SectionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Section' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.SectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvoiceNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.InvoiceNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvoiceNo' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.InvoiceNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCCheckDBNG() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.QCCheckDBNGColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCCheckDBNG' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.QCCheckDBNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCCheckDBPNashi() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.QCCheckDBPNashiColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCCheckDBPNashi' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.QCCheckDBPNashiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCCheckHajikiPullShaer() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.QCCheckHajikiPullShaerColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCCheckHajikiPullShaer' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.QCCheckHajikiPullShaerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCCheckWBNG() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.QCCheckWBNGColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCCheckWBNG' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.QCCheckWBNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCCheckWBInsNG() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.QCCheckWBInsNGColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCCheckWBInsNG' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.QCCheckWBInsNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCCheckOSNG() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.QCCheckOSNGColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCCheckOSNG' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.QCCheckOSNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCCheckJudge() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.QCCheckJudgeColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCCheckJudge' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.QCCheckJudgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCCheckerPD() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.QCCheckerPDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCCheckerPD' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.QCCheckerPDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCCheckerQC() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.QCCheckerQCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCCheckerQC' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.QCCheckerQCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCAQIIssueDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.QCAQIIssueDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCAQIIssueDate' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.QCAQIIssueDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCCheckExceptOSNG() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.QCCheckExceptOSNGColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCCheckExceptOSNG' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.QCCheckExceptOSNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCMainReasonExceptOSNG() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.QCMainReasonExceptOSNGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCMainReasonExceptOSNG' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.QCMainReasonExceptOSNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCNGChipInExceptOSNG() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.QCNGChipInExceptOSNGColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCNGChipInExceptOSNG' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.QCNGChipInExceptOSNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCNGIncludeExceptOSNG() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.QCNGIncludeExceptOSNGColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCNGIncludeExceptOSNG' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.QCNGIncludeExceptOSNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCNGJudgeExceptOSNG() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.QCNGJudgeExceptOSNGColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCNGJudgeExceptOSNG' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.QCNGJudgeExceptOSNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCNGChipInGoodChip() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.QCNGChipInGoodChipColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCNGChipInGoodChip' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.QCNGChipInGoodChipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCNGIncludeGoodChip() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.QCNGIncludeGoodChipColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCNGIncludeGoodChip' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.QCNGIncludeGoodChipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QCNGJudgeGoodChip() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.QCNGJudgeGoodChipColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QCNGJudgeGoodChip' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.QCNGJudgeGoodChipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CREATION_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.CREATION_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATION_DATE' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.CREATION_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEND_FLG() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.SEND_FLGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SEND_FLG' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.SEND_FLGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEND_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.SEND_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SEND_DATE' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.SEND_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOT_NO1() As String
            Get
                Return CType(Me(Me.tableWorkData.LOT_NO1Column),String)
            End Get
            Set
                Me(Me.tableWorkData.LOT_NO1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPE_SEQ1() As Short
            Get
                Return CType(Me(Me.tableWorkData.OPE_SEQ1Column),Short)
            End Get
            Set
                Me(Me.tableWorkData.OPE_SEQ1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property N_OPE_SEQ() As Short
            Get
                Return CType(Me(Me.tableWorkData.N_OPE_SEQColumn),Short)
            End Get
            Set
                Me(Me.tableWorkData.N_OPE_SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LAY_NO() As String
            Get
                Return CType(Me(Me.tableWorkData.LAY_NOColumn),String)
            End Get
            Set
                Me(Me.tableWorkData.LAY_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_PLAN_DAY() As Date
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.B_PLAN_DAYColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_PLAN_DAY' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.B_PLAN_DAYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PLAN_DAY() As Date
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.PLAN_DAYColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLAN_DAY' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.PLAN_DAYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RECIPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.RECIPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.RECIPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property START_MSG() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.START_MSGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'START_MSG' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.START_MSGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property END_MSG() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.END_MSGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'END_MSG' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.END_MSGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STOP_FLG() As String
            Get
                Return CType(Me(Me.tableWorkData.STOP_FLGColumn),String)
            End Get
            Set
                Me(Me.tableWorkData.STOP_FLGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STOP_REASON() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.STOP_REASONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STOP_REASON' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.STOP_REASONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STOP_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.STOP_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STOP_NAME' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.STOP_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LIMIT_TIME1() As Integer
            Get
                Return CType(Me(Me.tableWorkData.LIMIT_TIME1Column),Integer)
            End Get
            Set
                Me(Me.tableWorkData.LIMIT_TIME1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LIMIT_MSG1() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.LIMIT_MSG1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LIMIT_MSG1' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.LIMIT_MSG1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LIMIT_TIME2() As Integer
            Get
                Return CType(Me(Me.tableWorkData.LIMIT_TIME2Column),Integer)
            End Get
            Set
                Me(Me.tableWorkData.LIMIT_TIME2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LIMIT_MSG2() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.LIMIT_MSG2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LIMIT_MSG2' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.LIMIT_MSG2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPE_AREA1() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.OPE_AREA1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPE_AREA1' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.OPE_AREA1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LIMIT_FLG() As String
            Get
                Return CType(Me(Me.tableWorkData.LIMIT_FLGColumn),String)
            End Get
            Set
                Me(Me.tableWorkData.LIMIT_FLGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATA_NO() As Integer
            Get
                Return CType(Me(Me.tableWorkData.DATA_NOColumn),Integer)
            End Get
            Set
                Me(Me.tableWorkData.DATA_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MASK_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.MASK_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MASK_NAME' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.MASK_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RESERVE_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.RESERVE_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RESERVE_CODE' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.RESERVE_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RESERVE_MACHI() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.RESERVE_MACHIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RESERVE_MACHI' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.RESERVE_MACHIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_START_MSG() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.M_START_MSGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M_START_MSG' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.M_START_MSGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_END_MSG() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.M_END_MSGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M_END_MSG' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.M_END_MSGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMMENT3() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.COMMENT3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMENT3' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.COMMENT3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMMENT4() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.COMMENT4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMENT4' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.COMMENT4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ENABLE_FLG() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.ENABLE_FLGColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ENABLE_FLG' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.ENABLE_FLGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CREATION_DATE1() As Date
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.CREATION_DATE1Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATION_DATE1' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.CREATION_DATE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEND_FLG1() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.SEND_FLG1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SEND_FLG1' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.SEND_FLG1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEND_DATE1() As Date
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.SEND_DATE1Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SEND_DATE1' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.SEND_DATE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LAY_NO1() As String
            Get
                Return CType(Me(Me.tableWorkData.LAY_NO1Column),String)
            End Get
            Set
                Me(Me.tableWorkData.LAY_NO1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPE_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.OPE_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPE_NAME' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.OPE_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ROUTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.ROUTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ROUTE' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.ROUTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPERATION() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.OPERATIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPERATION' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.OPERATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPERATION_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.OPERATION_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPERATION_CODE' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.OPERATION_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STD_TIME() As Integer
            Get
                Return CType(Me(Me.tableWorkData.STD_TIMEColumn),Integer)
            End Get
            Set
                Me(Me.tableWorkData.STD_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CREATION_DATE2() As Date
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.CREATION_DATE2Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATION_DATE2' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.CREATION_DATE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEND_DATE2() As Date
            Get
                Try 
                    Return CType(Me(Me.tableWorkData.SEND_DATE2Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SEND_DATE2' in table 'WorkData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkData.SEND_DATE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREAL_DAYNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.REAL_DAYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREAL_DAYNull()
            Me(Me.tableWorkData.REAL_DAYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBATCH_NONull() As Boolean
            Return Me.IsNull(Me.tableWorkData.BATCH_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBATCH_NONull()
            Me(Me.tableWorkData.BATCH_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBATCH_SUBNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.BATCH_SUBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBATCH_SUBNull()
            Me(Me.tableWorkData.BATCH_SUBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMATER_NAMENull() As Boolean
            Return Me.IsNull(Me.tableWorkData.MATER_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMATER_NAMENull()
            Me(Me.tableWorkData.MATER_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMATER_SNAMENull() As Boolean
            Return Me.IsNull(Me.tableWorkData.MATER_SNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMATER_SNAMENull()
            Me(Me.tableWorkData.MATER_SNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMAKERNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.MAKERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMAKERNull()
            Me(Me.tableWorkData.MAKERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBOX_NONull() As Boolean
            Return Me.IsNull(Me.tableWorkData.BOX_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBOX_NONull()
            Me(Me.tableWorkData.BOX_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRV_BOX_NONull() As Boolean
            Return Me.IsNull(Me.tableWorkData.PRV_BOX_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRV_BOX_NONull()
            Me(Me.tableWorkData.PRV_BOX_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWAFER_STATUSNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.WAFER_STATUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWAFER_STATUSNull()
            Me(Me.tableWorkData.WAFER_STATUSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLMT_STR_TIMENull() As Boolean
            Return Me.IsNull(Me.tableWorkData.LMT_STR_TIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLMT_STR_TIMENull()
            Me(Me.tableWorkData.LMT_STR_TIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWAGON_NONull() As Boolean
            Return Me.IsNull(Me.tableWorkData.WAGON_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWAGON_NONull()
            Me(Me.tableWorkData.WAGON_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_MASKNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.TOTAL_MASKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_MASKNull()
            Me(Me.tableWorkData.TOTAL_MASKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUS2_SAVENull() As Boolean
            Return Me.IsNull(Me.tableWorkData.STATUS2_SAVEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUS2_SAVENull()
            Me(Me.tableWorkData.STATUS2_SAVEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREAL_STARTNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.REAL_STARTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREAL_STARTNull()
            Me(Me.tableWorkData.REAL_STARTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRO_TIMENull() As Boolean
            Return Me.IsNull(Me.tableWorkData.TRO_TIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRO_TIMENull()
            Me(Me.tableWorkData.TRO_TIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPARENT_LOTNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.PARENT_LOTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPARENT_LOTNull()
            Me(Me.tableWorkData.PARENT_LOTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPE_AREANull() As Boolean
            Return Me.IsNull(Me.tableWorkData.OPE_AREAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPE_AREANull()
            Me(Me.tableWorkData.OPE_AREAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPE_CHG_FLGNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.OPE_CHG_FLGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPE_CHG_FLGNull()
            Me(Me.tableWorkData.OPE_CHG_FLGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPLT_OPE_SEQ1Null() As Boolean
            Return Me.IsNull(Me.tableWorkData.PLT_OPE_SEQ1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPLT_OPE_SEQ1Null()
            Me(Me.tableWorkData.PLT_OPE_SEQ1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPLT_OPE_SEQ2Null() As Boolean
            Return Me.IsNull(Me.tableWorkData.PLT_OPE_SEQ2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPLT_OPE_SEQ2Null()
            Me(Me.tableWorkData.PLT_OPE_SEQ2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPILOT_QNTNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.PILOT_QNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPILOT_QNTNull()
            Me(Me.tableWorkData.PILOT_QNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_QNTNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.TOTAL_QNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_QNTNull()
            Me(Me.tableWorkData.TOTAL_QNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOMMENTNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.COMMENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOMMENTNull()
            Me(Me.tableWorkData.COMMENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsROHM_ORDER_MODEL_NAME_ONull() As Boolean
            Return Me.IsNull(Me.tableWorkData.ROHM_ORDER_MODEL_NAME_OColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetROHM_ORDER_MODEL_NAME_ONull()
            Me(Me.tableWorkData.ROHM_ORDER_MODEL_NAME_OColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDER_NONull() As Boolean
            Return Me.IsNull(Me.tableWorkData.ORDER_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDER_NONull()
            Me(Me.tableWorkData.ORDER_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFT_MODEL_NAMENull() As Boolean
            Return Me.IsNull(Me.tableWorkData.FT_MODEL_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFT_MODEL_NAMENull()
            Me(Me.tableWorkData.FT_MODEL_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTP_RANKNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.TP_RANKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTP_RANKNull()
            Me(Me.tableWorkData.TP_RANKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWARI_STOCK_KBNNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.WARI_STOCK_KBNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWARI_STOCK_KBNNull()
            Me(Me.tableWorkData.WARI_STOCK_KBNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWARI_INSTRUCT_KBNNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.WARI_INSTRUCT_KBNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWARI_INSTRUCT_KBNNull()
            Me(Me.tableWorkData.WARI_INSTRUCT_KBNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFORM_NAMENull() As Boolean
            Return Me.IsNull(Me.tableWorkData.FORM_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFORM_NAMENull()
            Me(Me.tableWorkData.FORM_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShipTargetChipCountNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.ShipTargetChipCountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShipTargetChipCountNull()
            Me(Me.tableWorkData.ShipTargetChipCountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOfficialChipCountNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.OfficialChipCountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOfficialChipCountNull()
            Me(Me.tableWorkData.OfficialChipCountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRestLotInitialChipCountNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.RestLotInitialChipCountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRestLotInitialChipCountNull()
            Me(Me.tableWorkData.RestLotInitialChipCountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRestLotInitialInputMagazineNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.RestLotInitialInputMagazineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRestLotInitialInputMagazineNull()
            Me(Me.tableWorkData.RestLotInitialInputMagazineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRestLotInitialInputFrameNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.RestLotInitialInputFrameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRestLotInitialInputFrameNull()
            Me(Me.tableWorkData.RestLotInitialInputFrameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSectionNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.SectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSectionNull()
            Me(Me.tableWorkData.SectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoiceNoNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.InvoiceNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoiceNoNull()
            Me(Me.tableWorkData.InvoiceNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCCheckDBNGNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.QCCheckDBNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCCheckDBNGNull()
            Me(Me.tableWorkData.QCCheckDBNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCCheckDBPNashiNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.QCCheckDBPNashiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCCheckDBPNashiNull()
            Me(Me.tableWorkData.QCCheckDBPNashiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCCheckHajikiPullShaerNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.QCCheckHajikiPullShaerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCCheckHajikiPullShaerNull()
            Me(Me.tableWorkData.QCCheckHajikiPullShaerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCCheckWBNGNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.QCCheckWBNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCCheckWBNGNull()
            Me(Me.tableWorkData.QCCheckWBNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCCheckWBInsNGNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.QCCheckWBInsNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCCheckWBInsNGNull()
            Me(Me.tableWorkData.QCCheckWBInsNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCCheckOSNGNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.QCCheckOSNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCCheckOSNGNull()
            Me(Me.tableWorkData.QCCheckOSNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCCheckJudgeNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.QCCheckJudgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCCheckJudgeNull()
            Me(Me.tableWorkData.QCCheckJudgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCCheckerPDNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.QCCheckerPDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCCheckerPDNull()
            Me(Me.tableWorkData.QCCheckerPDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCCheckerQCNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.QCCheckerQCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCCheckerQCNull()
            Me(Me.tableWorkData.QCCheckerQCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCAQIIssueDateNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.QCAQIIssueDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCAQIIssueDateNull()
            Me(Me.tableWorkData.QCAQIIssueDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCCheckExceptOSNGNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.QCCheckExceptOSNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCCheckExceptOSNGNull()
            Me(Me.tableWorkData.QCCheckExceptOSNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCMainReasonExceptOSNGNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.QCMainReasonExceptOSNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCMainReasonExceptOSNGNull()
            Me(Me.tableWorkData.QCMainReasonExceptOSNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCNGChipInExceptOSNGNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.QCNGChipInExceptOSNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCNGChipInExceptOSNGNull()
            Me(Me.tableWorkData.QCNGChipInExceptOSNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCNGIncludeExceptOSNGNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.QCNGIncludeExceptOSNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCNGIncludeExceptOSNGNull()
            Me(Me.tableWorkData.QCNGIncludeExceptOSNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCNGJudgeExceptOSNGNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.QCNGJudgeExceptOSNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCNGJudgeExceptOSNGNull()
            Me(Me.tableWorkData.QCNGJudgeExceptOSNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCNGChipInGoodChipNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.QCNGChipInGoodChipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCNGChipInGoodChipNull()
            Me(Me.tableWorkData.QCNGChipInGoodChipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCNGIncludeGoodChipNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.QCNGIncludeGoodChipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCNGIncludeGoodChipNull()
            Me(Me.tableWorkData.QCNGIncludeGoodChipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQCNGJudgeGoodChipNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.QCNGJudgeGoodChipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQCNGJudgeGoodChipNull()
            Me(Me.tableWorkData.QCNGJudgeGoodChipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCREATION_DATENull() As Boolean
            Return Me.IsNull(Me.tableWorkData.CREATION_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCREATION_DATENull()
            Me(Me.tableWorkData.CREATION_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEND_FLGNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.SEND_FLGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEND_FLGNull()
            Me(Me.tableWorkData.SEND_FLGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEND_DATENull() As Boolean
            Return Me.IsNull(Me.tableWorkData.SEND_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEND_DATENull()
            Me(Me.tableWorkData.SEND_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_PLAN_DAYNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.B_PLAN_DAYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_PLAN_DAYNull()
            Me(Me.tableWorkData.B_PLAN_DAYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPLAN_DAYNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.PLAN_DAYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPLAN_DAYNull()
            Me(Me.tableWorkData.PLAN_DAYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRECIPENull() As Boolean
            Return Me.IsNull(Me.tableWorkData.RECIPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRECIPENull()
            Me(Me.tableWorkData.RECIPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTART_MSGNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.START_MSGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTART_MSGNull()
            Me(Me.tableWorkData.START_MSGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEND_MSGNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.END_MSGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEND_MSGNull()
            Me(Me.tableWorkData.END_MSGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTOP_REASONNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.STOP_REASONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTOP_REASONNull()
            Me(Me.tableWorkData.STOP_REASONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTOP_NAMENull() As Boolean
            Return Me.IsNull(Me.tableWorkData.STOP_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTOP_NAMENull()
            Me(Me.tableWorkData.STOP_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLIMIT_MSG1Null() As Boolean
            Return Me.IsNull(Me.tableWorkData.LIMIT_MSG1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLIMIT_MSG1Null()
            Me(Me.tableWorkData.LIMIT_MSG1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLIMIT_MSG2Null() As Boolean
            Return Me.IsNull(Me.tableWorkData.LIMIT_MSG2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLIMIT_MSG2Null()
            Me(Me.tableWorkData.LIMIT_MSG2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPE_AREA1Null() As Boolean
            Return Me.IsNull(Me.tableWorkData.OPE_AREA1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPE_AREA1Null()
            Me(Me.tableWorkData.OPE_AREA1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMASK_NAMENull() As Boolean
            Return Me.IsNull(Me.tableWorkData.MASK_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMASK_NAMENull()
            Me(Me.tableWorkData.MASK_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRESERVE_CODENull() As Boolean
            Return Me.IsNull(Me.tableWorkData.RESERVE_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRESERVE_CODENull()
            Me(Me.tableWorkData.RESERVE_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRESERVE_MACHINull() As Boolean
            Return Me.IsNull(Me.tableWorkData.RESERVE_MACHIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRESERVE_MACHINull()
            Me(Me.tableWorkData.RESERVE_MACHIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_START_MSGNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.M_START_MSGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_START_MSGNull()
            Me(Me.tableWorkData.M_START_MSGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_END_MSGNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.M_END_MSGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_END_MSGNull()
            Me(Me.tableWorkData.M_END_MSGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOMMENT3Null() As Boolean
            Return Me.IsNull(Me.tableWorkData.COMMENT3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOMMENT3Null()
            Me(Me.tableWorkData.COMMENT3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOMMENT4Null() As Boolean
            Return Me.IsNull(Me.tableWorkData.COMMENT4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOMMENT4Null()
            Me(Me.tableWorkData.COMMENT4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsENABLE_FLGNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.ENABLE_FLGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetENABLE_FLGNull()
            Me(Me.tableWorkData.ENABLE_FLGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCREATION_DATE1Null() As Boolean
            Return Me.IsNull(Me.tableWorkData.CREATION_DATE1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCREATION_DATE1Null()
            Me(Me.tableWorkData.CREATION_DATE1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEND_FLG1Null() As Boolean
            Return Me.IsNull(Me.tableWorkData.SEND_FLG1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEND_FLG1Null()
            Me(Me.tableWorkData.SEND_FLG1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEND_DATE1Null() As Boolean
            Return Me.IsNull(Me.tableWorkData.SEND_DATE1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEND_DATE1Null()
            Me(Me.tableWorkData.SEND_DATE1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPE_NAMENull() As Boolean
            Return Me.IsNull(Me.tableWorkData.OPE_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPE_NAMENull()
            Me(Me.tableWorkData.OPE_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsROUTENull() As Boolean
            Return Me.IsNull(Me.tableWorkData.ROUTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetROUTENull()
            Me(Me.tableWorkData.ROUTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPERATIONNull() As Boolean
            Return Me.IsNull(Me.tableWorkData.OPERATIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPERATIONNull()
            Me(Me.tableWorkData.OPERATIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPERATION_CODENull() As Boolean
            Return Me.IsNull(Me.tableWorkData.OPERATION_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPERATION_CODENull()
            Me(Me.tableWorkData.OPERATION_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCREATION_DATE2Null() As Boolean
            Return Me.IsNull(Me.tableWorkData.CREATION_DATE2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCREATION_DATE2Null()
            Me(Me.tableWorkData.CREATION_DATE2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEND_DATE2Null() As Boolean
            Return Me.IsNull(Me.tableWorkData.SEND_DATE2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEND_DATE2Null()
            Me(Me.tableWorkData.SEND_DATE2Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class LOT1_DATARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As LOT1_DATARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As LOT1_DATARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As LOT1_DATARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class LOT1_TABLERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As LOT1_TABLERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As LOT1_TABLERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As LOT1_TABLERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class LOT2_DATARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As LOT2_DATARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As LOT2_DATARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As LOT2_DATARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class LOT2_TABLERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As LOT2_TABLERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As LOT2_TABLERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As LOT2_TABLERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MACHI_TABLERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MACHI_TABLERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MACHI_TABLERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MACHI_TABLERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class WorkDataRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As WorkDataRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As WorkDataRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As WorkDataRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace APCSDBDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class LOT1_DATATableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "LOT1_DATA"
            tableMapping.ColumnMappings.Add("LOT_NO", "LOT_NO")
            tableMapping.ColumnMappings.Add("OPE_SEQ", "OPE_SEQ")
            tableMapping.ColumnMappings.Add("N_OPE_SEQ", "N_OPE_SEQ")
            tableMapping.ColumnMappings.Add("LAY_NO", "LAY_NO")
            tableMapping.ColumnMappings.Add("B_PLAN_DAY", "B_PLAN_DAY")
            tableMapping.ColumnMappings.Add("PLAN_DAY", "PLAN_DAY")
            tableMapping.ColumnMappings.Add("RECIPE", "RECIPE")
            tableMapping.ColumnMappings.Add("START_MSG", "START_MSG")
            tableMapping.ColumnMappings.Add("END_MSG", "END_MSG")
            tableMapping.ColumnMappings.Add("STOP_FLG", "STOP_FLG")
            tableMapping.ColumnMappings.Add("STOP_REASON", "STOP_REASON")
            tableMapping.ColumnMappings.Add("STOP_NAME", "STOP_NAME")
            tableMapping.ColumnMappings.Add("LIMIT_TIME1", "LIMIT_TIME1")
            tableMapping.ColumnMappings.Add("LIMIT_MSG1", "LIMIT_MSG1")
            tableMapping.ColumnMappings.Add("LIMIT_TIME2", "LIMIT_TIME2")
            tableMapping.ColumnMappings.Add("LIMIT_MSG2", "LIMIT_MSG2")
            tableMapping.ColumnMappings.Add("OPE_AREA", "OPE_AREA")
            tableMapping.ColumnMappings.Add("LIMIT_FLG", "LIMIT_FLG")
            tableMapping.ColumnMappings.Add("DATA_NO", "DATA_NO")
            tableMapping.ColumnMappings.Add("MASK_NAME", "MASK_NAME")
            tableMapping.ColumnMappings.Add("RESERVE_CODE", "RESERVE_CODE")
            tableMapping.ColumnMappings.Add("RESERVE_MACHI", "RESERVE_MACHI")
            tableMapping.ColumnMappings.Add("M_START_MSG", "M_START_MSG")
            tableMapping.ColumnMappings.Add("M_END_MSG", "M_END_MSG")
            tableMapping.ColumnMappings.Add("COMMENT3", "COMMENT3")
            tableMapping.ColumnMappings.Add("COMMENT4", "COMMENT4")
            tableMapping.ColumnMappings.Add("ENABLE_FLG", "ENABLE_FLG")
            tableMapping.ColumnMappings.Add("CREATION_DATE", "CREATION_DATE")
            tableMapping.ColumnMappings.Add("SEND_FLG", "SEND_FLG")
            tableMapping.ColumnMappings.Add("SEND_DATE", "SEND_DATE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[LOT1_DATA] WHERE (([LOT_NO] = @Original_LOT_NO) AND ([OPE_SEQ]"& _ 
                " = @Original_OPE_SEQ) AND ([N_OPE_SEQ] = @Original_N_OPE_SEQ) AND ([LAY_NO] = @O"& _ 
                "riginal_LAY_NO) AND ((@IsNull_B_PLAN_DAY = 1 AND [B_PLAN_DAY] IS NULL) OR ([B_PL"& _ 
                "AN_DAY] = @Original_B_PLAN_DAY)) AND ((@IsNull_PLAN_DAY = 1 AND [PLAN_DAY] IS NU"& _ 
                "LL) OR ([PLAN_DAY] = @Original_PLAN_DAY)) AND ((@IsNull_RECIPE = 1 AND [RECIPE] "& _ 
                "IS NULL) OR ([RECIPE] = @Original_RECIPE)) AND ((@IsNull_START_MSG = 1 AND [STAR"& _ 
                "T_MSG] IS NULL) OR ([START_MSG] = @Original_START_MSG)) AND ((@IsNull_END_MSG = "& _ 
                "1 AND [END_MSG] IS NULL) OR ([END_MSG] = @Original_END_MSG)) AND ([STOP_FLG] = @"& _ 
                "Original_STOP_FLG) AND ((@IsNull_STOP_REASON = 1 AND [STOP_REASON] IS NULL) OR ("& _ 
                "[STOP_REASON] = @Original_STOP_REASON)) AND ((@IsNull_STOP_NAME = 1 AND [STOP_NA"& _ 
                "ME] IS NULL) OR ([STOP_NAME] = @Original_STOP_NAME)) AND ([LIMIT_TIME1] = @Origi"& _ 
                "nal_LIMIT_TIME1) AND ((@IsNull_LIMIT_MSG1 = 1 AND [LIMIT_MSG1] IS NULL) OR ([LIM"& _ 
                "IT_MSG1] = @Original_LIMIT_MSG1)) AND ([LIMIT_TIME2] = @Original_LIMIT_TIME2) AN"& _ 
                "D ((@IsNull_LIMIT_MSG2 = 1 AND [LIMIT_MSG2] IS NULL) OR ([LIMIT_MSG2] = @Origina"& _ 
                "l_LIMIT_MSG2)) AND ((@IsNull_OPE_AREA = 1 AND [OPE_AREA] IS NULL) OR ([OPE_AREA]"& _ 
                " = @Original_OPE_AREA)) AND ([LIMIT_FLG] = @Original_LIMIT_FLG) AND ([DATA_NO] ="& _ 
                " @Original_DATA_NO) AND ((@IsNull_MASK_NAME = 1 AND [MASK_NAME] IS NULL) OR ([MA"& _ 
                "SK_NAME] = @Original_MASK_NAME)) AND ((@IsNull_RESERVE_CODE = 1 AND [RESERVE_COD"& _ 
                "E] IS NULL) OR ([RESERVE_CODE] = @Original_RESERVE_CODE)) AND ((@IsNull_RESERVE_"& _ 
                "MACHI = 1 AND [RESERVE_MACHI] IS NULL) OR ([RESERVE_MACHI] = @Original_RESERVE_M"& _ 
                "ACHI)) AND ((@IsNull_M_START_MSG = 1 AND [M_START_MSG] IS NULL) OR ([M_START_MSG"& _ 
                "] = @Original_M_START_MSG)) AND ((@IsNull_M_END_MSG = 1 AND [M_END_MSG] IS NULL)"& _ 
                " OR ([M_END_MSG] = @Original_M_END_MSG)) AND ((@IsNull_COMMENT3 = 1 AND [COMMENT"& _ 
                "3] IS NULL) OR ([COMMENT3] = @Original_COMMENT3)) AND ((@IsNull_COMMENT4 = 1 AND"& _ 
                " [COMMENT4] IS NULL) OR ([COMMENT4] = @Original_COMMENT4)) AND ((@IsNull_ENABLE_"& _ 
                "FLG = 1 AND [ENABLE_FLG] IS NULL) OR ([ENABLE_FLG] = @Original_ENABLE_FLG)) AND "& _ 
                "((@IsNull_CREATION_DATE = 1 AND [CREATION_DATE] IS NULL) OR ([CREATION_DATE] = @"& _ 
                "Original_CREATION_DATE)) AND ((@IsNull_SEND_FLG = 1 AND [SEND_FLG] IS NULL) OR ("& _ 
                "[SEND_FLG] = @Original_SEND_FLG)) AND ((@IsNull_SEND_DATE = 1 AND [SEND_DATE] IS"& _ 
                " NULL) OR ([SEND_DATE] = @Original_SEND_DATE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_N_OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "N_OPE_SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LAY_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAY_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_B_PLAN_DAY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "B_PLAN_DAY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_B_PLAN_DAY", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "B_PLAN_DAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PLAN_DAY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLAN_DAY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLAN_DAY", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLAN_DAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RECIPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECIPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RECIPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECIPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_START_MSG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "START_MSG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_START_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "START_MSG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_END_MSG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "END_MSG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_END_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "END_MSG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_STOP_FLG", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STOP_FLG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_STOP_REASON", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STOP_REASON", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_STOP_REASON", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STOP_REASON", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_STOP_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STOP_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_STOP_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STOP_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LIMIT_TIME1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_TIME1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LIMIT_MSG1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_MSG1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LIMIT_MSG1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_MSG1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LIMIT_TIME2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_TIME2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LIMIT_MSG2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_MSG2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LIMIT_MSG2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_MSG2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OPE_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_AREA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPE_AREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_AREA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LIMIT_FLG", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_FLG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATA_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MASK_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MASK_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MASK_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MASK_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RESERVE_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RESERVE_CODE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RESERVE_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RESERVE_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RESERVE_MACHI", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RESERVE_MACHI", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RESERVE_MACHI", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RESERVE_MACHI", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_M_START_MSG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_START_MSG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_M_START_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_START_MSG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_M_END_MSG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_END_MSG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_M_END_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_END_MSG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COMMENT3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COMMENT3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COMMENT4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COMMENT4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ENABLE_FLG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENABLE_FLG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENABLE_FLG", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENABLE_FLG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATION_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATION_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATION_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATION_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SEND_FLG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_FLG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEND_FLG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_FLG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SEND_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEND_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[LOT1_DATA] ([LOT_NO], [OPE_SEQ], [N_OPE_SEQ], [LAY_NO], [B_PLA"& _ 
                "N_DAY], [PLAN_DAY], [RECIPE], [START_MSG], [END_MSG], [STOP_FLG], [STOP_REASON],"& _ 
                " [STOP_NAME], [LIMIT_TIME1], [LIMIT_MSG1], [LIMIT_TIME2], [LIMIT_MSG2], [OPE_ARE"& _ 
                "A], [LIMIT_FLG], [DATA_NO], [MASK_NAME], [RESERVE_CODE], [RESERVE_MACHI], [M_STA"& _ 
                "RT_MSG], [M_END_MSG], [COMMENT3], [COMMENT4], [ENABLE_FLG], [CREATION_DATE], [SE"& _ 
                "ND_FLG], [SEND_DATE]) VALUES (@LOT_NO, @OPE_SEQ, @N_OPE_SEQ, @LAY_NO, @B_PLAN_DA"& _ 
                "Y, @PLAN_DAY, @RECIPE, @START_MSG, @END_MSG, @STOP_FLG, @STOP_REASON, @STOP_NAME"& _ 
                ", @LIMIT_TIME1, @LIMIT_MSG1, @LIMIT_TIME2, @LIMIT_MSG2, @OPE_AREA, @LIMIT_FLG, @"& _ 
                "DATA_NO, @MASK_NAME, @RESERVE_CODE, @RESERVE_MACHI, @M_START_MSG, @M_END_MSG, @C"& _ 
                "OMMENT3, @COMMENT4, @ENABLE_FLG, @CREATION_DATE, @SEND_FLG, @SEND_DATE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT"& _ 
                " LOT_NO, OPE_SEQ, N_OPE_SEQ, LAY_NO, B_PLAN_DAY, PLAN_DAY, RECIPE, START_MSG, EN"& _ 
                "D_MSG, STOP_FLG, STOP_REASON, STOP_NAME, LIMIT_TIME1, LIMIT_MSG1, LIMIT_TIME2, L"& _ 
                "IMIT_MSG2, OPE_AREA, LIMIT_FLG, DATA_NO, MASK_NAME, RESERVE_CODE, RESERVE_MACHI,"& _ 
                " M_START_MSG, M_END_MSG, COMMENT3, COMMENT4, ENABLE_FLG, CREATION_DATE, SEND_FLG"& _ 
                ", SEND_DATE FROM LOT1_DATA WHERE (LOT_NO = @LOT_NO) AND (OPE_SEQ = @OPE_SEQ)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@N_OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "N_OPE_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAY_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAY_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@B_PLAN_DAY", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "B_PLAN_DAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLAN_DAY", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLAN_DAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECIPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECIPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@START_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "START_MSG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@END_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "END_MSG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STOP_FLG", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STOP_FLG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STOP_REASON", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STOP_REASON", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STOP_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STOP_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIMIT_TIME1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_TIME1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIMIT_MSG1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_MSG1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIMIT_TIME2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_TIME2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIMIT_MSG2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_MSG2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPE_AREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_AREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIMIT_FLG", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_FLG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MASK_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MASK_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RESERVE_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RESERVE_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RESERVE_MACHI", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RESERVE_MACHI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_START_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_START_MSG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_END_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_END_MSG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENT3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENT4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENABLE_FLG", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENABLE_FLG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATION_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATION_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEND_FLG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_FLG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEND_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[LOT1_DATA] SET [LOT_NO] = @LOT_NO, [OPE_SEQ] = @OPE_SEQ, [N_OPE_SEQ"& _ 
                "] = @N_OPE_SEQ, [LAY_NO] = @LAY_NO, [B_PLAN_DAY] = @B_PLAN_DAY, [PLAN_DAY] = @PL"& _ 
                "AN_DAY, [RECIPE] = @RECIPE, [START_MSG] = @START_MSG, [END_MSG] = @END_MSG, [STO"& _ 
                "P_FLG] = @STOP_FLG, [STOP_REASON] = @STOP_REASON, [STOP_NAME] = @STOP_NAME, [LIM"& _ 
                "IT_TIME1] = @LIMIT_TIME1, [LIMIT_MSG1] = @LIMIT_MSG1, [LIMIT_TIME2] = @LIMIT_TIM"& _ 
                "E2, [LIMIT_MSG2] = @LIMIT_MSG2, [OPE_AREA] = @OPE_AREA, [LIMIT_FLG] = @LIMIT_FLG"& _ 
                ", [DATA_NO] = @DATA_NO, [MASK_NAME] = @MASK_NAME, [RESERVE_CODE] = @RESERVE_CODE"& _ 
                ", [RESERVE_MACHI] = @RESERVE_MACHI, [M_START_MSG] = @M_START_MSG, [M_END_MSG] = "& _ 
                "@M_END_MSG, [COMMENT3] = @COMMENT3, [COMMENT4] = @COMMENT4, [ENABLE_FLG] = @ENAB"& _ 
                "LE_FLG, [CREATION_DATE] = @CREATION_DATE, [SEND_FLG] = @SEND_FLG, [SEND_DATE] = "& _ 
                "@SEND_DATE WHERE (([LOT_NO] = @Original_LOT_NO) AND ([OPE_SEQ] = @Original_OPE_S"& _ 
                "EQ) AND ([N_OPE_SEQ] = @Original_N_OPE_SEQ) AND ([LAY_NO] = @Original_LAY_NO) AN"& _ 
                "D ((@IsNull_B_PLAN_DAY = 1 AND [B_PLAN_DAY] IS NULL) OR ([B_PLAN_DAY] = @Origina"& _ 
                "l_B_PLAN_DAY)) AND ((@IsNull_PLAN_DAY = 1 AND [PLAN_DAY] IS NULL) OR ([PLAN_DAY]"& _ 
                " = @Original_PLAN_DAY)) AND ((@IsNull_RECIPE = 1 AND [RECIPE] IS NULL) OR ([RECI"& _ 
                "PE] = @Original_RECIPE)) AND ((@IsNull_START_MSG = 1 AND [START_MSG] IS NULL) OR"& _ 
                " ([START_MSG] = @Original_START_MSG)) AND ((@IsNull_END_MSG = 1 AND [END_MSG] IS"& _ 
                " NULL) OR ([END_MSG] = @Original_END_MSG)) AND ([STOP_FLG] = @Original_STOP_FLG)"& _ 
                " AND ((@IsNull_STOP_REASON = 1 AND [STOP_REASON] IS NULL) OR ([STOP_REASON] = @O"& _ 
                "riginal_STOP_REASON)) AND ((@IsNull_STOP_NAME = 1 AND [STOP_NAME] IS NULL) OR (["& _ 
                "STOP_NAME] = @Original_STOP_NAME)) AND ([LIMIT_TIME1] = @Original_LIMIT_TIME1) A"& _ 
                "ND ((@IsNull_LIMIT_MSG1 = 1 AND [LIMIT_MSG1] IS NULL) OR ([LIMIT_MSG1] = @Origin"& _ 
                "al_LIMIT_MSG1)) AND ([LIMIT_TIME2] = @Original_LIMIT_TIME2) AND ((@IsNull_LIMIT_"& _ 
                "MSG2 = 1 AND [LIMIT_MSG2] IS NULL) OR ([LIMIT_MSG2] = @Original_LIMIT_MSG2)) AND"& _ 
                " ((@IsNull_OPE_AREA = 1 AND [OPE_AREA] IS NULL) OR ([OPE_AREA] = @Original_OPE_A"& _ 
                "REA)) AND ([LIMIT_FLG] = @Original_LIMIT_FLG) AND ([DATA_NO] = @Original_DATA_NO"& _ 
                ") AND ((@IsNull_MASK_NAME = 1 AND [MASK_NAME] IS NULL) OR ([MASK_NAME] = @Origin"& _ 
                "al_MASK_NAME)) AND ((@IsNull_RESERVE_CODE = 1 AND [RESERVE_CODE] IS NULL) OR ([R"& _ 
                "ESERVE_CODE] = @Original_RESERVE_CODE)) AND ((@IsNull_RESERVE_MACHI = 1 AND [RES"& _ 
                "ERVE_MACHI] IS NULL) OR ([RESERVE_MACHI] = @Original_RESERVE_MACHI)) AND ((@IsNu"& _ 
                "ll_M_START_MSG = 1 AND [M_START_MSG] IS NULL) OR ([M_START_MSG] = @Original_M_ST"& _ 
                "ART_MSG)) AND ((@IsNull_M_END_MSG = 1 AND [M_END_MSG] IS NULL) OR ([M_END_MSG] ="& _ 
                " @Original_M_END_MSG)) AND ((@IsNull_COMMENT3 = 1 AND [COMMENT3] IS NULL) OR ([C"& _ 
                "OMMENT3] = @Original_COMMENT3)) AND ((@IsNull_COMMENT4 = 1 AND [COMMENT4] IS NUL"& _ 
                "L) OR ([COMMENT4] = @Original_COMMENT4)) AND ((@IsNull_ENABLE_FLG = 1 AND [ENABL"& _ 
                "E_FLG] IS NULL) OR ([ENABLE_FLG] = @Original_ENABLE_FLG)) AND ((@IsNull_CREATION"& _ 
                "_DATE = 1 AND [CREATION_DATE] IS NULL) OR ([CREATION_DATE] = @Original_CREATION_"& _ 
                "DATE)) AND ((@IsNull_SEND_FLG = 1 AND [SEND_FLG] IS NULL) OR ([SEND_FLG] = @Orig"& _ 
                "inal_SEND_FLG)) AND ((@IsNull_SEND_DATE = 1 AND [SEND_DATE] IS NULL) OR ([SEND_D"& _ 
                "ATE] = @Original_SEND_DATE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT LOT_NO, OPE_SEQ, N_OPE_SEQ, LAY_NO, B_PLA"& _ 
                "N_DAY, PLAN_DAY, RECIPE, START_MSG, END_MSG, STOP_FLG, STOP_REASON, STOP_NAME, L"& _ 
                "IMIT_TIME1, LIMIT_MSG1, LIMIT_TIME2, LIMIT_MSG2, OPE_AREA, LIMIT_FLG, DATA_NO, M"& _ 
                "ASK_NAME, RESERVE_CODE, RESERVE_MACHI, M_START_MSG, M_END_MSG, COMMENT3, COMMENT"& _ 
                "4, ENABLE_FLG, CREATION_DATE, SEND_FLG, SEND_DATE FROM LOT1_DATA WHERE (LOT_NO ="& _ 
                " @LOT_NO) AND (OPE_SEQ = @OPE_SEQ)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@N_OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "N_OPE_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAY_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAY_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@B_PLAN_DAY", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "B_PLAN_DAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLAN_DAY", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLAN_DAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECIPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECIPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@START_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "START_MSG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@END_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "END_MSG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STOP_FLG", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STOP_FLG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STOP_REASON", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STOP_REASON", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STOP_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STOP_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIMIT_TIME1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_TIME1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIMIT_MSG1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_MSG1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIMIT_TIME2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_TIME2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIMIT_MSG2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_MSG2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPE_AREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_AREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIMIT_FLG", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_FLG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MASK_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MASK_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RESERVE_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RESERVE_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RESERVE_MACHI", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RESERVE_MACHI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_START_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_START_MSG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_END_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_END_MSG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENT3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENT4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENABLE_FLG", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENABLE_FLG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATION_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATION_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEND_FLG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_FLG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEND_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_N_OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "N_OPE_SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LAY_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAY_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_B_PLAN_DAY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "B_PLAN_DAY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_B_PLAN_DAY", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "B_PLAN_DAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PLAN_DAY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLAN_DAY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLAN_DAY", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLAN_DAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RECIPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECIPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RECIPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECIPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_START_MSG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "START_MSG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_START_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "START_MSG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_END_MSG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "END_MSG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_END_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "END_MSG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_STOP_FLG", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STOP_FLG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_STOP_REASON", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STOP_REASON", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_STOP_REASON", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STOP_REASON", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_STOP_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STOP_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_STOP_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STOP_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LIMIT_TIME1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_TIME1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LIMIT_MSG1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_MSG1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LIMIT_MSG1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_MSG1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LIMIT_TIME2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_TIME2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LIMIT_MSG2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_MSG2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LIMIT_MSG2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_MSG2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OPE_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_AREA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPE_AREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_AREA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LIMIT_FLG", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_FLG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATA_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MASK_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MASK_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MASK_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MASK_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RESERVE_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RESERVE_CODE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RESERVE_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RESERVE_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RESERVE_MACHI", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RESERVE_MACHI", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RESERVE_MACHI", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RESERVE_MACHI", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_M_START_MSG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_START_MSG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_M_START_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_START_MSG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_M_END_MSG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_END_MSG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_M_END_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_END_MSG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COMMENT3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COMMENT3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COMMENT4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COMMENT4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ENABLE_FLG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENABLE_FLG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENABLE_FLG", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENABLE_FLG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATION_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATION_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATION_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATION_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SEND_FLG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_FLG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEND_FLG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_FLG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SEND_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEND_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Rohm.Apcs.Tdc.My.MySettings.Default.APCSDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT LOT_NO, OPE_SEQ, N_OPE_SEQ, LAY_NO, B_PLAN_DAY, PLAN_DAY, RECIPE, START_MS"& _ 
                "G, END_MSG, STOP_FLG, STOP_REASON, STOP_NAME, LIMIT_TIME1, LIMIT_MSG1, LIMIT_TIM"& _ 
                "E2, LIMIT_MSG2, OPE_AREA, LIMIT_FLG, DATA_NO, MASK_NAME, RESERVE_CODE, RESERVE_M"& _ 
                "ACHI, M_START_MSG, M_END_MSG, COMMENT3, COMMENT4, ENABLE_FLG, CREATION_DATE, SEN"& _ 
                "D_FLG, SEND_DATE FROM dbo.LOT1_DATA"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT COUNT(*) FROM LOT1_DATA WHERE LOT_NO = @LOT_NO"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 13, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As APCSDBDataSet.LOT1_DATADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As APCSDBDataSet.LOT1_DATADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As APCSDBDataSet.LOT1_DATADataTable = New APCSDBDataSet.LOT1_DATADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As APCSDBDataSet.LOT1_DATADataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As APCSDBDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "LOT1_DATA")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_LOT_NO As String,  _
                    ByVal Original_OPE_SEQ As Short,  _
                    ByVal Original_N_OPE_SEQ As Short,  _
                    ByVal Original_LAY_NO As String,  _
                    ByVal Original_B_PLAN_DAY As Global.System.Nullable(Of Date),  _
                    ByVal Original_PLAN_DAY As Global.System.Nullable(Of Date),  _
                    ByVal Original_RECIPE As String,  _
                    ByVal Original_START_MSG As String,  _
                    ByVal Original_END_MSG As String,  _
                    ByVal Original_STOP_FLG As String,  _
                    ByVal Original_STOP_REASON As String,  _
                    ByVal Original_STOP_NAME As String,  _
                    ByVal Original_LIMIT_TIME1 As Integer,  _
                    ByVal Original_LIMIT_MSG1 As String,  _
                    ByVal Original_LIMIT_TIME2 As Integer,  _
                    ByVal Original_LIMIT_MSG2 As String,  _
                    ByVal Original_OPE_AREA As String,  _
                    ByVal Original_LIMIT_FLG As String,  _
                    ByVal Original_DATA_NO As Integer,  _
                    ByVal Original_MASK_NAME As String,  _
                    ByVal Original_RESERVE_CODE As String,  _
                    ByVal Original_RESERVE_MACHI As String,  _
                    ByVal Original_M_START_MSG As String,  _
                    ByVal Original_M_END_MSG As String,  _
                    ByVal Original_COMMENT3 As String,  _
                    ByVal Original_COMMENT4 As String,  _
                    ByVal Original_ENABLE_FLG As Global.System.Nullable(Of Short),  _
                    ByVal Original_CREATION_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_SEND_FLG As String,  _
                    ByVal Original_SEND_DATE As Global.System.Nullable(Of Date)) As Integer
            If (Original_LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOT_NO")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_LOT_NO,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_OPE_SEQ,Short)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_N_OPE_SEQ,Short)
            If (Original_LAY_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LAY_NO")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_LAY_NO,String)
            End If
            If (Original_B_PLAN_DAY.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_B_PLAN_DAY.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_PLAN_DAY.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_PLAN_DAY.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_RECIPE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_RECIPE,String)
            End If
            If (Original_START_MSG Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_START_MSG,String)
            End If
            If (Original_END_MSG Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_END_MSG,String)
            End If
            If (Original_STOP_FLG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STOP_FLG")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_STOP_FLG,String)
            End If
            If (Original_STOP_REASON Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_STOP_REASON,String)
            End If
            If (Original_STOP_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_STOP_NAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_LIMIT_TIME1,Integer)
            If (Original_LIMIT_MSG1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_LIMIT_MSG1,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_LIMIT_TIME2,Integer)
            If (Original_LIMIT_MSG2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_LIMIT_MSG2,String)
            End If
            If (Original_OPE_AREA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_OPE_AREA,String)
            End If
            If (Original_LIMIT_FLG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LIMIT_FLG")
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_LIMIT_FLG,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_DATA_NO,Integer)
            If (Original_MASK_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_MASK_NAME,String)
            End If
            If (Original_RESERVE_CODE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_RESERVE_CODE,String)
            End If
            If (Original_RESERVE_MACHI Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_RESERVE_MACHI,String)
            End If
            If (Original_M_START_MSG Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_M_START_MSG,String)
            End If
            If (Original_M_END_MSG Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_M_END_MSG,String)
            End If
            If (Original_COMMENT3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_COMMENT3,String)
            End If
            If (Original_COMMENT4 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_COMMENT4,String)
            End If
            If (Original_ENABLE_FLG.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_ENABLE_FLG.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_CREATION_DATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_CREATION_DATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (Original_SEND_FLG Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(Original_SEND_FLG,String)
            End If
            If (Original_SEND_DATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(Original_SEND_DATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal LOT_NO As String,  _
                    ByVal OPE_SEQ As Short,  _
                    ByVal N_OPE_SEQ As Short,  _
                    ByVal LAY_NO As String,  _
                    ByVal B_PLAN_DAY As Global.System.Nullable(Of Date),  _
                    ByVal PLAN_DAY As Global.System.Nullable(Of Date),  _
                    ByVal RECIPE As String,  _
                    ByVal START_MSG As String,  _
                    ByVal END_MSG As String,  _
                    ByVal STOP_FLG As String,  _
                    ByVal STOP_REASON As String,  _
                    ByVal STOP_NAME As String,  _
                    ByVal LIMIT_TIME1 As Integer,  _
                    ByVal LIMIT_MSG1 As String,  _
                    ByVal LIMIT_TIME2 As Integer,  _
                    ByVal LIMIT_MSG2 As String,  _
                    ByVal OPE_AREA As String,  _
                    ByVal LIMIT_FLG As String,  _
                    ByVal DATA_NO As Integer,  _
                    ByVal MASK_NAME As String,  _
                    ByVal RESERVE_CODE As String,  _
                    ByVal RESERVE_MACHI As String,  _
                    ByVal M_START_MSG As String,  _
                    ByVal M_END_MSG As String,  _
                    ByVal COMMENT3 As String,  _
                    ByVal COMMENT4 As String,  _
                    ByVal ENABLE_FLG As Global.System.Nullable(Of Short),  _
                    ByVal CREATION_DATE As Global.System.Nullable(Of Date),  _
                    ByVal SEND_FLG As String,  _
                    ByVal SEND_DATE As Global.System.Nullable(Of Date)) As Integer
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(LOT_NO,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(OPE_SEQ,Short)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(N_OPE_SEQ,Short)
            If (LAY_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LAY_NO")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(LAY_NO,String)
            End If
            If (B_PLAN_DAY.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(B_PLAN_DAY.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (PLAN_DAY.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PLAN_DAY.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (RECIPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(RECIPE,String)
            End If
            If (START_MSG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(START_MSG,String)
            End If
            If (END_MSG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(END_MSG,String)
            End If
            If (STOP_FLG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STOP_FLG")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(STOP_FLG,String)
            End If
            If (STOP_REASON Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(STOP_REASON,String)
            End If
            If (STOP_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(STOP_NAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(LIMIT_TIME1,Integer)
            If (LIMIT_MSG1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(LIMIT_MSG1,String)
            End If
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(LIMIT_TIME2,Integer)
            If (LIMIT_MSG2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(LIMIT_MSG2,String)
            End If
            If (OPE_AREA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(OPE_AREA,String)
            End If
            If (LIMIT_FLG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LIMIT_FLG")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(LIMIT_FLG,String)
            End If
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(DATA_NO,Integer)
            If (MASK_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(MASK_NAME,String)
            End If
            If (RESERVE_CODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(RESERVE_CODE,String)
            End If
            If (RESERVE_MACHI Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(RESERVE_MACHI,String)
            End If
            If (M_START_MSG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(M_START_MSG,String)
            End If
            If (M_END_MSG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(M_END_MSG,String)
            End If
            If (COMMENT3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(COMMENT3,String)
            End If
            If (COMMENT4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(COMMENT4,String)
            End If
            If (ENABLE_FLG.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(ENABLE_FLG.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (CREATION_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(CREATION_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (SEND_FLG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(SEND_FLG,String)
            End If
            If (SEND_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(SEND_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal LOT_NO As String,  _
                    ByVal OPE_SEQ As Short,  _
                    ByVal N_OPE_SEQ As Short,  _
                    ByVal LAY_NO As String,  _
                    ByVal B_PLAN_DAY As Global.System.Nullable(Of Date),  _
                    ByVal PLAN_DAY As Global.System.Nullable(Of Date),  _
                    ByVal RECIPE As String,  _
                    ByVal START_MSG As String,  _
                    ByVal END_MSG As String,  _
                    ByVal STOP_FLG As String,  _
                    ByVal STOP_REASON As String,  _
                    ByVal STOP_NAME As String,  _
                    ByVal LIMIT_TIME1 As Integer,  _
                    ByVal LIMIT_MSG1 As String,  _
                    ByVal LIMIT_TIME2 As Integer,  _
                    ByVal LIMIT_MSG2 As String,  _
                    ByVal OPE_AREA As String,  _
                    ByVal LIMIT_FLG As String,  _
                    ByVal DATA_NO As Integer,  _
                    ByVal MASK_NAME As String,  _
                    ByVal RESERVE_CODE As String,  _
                    ByVal RESERVE_MACHI As String,  _
                    ByVal M_START_MSG As String,  _
                    ByVal M_END_MSG As String,  _
                    ByVal COMMENT3 As String,  _
                    ByVal COMMENT4 As String,  _
                    ByVal ENABLE_FLG As Global.System.Nullable(Of Short),  _
                    ByVal CREATION_DATE As Global.System.Nullable(Of Date),  _
                    ByVal SEND_FLG As String,  _
                    ByVal SEND_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_LOT_NO As String,  _
                    ByVal Original_OPE_SEQ As Short,  _
                    ByVal Original_N_OPE_SEQ As Short,  _
                    ByVal Original_LAY_NO As String,  _
                    ByVal Original_B_PLAN_DAY As Global.System.Nullable(Of Date),  _
                    ByVal Original_PLAN_DAY As Global.System.Nullable(Of Date),  _
                    ByVal Original_RECIPE As String,  _
                    ByVal Original_START_MSG As String,  _
                    ByVal Original_END_MSG As String,  _
                    ByVal Original_STOP_FLG As String,  _
                    ByVal Original_STOP_REASON As String,  _
                    ByVal Original_STOP_NAME As String,  _
                    ByVal Original_LIMIT_TIME1 As Integer,  _
                    ByVal Original_LIMIT_MSG1 As String,  _
                    ByVal Original_LIMIT_TIME2 As Integer,  _
                    ByVal Original_LIMIT_MSG2 As String,  _
                    ByVal Original_OPE_AREA As String,  _
                    ByVal Original_LIMIT_FLG As String,  _
                    ByVal Original_DATA_NO As Integer,  _
                    ByVal Original_MASK_NAME As String,  _
                    ByVal Original_RESERVE_CODE As String,  _
                    ByVal Original_RESERVE_MACHI As String,  _
                    ByVal Original_M_START_MSG As String,  _
                    ByVal Original_M_END_MSG As String,  _
                    ByVal Original_COMMENT3 As String,  _
                    ByVal Original_COMMENT4 As String,  _
                    ByVal Original_ENABLE_FLG As Global.System.Nullable(Of Short),  _
                    ByVal Original_CREATION_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_SEND_FLG As String,  _
                    ByVal Original_SEND_DATE As Global.System.Nullable(Of Date)) As Integer
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(LOT_NO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(OPE_SEQ,Short)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(N_OPE_SEQ,Short)
            If (LAY_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LAY_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(LAY_NO,String)
            End If
            If (B_PLAN_DAY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(B_PLAN_DAY.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (PLAN_DAY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PLAN_DAY.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (RECIPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(RECIPE,String)
            End If
            If (START_MSG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(START_MSG,String)
            End If
            If (END_MSG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(END_MSG,String)
            End If
            If (STOP_FLG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STOP_FLG")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(STOP_FLG,String)
            End If
            If (STOP_REASON Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(STOP_REASON,String)
            End If
            If (STOP_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(STOP_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(LIMIT_TIME1,Integer)
            If (LIMIT_MSG1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(LIMIT_MSG1,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(LIMIT_TIME2,Integer)
            If (LIMIT_MSG2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(LIMIT_MSG2,String)
            End If
            If (OPE_AREA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(OPE_AREA,String)
            End If
            If (LIMIT_FLG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LIMIT_FLG")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(LIMIT_FLG,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(DATA_NO,Integer)
            If (MASK_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(MASK_NAME,String)
            End If
            If (RESERVE_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(RESERVE_CODE,String)
            End If
            If (RESERVE_MACHI Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(RESERVE_MACHI,String)
            End If
            If (M_START_MSG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(M_START_MSG,String)
            End If
            If (M_END_MSG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(M_END_MSG,String)
            End If
            If (COMMENT3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(COMMENT3,String)
            End If
            If (COMMENT4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(COMMENT4,String)
            End If
            If (ENABLE_FLG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(ENABLE_FLG.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (CREATION_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(CREATION_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (SEND_FLG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(SEND_FLG,String)
            End If
            If (SEND_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(SEND_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOT_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_LOT_NO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_OPE_SEQ,Short)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_N_OPE_SEQ,Short)
            If (Original_LAY_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LAY_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_LAY_NO,String)
            End If
            If (Original_B_PLAN_DAY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_B_PLAN_DAY.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original_PLAN_DAY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_PLAN_DAY.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original_RECIPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_RECIPE,String)
            End If
            If (Original_START_MSG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_START_MSG,String)
            End If
            If (Original_END_MSG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_END_MSG,String)
            End If
            If (Original_STOP_FLG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STOP_FLG")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_STOP_FLG,String)
            End If
            If (Original_STOP_REASON Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_STOP_REASON,String)
            End If
            If (Original_STOP_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_STOP_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_LIMIT_TIME1,Integer)
            If (Original_LIMIT_MSG1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_LIMIT_MSG1,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_LIMIT_TIME2,Integer)
            If (Original_LIMIT_MSG2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_LIMIT_MSG2,String)
            End If
            If (Original_OPE_AREA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_OPE_AREA,String)
            End If
            If (Original_LIMIT_FLG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LIMIT_FLG")
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_LIMIT_FLG,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_DATA_NO,Integer)
            If (Original_MASK_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_MASK_NAME,String)
            End If
            If (Original_RESERVE_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_RESERVE_CODE,String)
            End If
            If (Original_RESERVE_MACHI Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(Original_RESERVE_MACHI,String)
            End If
            If (Original_M_START_MSG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(66).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(Original_M_START_MSG,String)
            End If
            If (Original_M_END_MSG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(Original_M_END_MSG,String)
            End If
            If (Original_COMMENT3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(Original_COMMENT3,String)
            End If
            If (Original_COMMENT4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(Original_COMMENT4,String)
            End If
            If (Original_ENABLE_FLG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(Original_ENABLE_FLG.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(74).Value = Global.System.DBNull.Value
            End If
            If (Original_CREATION_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(Original_CREATION_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(76).Value = Global.System.DBNull.Value
            End If
            If (Original_SEND_FLG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(78).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(Original_SEND_FLG,String)
            End If
            If (Original_SEND_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(Original_SEND_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(80).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal N_OPE_SEQ As Short,  _
                    ByVal LAY_NO As String,  _
                    ByVal B_PLAN_DAY As Global.System.Nullable(Of Date),  _
                    ByVal PLAN_DAY As Global.System.Nullable(Of Date),  _
                    ByVal RECIPE As String,  _
                    ByVal START_MSG As String,  _
                    ByVal END_MSG As String,  _
                    ByVal STOP_FLG As String,  _
                    ByVal STOP_REASON As String,  _
                    ByVal STOP_NAME As String,  _
                    ByVal LIMIT_TIME1 As Integer,  _
                    ByVal LIMIT_MSG1 As String,  _
                    ByVal LIMIT_TIME2 As Integer,  _
                    ByVal LIMIT_MSG2 As String,  _
                    ByVal OPE_AREA As String,  _
                    ByVal LIMIT_FLG As String,  _
                    ByVal DATA_NO As Integer,  _
                    ByVal MASK_NAME As String,  _
                    ByVal RESERVE_CODE As String,  _
                    ByVal RESERVE_MACHI As String,  _
                    ByVal M_START_MSG As String,  _
                    ByVal M_END_MSG As String,  _
                    ByVal COMMENT3 As String,  _
                    ByVal COMMENT4 As String,  _
                    ByVal ENABLE_FLG As Global.System.Nullable(Of Short),  _
                    ByVal CREATION_DATE As Global.System.Nullable(Of Date),  _
                    ByVal SEND_FLG As String,  _
                    ByVal SEND_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_LOT_NO As String,  _
                    ByVal Original_OPE_SEQ As Short,  _
                    ByVal Original_N_OPE_SEQ As Short,  _
                    ByVal Original_LAY_NO As String,  _
                    ByVal Original_B_PLAN_DAY As Global.System.Nullable(Of Date),  _
                    ByVal Original_PLAN_DAY As Global.System.Nullable(Of Date),  _
                    ByVal Original_RECIPE As String,  _
                    ByVal Original_START_MSG As String,  _
                    ByVal Original_END_MSG As String,  _
                    ByVal Original_STOP_FLG As String,  _
                    ByVal Original_STOP_REASON As String,  _
                    ByVal Original_STOP_NAME As String,  _
                    ByVal Original_LIMIT_TIME1 As Integer,  _
                    ByVal Original_LIMIT_MSG1 As String,  _
                    ByVal Original_LIMIT_TIME2 As Integer,  _
                    ByVal Original_LIMIT_MSG2 As String,  _
                    ByVal Original_OPE_AREA As String,  _
                    ByVal Original_LIMIT_FLG As String,  _
                    ByVal Original_DATA_NO As Integer,  _
                    ByVal Original_MASK_NAME As String,  _
                    ByVal Original_RESERVE_CODE As String,  _
                    ByVal Original_RESERVE_MACHI As String,  _
                    ByVal Original_M_START_MSG As String,  _
                    ByVal Original_M_END_MSG As String,  _
                    ByVal Original_COMMENT3 As String,  _
                    ByVal Original_COMMENT4 As String,  _
                    ByVal Original_ENABLE_FLG As Global.System.Nullable(Of Short),  _
                    ByVal Original_CREATION_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_SEND_FLG As String,  _
                    ByVal Original_SEND_DATE As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_LOT_NO, Original_OPE_SEQ, N_OPE_SEQ, LAY_NO, B_PLAN_DAY, PLAN_DAY, RECIPE, START_MSG, END_MSG, STOP_FLG, STOP_REASON, STOP_NAME, LIMIT_TIME1, LIMIT_MSG1, LIMIT_TIME2, LIMIT_MSG2, OPE_AREA, LIMIT_FLG, DATA_NO, MASK_NAME, RESERVE_CODE, RESERVE_MACHI, M_START_MSG, M_END_MSG, COMMENT3, COMMENT4, ENABLE_FLG, CREATION_DATE, SEND_FLG, SEND_DATE, Original_LOT_NO, Original_OPE_SEQ, Original_N_OPE_SEQ, Original_LAY_NO, Original_B_PLAN_DAY, Original_PLAN_DAY, Original_RECIPE, Original_START_MSG, Original_END_MSG, Original_STOP_FLG, Original_STOP_REASON, Original_STOP_NAME, Original_LIMIT_TIME1, Original_LIMIT_MSG1, Original_LIMIT_TIME2, Original_LIMIT_MSG2, Original_OPE_AREA, Original_LIMIT_FLG, Original_DATA_NO, Original_MASK_NAME, Original_RESERVE_CODE, Original_RESERVE_MACHI, Original_M_START_MSG, Original_M_END_MSG, Original_COMMENT3, Original_COMMENT4, Original_ENABLE_FLG, Original_CREATION_DATE, Original_SEND_FLG, Original_SEND_DATE)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function CountByLotNo(ByVal LOT_NO As String) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                command.Parameters(0).Value = CType(LOT_NO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class LOT1_TABLETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "LOT1_TABLE"
            tableMapping.ColumnMappings.Add("LOT_NO", "LOT_NO")
            tableMapping.ColumnMappings.Add("DVI_NO", "DVI_NO")
            tableMapping.ColumnMappings.Add("PRD_NAME", "PRD_NAME")
            tableMapping.ColumnMappings.Add("IN_DAY", "IN_DAY")
            tableMapping.ColumnMappings.Add("OUT_DAY", "OUT_DAY")
            tableMapping.ColumnMappings.Add("OPE_SEQ", "OPE_SEQ")
            tableMapping.ColumnMappings.Add("PRD_PIECE", "PRD_PIECE")
            tableMapping.ColumnMappings.Add("INP_PIECE", "INP_PIECE")
            tableMapping.ColumnMappings.Add("OUT_PIECE", "OUT_PIECE")
            tableMapping.ColumnMappings.Add("REAL_DAY", "REAL_DAY")
            tableMapping.ColumnMappings.Add("BATCH_NO", "BATCH_NO")
            tableMapping.ColumnMappings.Add("BATCH_SUB", "BATCH_SUB")
            tableMapping.ColumnMappings.Add("MATER_NAME", "MATER_NAME")
            tableMapping.ColumnMappings.Add("MATER_SNAME", "MATER_SNAME")
            tableMapping.ColumnMappings.Add("MAKER", "MAKER")
            tableMapping.ColumnMappings.Add("Y_LEVEL", "Y_LEVEL")
            tableMapping.ColumnMappings.Add("STATUS1", "STATUS1")
            tableMapping.ColumnMappings.Add("STATUS2", "STATUS2")
            tableMapping.ColumnMappings.Add("CYCLE", "CYCLE")
            tableMapping.ColumnMappings.Add("BOX_NO", "BOX_NO")
            tableMapping.ColumnMappings.Add("PRV_BOX_NO", "PRV_BOX_NO")
            tableMapping.ColumnMappings.Add("WAFER_STATUS", "WAFER_STATUS")
            tableMapping.ColumnMappings.Add("LMT_STR_TIME", "LMT_STR_TIME")
            tableMapping.ColumnMappings.Add("WAGON_NO", "WAGON_NO")
            tableMapping.ColumnMappings.Add("REP_OPE_SEQ", "REP_OPE_SEQ")
            tableMapping.ColumnMappings.Add("REPEAT_QNT", "REPEAT_QNT")
            tableMapping.ColumnMappings.Add("TOTAL_MASK", "TOTAL_MASK")
            tableMapping.ColumnMappings.Add("STATUS2_SAVE", "STATUS2_SAVE")
            tableMapping.ColumnMappings.Add("REAL_START", "REAL_START")
            tableMapping.ColumnMappings.Add("TRO_TIME", "TRO_TIME")
            tableMapping.ColumnMappings.Add("SISAKU_FLG", "SISAKU_FLG")
            tableMapping.ColumnMappings.Add("PARENT_LOT", "PARENT_LOT")
            tableMapping.ColumnMappings.Add("OPE_AREA", "OPE_AREA")
            tableMapping.ColumnMappings.Add("OPE_CHG_FLG", "OPE_CHG_FLG")
            tableMapping.ColumnMappings.Add("PLT_OPE_SEQ1", "PLT_OPE_SEQ1")
            tableMapping.ColumnMappings.Add("PLT_OPE_SEQ2", "PLT_OPE_SEQ2")
            tableMapping.ColumnMappings.Add("PILOT_QNT", "PILOT_QNT")
            tableMapping.ColumnMappings.Add("TOTAL_QNT", "TOTAL_QNT")
            tableMapping.ColumnMappings.Add("COMMENT", "COMMENT")
            tableMapping.ColumnMappings.Add("ROHM_ORDER_MODEL_NAME_O", "ROHM_ORDER_MODEL_NAME_O")
            tableMapping.ColumnMappings.Add("ORDER_NO", "ORDER_NO")
            tableMapping.ColumnMappings.Add("FT_MODEL_NAME", "FT_MODEL_NAME")
            tableMapping.ColumnMappings.Add("TP_RANK", "TP_RANK")
            tableMapping.ColumnMappings.Add("WARI_STOCK_KBN", "WARI_STOCK_KBN")
            tableMapping.ColumnMappings.Add("WARI_INSTRUCT_KBN", "WARI_INSTRUCT_KBN")
            tableMapping.ColumnMappings.Add("FORM_NAME", "FORM_NAME")
            tableMapping.ColumnMappings.Add("GOOD_PIECES", "GOOD_PIECES")
            tableMapping.ColumnMappings.Add("BAD_PIECES", "BAD_PIECES")
            tableMapping.ColumnMappings.Add("ShipTargetChipCount", "ShipTargetChipCount")
            tableMapping.ColumnMappings.Add("OfficialChipCount", "OfficialChipCount")
            tableMapping.ColumnMappings.Add("RestLotInitialChipCount", "RestLotInitialChipCount")
            tableMapping.ColumnMappings.Add("RestLotInitialInputMagazine", "RestLotInitialInputMagazine")
            tableMapping.ColumnMappings.Add("RestLotInitialInputFrame", "RestLotInitialInputFrame")
            tableMapping.ColumnMappings.Add("Section", "Section")
            tableMapping.ColumnMappings.Add("InvoiceNo", "InvoiceNo")
            tableMapping.ColumnMappings.Add("QCCheckDBNG", "QCCheckDBNG")
            tableMapping.ColumnMappings.Add("QCCheckDBPNashi", "QCCheckDBPNashi")
            tableMapping.ColumnMappings.Add("QCCheckHajikiPullShaer", "QCCheckHajikiPullShaer")
            tableMapping.ColumnMappings.Add("QCCheckWBNG", "QCCheckWBNG")
            tableMapping.ColumnMappings.Add("QCCheckWBInsNG", "QCCheckWBInsNG")
            tableMapping.ColumnMappings.Add("QCCheckOSNG", "QCCheckOSNG")
            tableMapping.ColumnMappings.Add("QCCheckJudge", "QCCheckJudge")
            tableMapping.ColumnMappings.Add("QCCheckerPD", "QCCheckerPD")
            tableMapping.ColumnMappings.Add("QCCheckerQC", "QCCheckerQC")
            tableMapping.ColumnMappings.Add("QCAQIIssueDate", "QCAQIIssueDate")
            tableMapping.ColumnMappings.Add("QCCheckExceptOSNG", "QCCheckExceptOSNG")
            tableMapping.ColumnMappings.Add("QCMainReasonExceptOSNG", "QCMainReasonExceptOSNG")
            tableMapping.ColumnMappings.Add("QCNGChipInExceptOSNG", "QCNGChipInExceptOSNG")
            tableMapping.ColumnMappings.Add("QCNGIncludeExceptOSNG", "QCNGIncludeExceptOSNG")
            tableMapping.ColumnMappings.Add("QCNGJudgeExceptOSNG", "QCNGJudgeExceptOSNG")
            tableMapping.ColumnMappings.Add("QCNGChipInGoodChip", "QCNGChipInGoodChip")
            tableMapping.ColumnMappings.Add("QCNGIncludeGoodChip", "QCNGIncludeGoodChip")
            tableMapping.ColumnMappings.Add("QCNGJudgeGoodChip", "QCNGJudgeGoodChip")
            tableMapping.ColumnMappings.Add("CREATION_DATE", "CREATION_DATE")
            tableMapping.ColumnMappings.Add("SEND_FLG", "SEND_FLG")
            tableMapping.ColumnMappings.Add("SEND_DATE", "SEND_DATE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[LOT1_TABLE] WHERE (([LOT_NO] = @Original_LOT_NO) AND ([DVI_NO]"& _ 
                " = @Original_DVI_NO) AND ([PRD_NAME] = @Original_PRD_NAME) AND ([IN_DAY] = @Orig"& _ 
                "inal_IN_DAY) AND ([OUT_DAY] = @Original_OUT_DAY) AND ([OPE_SEQ] = @Original_OPE_"& _ 
                "SEQ) AND ([PRD_PIECE] = @Original_PRD_PIECE) AND ([INP_PIECE] = @Original_INP_PI"& _ 
                "ECE) AND ([OUT_PIECE] = @Original_OUT_PIECE) AND ((@IsNull_REAL_DAY = 1 AND [REA"& _ 
                "L_DAY] IS NULL) OR ([REAL_DAY] = @Original_REAL_DAY)) AND ((@IsNull_BATCH_NO = 1"& _ 
                " AND [BATCH_NO] IS NULL) OR ([BATCH_NO] = @Original_BATCH_NO)) AND ((@IsNull_BAT"& _ 
                "CH_SUB = 1 AND [BATCH_SUB] IS NULL) OR ([BATCH_SUB] = @Original_BATCH_SUB)) AND "& _ 
                "((@IsNull_MATER_NAME = 1 AND [MATER_NAME] IS NULL) OR ([MATER_NAME] = @Original_"& _ 
                "MATER_NAME)) AND ((@IsNull_MATER_SNAME = 1 AND [MATER_SNAME] IS NULL) OR ([MATER"& _ 
                "_SNAME] = @Original_MATER_SNAME)) AND ((@IsNull_MAKER = 1 AND [MAKER] IS NULL) O"& _ 
                "R ([MAKER] = @Original_MAKER)) AND ([Y_LEVEL] = @Original_Y_LEVEL) AND ([STATUS1"& _ 
                "] = @Original_STATUS1) AND ([STATUS2] = @Original_STATUS2) AND ([CYCLE] = @Origi"& _ 
                "nal_CYCLE) AND ((@IsNull_BOX_NO = 1 AND [BOX_NO] IS NULL) OR ([BOX_NO] = @Origin"& _ 
                "al_BOX_NO)) AND ((@IsNull_PRV_BOX_NO = 1 AND [PRV_BOX_NO] IS NULL) OR ([PRV_BOX_"& _ 
                "NO] = @Original_PRV_BOX_NO)) AND ((@IsNull_WAFER_STATUS = 1 AND [WAFER_STATUS] I"& _ 
                "S NULL) OR ([WAFER_STATUS] = @Original_WAFER_STATUS)) AND ((@IsNull_LMT_STR_TIME"& _ 
                " = 1 AND [LMT_STR_TIME] IS NULL) OR ([LMT_STR_TIME] = @Original_LMT_STR_TIME)) A"& _ 
                "ND ((@IsNull_WAGON_NO = 1 AND [WAGON_NO] IS NULL) OR ([WAGON_NO] = @Original_WAG"& _ 
                "ON_NO)) AND ([REP_OPE_SEQ] = @Original_REP_OPE_SEQ) AND ([REPEAT_QNT] = @Origina"& _ 
                "l_REPEAT_QNT) AND ((@IsNull_TOTAL_MASK = 1 AND [TOTAL_MASK] IS NULL) OR ([TOTAL_"& _ 
                "MASK] = @Original_TOTAL_MASK)) AND ((@IsNull_STATUS2_SAVE = 1 AND [STATUS2_SAVE]"& _ 
                " IS NULL) OR ([STATUS2_SAVE] = @Original_STATUS2_SAVE)) AND ((@IsNull_REAL_START"& _ 
                " = 1 AND [REAL_START] IS NULL) OR ([REAL_START] = @Original_REAL_START)) AND ((@"& _ 
                "IsNull_TRO_TIME = 1 AND [TRO_TIME] IS NULL) OR ([TRO_TIME] = @Original_TRO_TIME)"& _ 
                ") AND ([SISAKU_FLG] = @Original_SISAKU_FLG) AND ((@IsNull_PARENT_LOT = 1 AND [PA"& _ 
                "RENT_LOT] IS NULL) OR ([PARENT_LOT] = @Original_PARENT_LOT)) AND ((@IsNull_OPE_A"& _ 
                "REA = 1 AND [OPE_AREA] IS NULL) OR ([OPE_AREA] = @Original_OPE_AREA)) AND ((@IsN"& _ 
                "ull_OPE_CHG_FLG = 1 AND [OPE_CHG_FLG] IS NULL) OR ([OPE_CHG_FLG] = @Original_OPE"& _ 
                "_CHG_FLG)) AND ((@IsNull_PLT_OPE_SEQ1 = 1 AND [PLT_OPE_SEQ1] IS NULL) OR ([PLT_O"& _ 
                "PE_SEQ1] = @Original_PLT_OPE_SEQ1)) AND ((@IsNull_PLT_OPE_SEQ2 = 1 AND [PLT_OPE_"& _ 
                "SEQ2] IS NULL) OR ([PLT_OPE_SEQ2] = @Original_PLT_OPE_SEQ2)) AND ((@IsNull_PILOT"& _ 
                "_QNT = 1 AND [PILOT_QNT] IS NULL) OR ([PILOT_QNT] = @Original_PILOT_QNT)) AND (("& _ 
                "@IsNull_TOTAL_QNT = 1 AND [TOTAL_QNT] IS NULL) OR ([TOTAL_QNT] = @Original_TOTAL"& _ 
                "_QNT)) AND ((@IsNull_COMMENT = 1 AND [COMMENT] IS NULL) OR ([COMMENT] = @Origina"& _ 
                "l_COMMENT)) AND ((@IsNull_ROHM_ORDER_MODEL_NAME_O = 1 AND [ROHM_ORDER_MODEL_NAME"& _ 
                "_O] IS NULL) OR ([ROHM_ORDER_MODEL_NAME_O] = @Original_ROHM_ORDER_MODEL_NAME_O))"& _ 
                " AND ((@IsNull_ORDER_NO = 1 AND [ORDER_NO] IS NULL) OR ([ORDER_NO] = @Original_O"& _ 
                "RDER_NO)) AND ((@IsNull_FT_MODEL_NAME = 1 AND [FT_MODEL_NAME] IS NULL) OR ([FT_M"& _ 
                "ODEL_NAME] = @Original_FT_MODEL_NAME)) AND ((@IsNull_TP_RANK = 1 AND [TP_RANK] I"& _ 
                "S NULL) OR ([TP_RANK] = @Original_TP_RANK)) AND ((@IsNull_WARI_STOCK_KBN = 1 AND"& _ 
                " [WARI_STOCK_KBN] IS NULL) OR ([WARI_STOCK_KBN] = @Original_WARI_STOCK_KBN)) AND"& _ 
                " ((@IsNull_WARI_INSTRUCT_KBN = 1 AND [WARI_INSTRUCT_KBN] IS NULL) OR ([WARI_INST"& _ 
                "RUCT_KBN] = @Original_WARI_INSTRUCT_KBN)) AND ((@IsNull_FORM_NAME = 1 AND [FORM_"& _ 
                "NAME] IS NULL) OR ([FORM_NAME] = @Original_FORM_NAME)) AND ([GOOD_PIECES] = @Ori"& _ 
                "ginal_GOOD_PIECES) AND ([BAD_PIECES] = @Original_BAD_PIECES) AND ((@IsNull_ShipT"& _ 
                "argetChipCount = 1 AND [ShipTargetChipCount] IS NULL) OR ([ShipTargetChipCount] "& _ 
                "= @Original_ShipTargetChipCount)) AND ((@IsNull_OfficialChipCount = 1 AND [Offic"& _ 
                "ialChipCount] IS NULL) OR ([OfficialChipCount] = @Original_OfficialChipCount)) A"& _ 
                "ND ((@IsNull_RestLotInitialChipCount = 1 AND [RestLotInitialChipCount] IS NULL) "& _ 
                "OR ([RestLotInitialChipCount] = @Original_RestLotInitialChipCount)) AND ((@IsNul"& _ 
                "l_RestLotInitialInputMagazine = 1 AND [RestLotInitialInputMagazine] IS NULL) OR "& _ 
                "([RestLotInitialInputMagazine] = @Original_RestLotInitialInputMagazine)) AND ((@"& _ 
                "IsNull_RestLotInitialInputFrame = 1 AND [RestLotInitialInputFrame] IS NULL) OR ("& _ 
                "[RestLotInitialInputFrame] = @Original_RestLotInitialInputFrame)) AND ((@IsNull_"& _ 
                "Section = 1 AND [Section] IS NULL) OR ([Section] = @Original_Section)) AND ((@Is"& _ 
                "Null_InvoiceNo = 1 AND [InvoiceNo] IS NULL) OR ([InvoiceNo] = @Original_InvoiceN"& _ 
                "o)) AND ((@IsNull_QCCheckDBNG = 1 AND [QCCheckDBNG] IS NULL) OR ([QCCheckDBNG] ="& _ 
                " @Original_QCCheckDBNG)) AND ((@IsNull_QCCheckDBPNashi = 1 AND [QCCheckDBPNashi]"& _ 
                " IS NULL) OR ([QCCheckDBPNashi] = @Original_QCCheckDBPNashi)) AND ((@IsNull_QCCh"& _ 
                "eckHajikiPullShaer = 1 AND [QCCheckHajikiPullShaer] IS NULL) OR ([QCCheckHajikiP"& _ 
                "ullShaer] = @Original_QCCheckHajikiPullShaer)) AND ((@IsNull_QCCheckWBNG = 1 AND"& _ 
                " [QCCheckWBNG] IS NULL) OR ([QCCheckWBNG] = @Original_QCCheckWBNG)) AND ((@IsNul"& _ 
                "l_QCCheckWBInsNG = 1 AND [QCCheckWBInsNG] IS NULL) OR ([QCCheckWBInsNG] = @Origi"& _ 
                "nal_QCCheckWBInsNG)) AND ((@IsNull_QCCheckOSNG = 1 AND [QCCheckOSNG] IS NULL) OR"& _ 
                " ([QCCheckOSNG] = @Original_QCCheckOSNG)) AND ((@IsNull_QCCheckJudge = 1 AND [QC"& _ 
                "CheckJudge] IS NULL) OR ([QCCheckJudge] = @Original_QCCheckJudge)) AND ((@IsNull"& _ 
                "_QCCheckerPD = 1 AND [QCCheckerPD] IS NULL) OR ([QCCheckerPD] = @Original_QCChec"& _ 
                "kerPD)) AND ((@IsNull_QCCheckerQC = 1 AND [QCCheckerQC] IS NULL) OR ([QCCheckerQ"& _ 
                "C] = @Original_QCCheckerQC)) AND ((@IsNull_QCAQIIssueDate = 1 AND [QCAQIIssueDat"& _ 
                "e] IS NULL) OR ([QCAQIIssueDate] = @Original_QCAQIIssueDate)) AND ((@IsNull_QCCh"& _ 
                "eckExceptOSNG = 1 AND [QCCheckExceptOSNG] IS NULL) OR ([QCCheckExceptOSNG] = @Or"& _ 
                "iginal_QCCheckExceptOSNG)) AND ((@IsNull_QCMainReasonExceptOSNG = 1 AND [QCMainR"& _ 
                "easonExceptOSNG] IS NULL) OR ([QCMainReasonExceptOSNG] = @Original_QCMainReasonE"& _ 
                "xceptOSNG)) AND ((@IsNull_QCNGChipInExceptOSNG = 1 AND [QCNGChipInExceptOSNG] IS"& _ 
                " NULL) OR ([QCNGChipInExceptOSNG] = @Original_QCNGChipInExceptOSNG)) AND ((@IsNu"& _ 
                "ll_QCNGIncludeExceptOSNG = 1 AND [QCNGIncludeExceptOSNG] IS NULL) OR ([QCNGInclu"& _ 
                "deExceptOSNG] = @Original_QCNGIncludeExceptOSNG)) AND ((@IsNull_QCNGJudgeExceptO"& _ 
                "SNG = 1 AND [QCNGJudgeExceptOSNG] IS NULL) OR ([QCNGJudgeExceptOSNG] = @Original"& _ 
                "_QCNGJudgeExceptOSNG)) AND ((@IsNull_QCNGChipInGoodChip = 1 AND [QCNGChipInGoodC"& _ 
                "hip] IS NULL) OR ([QCNGChipInGoodChip] = @Original_QCNGChipInGoodChip)) AND ((@I"& _ 
                "sNull_QCNGIncludeGoodChip = 1 AND [QCNGIncludeGoodChip] IS NULL) OR ([QCNGInclud"& _ 
                "eGoodChip] = @Original_QCNGIncludeGoodChip)) AND ((@IsNull_QCNGJudgeGoodChip = 1"& _ 
                " AND [QCNGJudgeGoodChip] IS NULL) OR ([QCNGJudgeGoodChip] = @Original_QCNGJudgeG"& _ 
                "oodChip)) AND ((@IsNull_CREATION_DATE = 1 AND [CREATION_DATE] IS NULL) OR ([CREA"& _ 
                "TION_DATE] = @Original_CREATION_DATE)) AND ((@IsNull_SEND_FLG = 1 AND [SEND_FLG]"& _ 
                " IS NULL) OR ([SEND_FLG] = @Original_SEND_FLG)) AND ((@IsNull_SEND_DATE = 1 AND "& _ 
                "[SEND_DATE] IS NULL) OR ([SEND_DATE] = @Original_SEND_DATE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DVI_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DVI_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRD_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRD_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IN_DAY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_DAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OUT_DAY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_DAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRD_PIECE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRD_PIECE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INP_PIECE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INP_PIECE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OUT_PIECE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_PIECE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REAL_DAY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_DAY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REAL_DAY", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_DAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BATCH_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BATCH_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BATCH_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BATCH_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BATCH_SUB", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BATCH_SUB", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BATCH_SUB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BATCH_SUB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MATER_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATER_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MATER_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATER_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MATER_SNAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATER_SNAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MATER_SNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATER_SNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MAKER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAKER", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MAKER", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAKER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Y_LEVEL", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Y_LEVEL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_STATUS1", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_STATUS2", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CYCLE", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CYCLE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BOX_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BOX_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BOX_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BOX_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRV_BOX_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRV_BOX_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRV_BOX_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRV_BOX_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WAFER_STATUS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAFER_STATUS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WAFER_STATUS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAFER_STATUS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LMT_STR_TIME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LMT_STR_TIME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LMT_STR_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LMT_STR_TIME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WAGON_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAGON_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WAGON_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAGON_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REP_OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REP_OPE_SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REPEAT_QNT", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REPEAT_QNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_MASK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_MASK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_MASK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_MASK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_STATUS2_SAVE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS2_SAVE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_STATUS2_SAVE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS2_SAVE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REAL_START", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_START", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REAL_START", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_START", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRO_TIME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRO_TIME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRO_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRO_TIME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SISAKU_FLG", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SISAKU_FLG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PARENT_LOT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARENT_LOT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PARENT_LOT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARENT_LOT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OPE_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_AREA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPE_AREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_AREA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OPE_CHG_FLG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_CHG_FLG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPE_CHG_FLG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_CHG_FLG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PLT_OPE_SEQ1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLT_OPE_SEQ1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLT_OPE_SEQ1", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLT_OPE_SEQ1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PLT_OPE_SEQ2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLT_OPE_SEQ2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLT_OPE_SEQ2", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLT_OPE_SEQ2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PILOT_QNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PILOT_QNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PILOT_QNT", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PILOT_QNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_QNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_QNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_QNT", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_QNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COMMENT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COMMENT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ROHM_ORDER_MODEL_NAME_O", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ROHM_ORDER_MODEL_NAME_O", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ROHM_ORDER_MODEL_NAME_O", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ROHM_ORDER_MODEL_NAME_O", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ORDER_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDER_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORDER_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDER_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FT_MODEL_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FT_MODEL_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FT_MODEL_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FT_MODEL_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TP_RANK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TP_RANK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TP_RANK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TP_RANK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WARI_STOCK_KBN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WARI_STOCK_KBN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WARI_STOCK_KBN", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WARI_STOCK_KBN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WARI_INSTRUCT_KBN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WARI_INSTRUCT_KBN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WARI_INSTRUCT_KBN", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WARI_INSTRUCT_KBN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FORM_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORM_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORM_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORM_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GOOD_PIECES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GOOD_PIECES", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BAD_PIECES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BAD_PIECES", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ShipTargetChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ShipTargetChipCount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ShipTargetChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ShipTargetChipCount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OfficialChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OfficialChipCount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OfficialChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OfficialChipCount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RestLotInitialChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialChipCount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RestLotInitialChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialChipCount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RestLotInitialInputMagazine", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialInputMagazine", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RestLotInitialInputMagazine", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialInputMagazine", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RestLotInitialInputFrame", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialInputFrame", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RestLotInitialInputFrame", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialInputFrame", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Section", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Section", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Section", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Section", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_InvoiceNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InvoiceNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InvoiceNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InvoiceNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckDBNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckDBNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckDBNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckDBNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckDBPNashi", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckDBPNashi", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckDBPNashi", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckDBPNashi", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckHajikiPullShaer", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckHajikiPullShaer", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckHajikiPullShaer", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckHajikiPullShaer", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckWBNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckWBNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckWBNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckWBNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckWBInsNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckWBInsNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckWBInsNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckWBInsNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckOSNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckOSNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckJudge", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckJudge", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckJudge", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckJudge", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckerPD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckerPD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckerPD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckerPD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckerQC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckerQC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckerQC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckerQC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCAQIIssueDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCAQIIssueDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCAQIIssueDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCAQIIssueDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckExceptOSNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckExceptOSNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCMainReasonExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCMainReasonExceptOSNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCMainReasonExceptOSNG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCMainReasonExceptOSNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCNGChipInExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGChipInExceptOSNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCNGChipInExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGChipInExceptOSNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCNGIncludeExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGIncludeExceptOSNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCNGIncludeExceptOSNG", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGIncludeExceptOSNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCNGJudgeExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGJudgeExceptOSNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCNGJudgeExceptOSNG", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGJudgeExceptOSNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCNGChipInGoodChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGChipInGoodChip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCNGChipInGoodChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGChipInGoodChip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCNGIncludeGoodChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGIncludeGoodChip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCNGIncludeGoodChip", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGIncludeGoodChip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCNGJudgeGoodChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGJudgeGoodChip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCNGJudgeGoodChip", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGJudgeGoodChip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATION_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATION_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATION_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATION_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SEND_FLG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_FLG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEND_FLG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_FLG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SEND_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEND_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[LOT1_TABLE] ([LOT_NO], [DVI_NO], [PRD_NAME], [IN_DAY], [OUT_DA"& _ 
                "Y], [OPE_SEQ], [PRD_PIECE], [INP_PIECE], [OUT_PIECE], [REAL_DAY], [BATCH_NO], [B"& _ 
                "ATCH_SUB], [MATER_NAME], [MATER_SNAME], [MAKER], [Y_LEVEL], [STATUS1], [STATUS2]"& _ 
                ", [CYCLE], [BOX_NO], [PRV_BOX_NO], [WAFER_STATUS], [LMT_STR_TIME], [WAGON_NO], ["& _ 
                "REP_OPE_SEQ], [REPEAT_QNT], [TOTAL_MASK], [STATUS2_SAVE], [REAL_START], [TRO_TIM"& _ 
                "E], [SISAKU_FLG], [PARENT_LOT], [OPE_AREA], [OPE_CHG_FLG], [PLT_OPE_SEQ1], [PLT_"& _ 
                "OPE_SEQ2], [PILOT_QNT], [TOTAL_QNT], [COMMENT], [ROHM_ORDER_MODEL_NAME_O], [ORDE"& _ 
                "R_NO], [FT_MODEL_NAME], [TP_RANK], [WARI_STOCK_KBN], [WARI_INSTRUCT_KBN], [FORM_"& _ 
                "NAME], [GOOD_PIECES], [BAD_PIECES], [ShipTargetChipCount], [OfficialChipCount], "& _ 
                "[RestLotInitialChipCount], [RestLotInitialInputMagazine], [RestLotInitialInputFr"& _ 
                "ame], [Section], [InvoiceNo], [QCCheckDBNG], [QCCheckDBPNashi], [QCCheckHajikiPu"& _ 
                "llShaer], [QCCheckWBNG], [QCCheckWBInsNG], [QCCheckOSNG], [QCCheckJudge], [QCChe"& _ 
                "ckerPD], [QCCheckerQC], [QCAQIIssueDate], [QCCheckExceptOSNG], [QCMainReasonExce"& _ 
                "ptOSNG], [QCNGChipInExceptOSNG], [QCNGIncludeExceptOSNG], [QCNGJudgeExceptOSNG],"& _ 
                " [QCNGChipInGoodChip], [QCNGIncludeGoodChip], [QCNGJudgeGoodChip], [CREATION_DAT"& _ 
                "E], [SEND_FLG], [SEND_DATE]) VALUES (@LOT_NO, @DVI_NO, @PRD_NAME, @IN_DAY, @OUT_"& _ 
                "DAY, @OPE_SEQ, @PRD_PIECE, @INP_PIECE, @OUT_PIECE, @REAL_DAY, @BATCH_NO, @BATCH_"& _ 
                "SUB, @MATER_NAME, @MATER_SNAME, @MAKER, @Y_LEVEL, @STATUS1, @STATUS2, @CYCLE, @B"& _ 
                "OX_NO, @PRV_BOX_NO, @WAFER_STATUS, @LMT_STR_TIME, @WAGON_NO, @REP_OPE_SEQ, @REPE"& _ 
                "AT_QNT, @TOTAL_MASK, @STATUS2_SAVE, @REAL_START, @TRO_TIME, @SISAKU_FLG, @PARENT"& _ 
                "_LOT, @OPE_AREA, @OPE_CHG_FLG, @PLT_OPE_SEQ1, @PLT_OPE_SEQ2, @PILOT_QNT, @TOTAL_"& _ 
                "QNT, @COMMENT, @ROHM_ORDER_MODEL_NAME_O, @ORDER_NO, @FT_MODEL_NAME, @TP_RANK, @W"& _ 
                "ARI_STOCK_KBN, @WARI_INSTRUCT_KBN, @FORM_NAME, @GOOD_PIECES, @BAD_PIECES, @ShipT"& _ 
                "argetChipCount, @OfficialChipCount, @RestLotInitialChipCount, @RestLotInitialInp"& _ 
                "utMagazine, @RestLotInitialInputFrame, @Section, @InvoiceNo, @QCCheckDBNG, @QCCh"& _ 
                "eckDBPNashi, @QCCheckHajikiPullShaer, @QCCheckWBNG, @QCCheckWBInsNG, @QCCheckOSN"& _ 
                "G, @QCCheckJudge, @QCCheckerPD, @QCCheckerQC, @QCAQIIssueDate, @QCCheckExceptOSN"& _ 
                "G, @QCMainReasonExceptOSNG, @QCNGChipInExceptOSNG, @QCNGIncludeExceptOSNG, @QCNG"& _ 
                "JudgeExceptOSNG, @QCNGChipInGoodChip, @QCNGIncludeGoodChip, @QCNGJudgeGoodChip, "& _ 
                "@CREATION_DATE, @SEND_FLG, @SEND_DATE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT LOT_NO, DVI_NO, PRD_NAME, IN_DAY"& _ 
                ", OUT_DAY, OPE_SEQ, PRD_PIECE, INP_PIECE, OUT_PIECE, REAL_DAY, BATCH_NO, BATCH_S"& _ 
                "UB, MATER_NAME, MATER_SNAME, MAKER, Y_LEVEL, STATUS1, STATUS2, CYCLE, BOX_NO, PR"& _ 
                "V_BOX_NO, WAFER_STATUS, LMT_STR_TIME, WAGON_NO, REP_OPE_SEQ, REPEAT_QNT, TOTAL_M"& _ 
                "ASK, STATUS2_SAVE, REAL_START, TRO_TIME, SISAKU_FLG, PARENT_LOT, OPE_AREA, OPE_C"& _ 
                "HG_FLG, PLT_OPE_SEQ1, PLT_OPE_SEQ2, PILOT_QNT, TOTAL_QNT, COMMENT, ROHM_ORDER_MO"& _ 
                "DEL_NAME_O, ORDER_NO, FT_MODEL_NAME, TP_RANK, WARI_STOCK_KBN, WARI_INSTRUCT_KBN,"& _ 
                " FORM_NAME, GOOD_PIECES, BAD_PIECES, ShipTargetChipCount, OfficialChipCount, Res"& _ 
                "tLotInitialChipCount, RestLotInitialInputMagazine, RestLotInitialInputFrame, Sec"& _ 
                "tion, InvoiceNo, QCCheckDBNG, QCCheckDBPNashi, QCCheckHajikiPullShaer, QCCheckWB"& _ 
                "NG, QCCheckWBInsNG, QCCheckOSNG, QCCheckJudge, QCCheckerPD, QCCheckerQC, QCAQIIs"& _ 
                "sueDate, QCCheckExceptOSNG, QCMainReasonExceptOSNG, QCNGChipInExceptOSNG, QCNGIn"& _ 
                "cludeExceptOSNG, QCNGJudgeExceptOSNG, QCNGChipInGoodChip, QCNGIncludeGoodChip, Q"& _ 
                "CNGJudgeGoodChip, CREATION_DATE, SEND_FLG, SEND_DATE FROM LOT1_TABLE WHERE (LOT_"& _ 
                "NO = @LOT_NO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DVI_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DVI_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRD_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRD_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_DAY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_DAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_DAY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_DAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRD_PIECE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRD_PIECE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INP_PIECE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INP_PIECE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_PIECE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_PIECE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REAL_DAY", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_DAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BATCH_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BATCH_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BATCH_SUB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BATCH_SUB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MATER_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATER_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MATER_SNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATER_SNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MAKER", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAKER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Y_LEVEL", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Y_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATUS1", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATUS2", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CYCLE", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CYCLE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BOX_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BOX_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRV_BOX_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRV_BOX_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WAFER_STATUS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAFER_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LMT_STR_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LMT_STR_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WAGON_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAGON_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REP_OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REP_OPE_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REPEAT_QNT", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REPEAT_QNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_MASK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_MASK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATUS2_SAVE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS2_SAVE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REAL_START", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_START", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRO_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRO_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SISAKU_FLG", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SISAKU_FLG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PARENT_LOT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARENT_LOT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPE_AREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_AREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPE_CHG_FLG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_CHG_FLG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLT_OPE_SEQ1", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLT_OPE_SEQ1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLT_OPE_SEQ2", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLT_OPE_SEQ2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PILOT_QNT", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PILOT_QNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_QNT", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_QNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ROHM_ORDER_MODEL_NAME_O", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ROHM_ORDER_MODEL_NAME_O", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDER_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDER_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FT_MODEL_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FT_MODEL_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TP_RANK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TP_RANK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WARI_STOCK_KBN", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WARI_STOCK_KBN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WARI_INSTRUCT_KBN", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WARI_INSTRUCT_KBN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORM_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORM_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GOOD_PIECES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GOOD_PIECES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BAD_PIECES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BAD_PIECES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ShipTargetChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ShipTargetChipCount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OfficialChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OfficialChipCount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RestLotInitialChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialChipCount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RestLotInitialInputMagazine", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialInputMagazine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RestLotInitialInputFrame", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialInputFrame", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Section", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Section", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InvoiceNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InvoiceNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckDBNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckDBNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckDBPNashi", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckDBPNashi", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckHajikiPullShaer", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckHajikiPullShaer", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckWBNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckWBNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckWBInsNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckWBInsNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckOSNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckJudge", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckJudge", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckerPD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckerPD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckerQC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckerQC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCAQIIssueDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCAQIIssueDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckExceptOSNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCMainReasonExceptOSNG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCMainReasonExceptOSNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCNGChipInExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGChipInExceptOSNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCNGIncludeExceptOSNG", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGIncludeExceptOSNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCNGJudgeExceptOSNG", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGJudgeExceptOSNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCNGChipInGoodChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGChipInGoodChip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCNGIncludeGoodChip", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGIncludeGoodChip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCNGJudgeGoodChip", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGJudgeGoodChip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATION_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATION_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEND_FLG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_FLG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEND_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[LOT1_TABLE] SET [LOT_NO] = @LOT_NO, [DVI_NO] = @DVI_NO, [PRD_NAME] "& _ 
                "= @PRD_NAME, [IN_DAY] = @IN_DAY, [OUT_DAY] = @OUT_DAY, [OPE_SEQ] = @OPE_SEQ, [PR"& _ 
                "D_PIECE] = @PRD_PIECE, [INP_PIECE] = @INP_PIECE, [OUT_PIECE] = @OUT_PIECE, [REAL"& _ 
                "_DAY] = @REAL_DAY, [BATCH_NO] = @BATCH_NO, [BATCH_SUB] = @BATCH_SUB, [MATER_NAME"& _ 
                "] = @MATER_NAME, [MATER_SNAME] = @MATER_SNAME, [MAKER] = @MAKER, [Y_LEVEL] = @Y_"& _ 
                "LEVEL, [STATUS1] = @STATUS1, [STATUS2] = @STATUS2, [CYCLE] = @CYCLE, [BOX_NO] = "& _ 
                "@BOX_NO, [PRV_BOX_NO] = @PRV_BOX_NO, [WAFER_STATUS] = @WAFER_STATUS, [LMT_STR_TI"& _ 
                "ME] = @LMT_STR_TIME, [WAGON_NO] = @WAGON_NO, [REP_OPE_SEQ] = @REP_OPE_SEQ, [REPE"& _ 
                "AT_QNT] = @REPEAT_QNT, [TOTAL_MASK] = @TOTAL_MASK, [STATUS2_SAVE] = @STATUS2_SAV"& _ 
                "E, [REAL_START] = @REAL_START, [TRO_TIME] = @TRO_TIME, [SISAKU_FLG] = @SISAKU_FL"& _ 
                "G, [PARENT_LOT] = @PARENT_LOT, [OPE_AREA] = @OPE_AREA, [OPE_CHG_FLG] = @OPE_CHG_"& _ 
                "FLG, [PLT_OPE_SEQ1] = @PLT_OPE_SEQ1, [PLT_OPE_SEQ2] = @PLT_OPE_SEQ2, [PILOT_QNT]"& _ 
                " = @PILOT_QNT, [TOTAL_QNT] = @TOTAL_QNT, [COMMENT] = @COMMENT, [ROHM_ORDER_MODEL"& _ 
                "_NAME_O] = @ROHM_ORDER_MODEL_NAME_O, [ORDER_NO] = @ORDER_NO, [FT_MODEL_NAME] = @"& _ 
                "FT_MODEL_NAME, [TP_RANK] = @TP_RANK, [WARI_STOCK_KBN] = @WARI_STOCK_KBN, [WARI_I"& _ 
                "NSTRUCT_KBN] = @WARI_INSTRUCT_KBN, [FORM_NAME] = @FORM_NAME, [GOOD_PIECES] = @GO"& _ 
                "OD_PIECES, [BAD_PIECES] = @BAD_PIECES, [ShipTargetChipCount] = @ShipTargetChipCo"& _ 
                "unt, [OfficialChipCount] = @OfficialChipCount, [RestLotInitialChipCount] = @Rest"& _ 
                "LotInitialChipCount, [RestLotInitialInputMagazine] = @RestLotInitialInputMagazin"& _ 
                "e, [RestLotInitialInputFrame] = @RestLotInitialInputFrame, [Section] = @Section,"& _ 
                " [InvoiceNo] = @InvoiceNo, [QCCheckDBNG] = @QCCheckDBNG, [QCCheckDBPNashi] = @QC"& _ 
                "CheckDBPNashi, [QCCheckHajikiPullShaer] = @QCCheckHajikiPullShaer, [QCCheckWBNG]"& _ 
                " = @QCCheckWBNG, [QCCheckWBInsNG] = @QCCheckWBInsNG, [QCCheckOSNG] = @QCCheckOSN"& _ 
                "G, [QCCheckJudge] = @QCCheckJudge, [QCCheckerPD] = @QCCheckerPD, [QCCheckerQC] ="& _ 
                " @QCCheckerQC, [QCAQIIssueDate] = @QCAQIIssueDate, [QCCheckExceptOSNG] = @QCChec"& _ 
                "kExceptOSNG, [QCMainReasonExceptOSNG] = @QCMainReasonExceptOSNG, [QCNGChipInExce"& _ 
                "ptOSNG] = @QCNGChipInExceptOSNG, [QCNGIncludeExceptOSNG] = @QCNGIncludeExceptOSN"& _ 
                "G, [QCNGJudgeExceptOSNG] = @QCNGJudgeExceptOSNG, [QCNGChipInGoodChip] = @QCNGChi"& _ 
                "pInGoodChip, [QCNGIncludeGoodChip] = @QCNGIncludeGoodChip, [QCNGJudgeGoodChip] ="& _ 
                " @QCNGJudgeGoodChip, [CREATION_DATE] = @CREATION_DATE, [SEND_FLG] = @SEND_FLG, ["& _ 
                "SEND_DATE] = @SEND_DATE WHERE (([LOT_NO] = @Original_LOT_NO) AND ([DVI_NO] = @Or"& _ 
                "iginal_DVI_NO) AND ([PRD_NAME] = @Original_PRD_NAME) AND ([IN_DAY] = @Original_I"& _ 
                "N_DAY) AND ([OUT_DAY] = @Original_OUT_DAY) AND ([OPE_SEQ] = @Original_OPE_SEQ) A"& _ 
                "ND ([PRD_PIECE] = @Original_PRD_PIECE) AND ([INP_PIECE] = @Original_INP_PIECE) A"& _ 
                "ND ([OUT_PIECE] = @Original_OUT_PIECE) AND ((@IsNull_REAL_DAY = 1 AND [REAL_DAY]"& _ 
                " IS NULL) OR ([REAL_DAY] = @Original_REAL_DAY)) AND ((@IsNull_BATCH_NO = 1 AND ["& _ 
                "BATCH_NO] IS NULL) OR ([BATCH_NO] = @Original_BATCH_NO)) AND ((@IsNull_BATCH_SUB"& _ 
                " = 1 AND [BATCH_SUB] IS NULL) OR ([BATCH_SUB] = @Original_BATCH_SUB)) AND ((@IsN"& _ 
                "ull_MATER_NAME = 1 AND [MATER_NAME] IS NULL) OR ([MATER_NAME] = @Original_MATER_"& _ 
                "NAME)) AND ((@IsNull_MATER_SNAME = 1 AND [MATER_SNAME] IS NULL) OR ([MATER_SNAME"& _ 
                "] = @Original_MATER_SNAME)) AND ((@IsNull_MAKER = 1 AND [MAKER] IS NULL) OR ([MA"& _ 
                "KER] = @Original_MAKER)) AND ([Y_LEVEL] = @Original_Y_LEVEL) AND ([STATUS1] = @O"& _ 
                "riginal_STATUS1) AND ([STATUS2] = @Original_STATUS2) AND ([CYCLE] = @Original_CY"& _ 
                "CLE) AND ((@IsNull_BOX_NO = 1 AND [BOX_NO] IS NULL) OR ([BOX_NO] = @Original_BOX"& _ 
                "_NO)) AND ((@IsNull_PRV_BOX_NO = 1 AND [PRV_BOX_NO] IS NULL) OR ([PRV_BOX_NO] = "& _ 
                "@Original_PRV_BOX_NO)) AND ((@IsNull_WAFER_STATUS = 1 AND [WAFER_STATUS] IS NULL"& _ 
                ") OR ([WAFER_STATUS] = @Original_WAFER_STATUS)) AND ((@IsNull_LMT_STR_TIME = 1 A"& _ 
                "ND [LMT_STR_TIME] IS NULL) OR ([LMT_STR_TIME] = @Original_LMT_STR_TIME)) AND ((@"& _ 
                "IsNull_WAGON_NO = 1 AND [WAGON_NO] IS NULL) OR ([WAGON_NO] = @Original_WAGON_NO)"& _ 
                ") AND ([REP_OPE_SEQ] = @Original_REP_OPE_SEQ) AND ([REPEAT_QNT] = @Original_REPE"& _ 
                "AT_QNT) AND ((@IsNull_TOTAL_MASK = 1 AND [TOTAL_MASK] IS NULL) OR ([TOTAL_MASK] "& _ 
                "= @Original_TOTAL_MASK)) AND ((@IsNull_STATUS2_SAVE = 1 AND [STATUS2_SAVE] IS NU"& _ 
                "LL) OR ([STATUS2_SAVE] = @Original_STATUS2_SAVE)) AND ((@IsNull_REAL_START = 1 A"& _ 
                "ND [REAL_START] IS NULL) OR ([REAL_START] = @Original_REAL_START)) AND ((@IsNull"& _ 
                "_TRO_TIME = 1 AND [TRO_TIME] IS NULL) OR ([TRO_TIME] = @Original_TRO_TIME)) AND "& _ 
                "([SISAKU_FLG] = @Original_SISAKU_FLG) AND ((@IsNull_PARENT_LOT = 1 AND [PARENT_L"& _ 
                "OT] IS NULL) OR ([PARENT_LOT] = @Original_PARENT_LOT)) AND ((@IsNull_OPE_AREA = "& _ 
                "1 AND [OPE_AREA] IS NULL) OR ([OPE_AREA] = @Original_OPE_AREA)) AND ((@IsNull_OP"& _ 
                "E_CHG_FLG = 1 AND [OPE_CHG_FLG] IS NULL) OR ([OPE_CHG_FLG] = @Original_OPE_CHG_F"& _ 
                "LG)) AND ((@IsNull_PLT_OPE_SEQ1 = 1 AND [PLT_OPE_SEQ1] IS NULL) OR ([PLT_OPE_SEQ"& _ 
                "1] = @Original_PLT_OPE_SEQ1)) AND ((@IsNull_PLT_OPE_SEQ2 = 1 AND [PLT_OPE_SEQ2] "& _ 
                "IS NULL) OR ([PLT_OPE_SEQ2] = @Original_PLT_OPE_SEQ2)) AND ((@IsNull_PILOT_QNT ="& _ 
                " 1 AND [PILOT_QNT] IS NULL) OR ([PILOT_QNT] = @Original_PILOT_QNT)) AND ((@IsNul"& _ 
                "l_TOTAL_QNT = 1 AND [TOTAL_QNT] IS NULL) OR ([TOTAL_QNT] = @Original_TOTAL_QNT))"& _ 
                " AND ((@IsNull_COMMENT = 1 AND [COMMENT] IS NULL) OR ([COMMENT] = @Original_COMM"& _ 
                "ENT)) AND ((@IsNull_ROHM_ORDER_MODEL_NAME_O = 1 AND [ROHM_ORDER_MODEL_NAME_O] IS"& _ 
                " NULL) OR ([ROHM_ORDER_MODEL_NAME_O] = @Original_ROHM_ORDER_MODEL_NAME_O)) AND ("& _ 
                "(@IsNull_ORDER_NO = 1 AND [ORDER_NO] IS NULL) OR ([ORDER_NO] = @Original_ORDER_N"& _ 
                "O)) AND ((@IsNull_FT_MODEL_NAME = 1 AND [FT_MODEL_NAME] IS NULL) OR ([FT_MODEL_N"& _ 
                "AME] = @Original_FT_MODEL_NAME)) AND ((@IsNull_TP_RANK = 1 AND [TP_RANK] IS NULL"& _ 
                ") OR ([TP_RANK] = @Original_TP_RANK)) AND ((@IsNull_WARI_STOCK_KBN = 1 AND [WARI"& _ 
                "_STOCK_KBN] IS NULL) OR ([WARI_STOCK_KBN] = @Original_WARI_STOCK_KBN)) AND ((@Is"& _ 
                "Null_WARI_INSTRUCT_KBN = 1 AND [WARI_INSTRUCT_KBN] IS NULL) OR ([WARI_INSTRUCT_K"& _ 
                "BN] = @Original_WARI_INSTRUCT_KBN)) AND ((@IsNull_FORM_NAME = 1 AND [FORM_NAME] "& _ 
                "IS NULL) OR ([FORM_NAME] = @Original_FORM_NAME)) AND ([GOOD_PIECES] = @Original_"& _ 
                "GOOD_PIECES) AND ([BAD_PIECES] = @Original_BAD_PIECES) AND ((@IsNull_ShipTargetC"& _ 
                "hipCount = 1 AND [ShipTargetChipCount] IS NULL) OR ([ShipTargetChipCount] = @Ori"& _ 
                "ginal_ShipTargetChipCount)) AND ((@IsNull_OfficialChipCount = 1 AND [OfficialChi"& _ 
                "pCount] IS NULL) OR ([OfficialChipCount] = @Original_OfficialChipCount)) AND ((@"& _ 
                "IsNull_RestLotInitialChipCount = 1 AND [RestLotInitialChipCount] IS NULL) OR ([R"& _ 
                "estLotInitialChipCount] = @Original_RestLotInitialChipCount)) AND ((@IsNull_Rest"& _ 
                "LotInitialInputMagazine = 1 AND [RestLotInitialInputMagazine] IS NULL) OR ([Rest"& _ 
                "LotInitialInputMagazine] = @Original_RestLotInitialInputMagazine)) AND ((@IsNull"& _ 
                "_RestLotInitialInputFrame = 1 AND [RestLotInitialInputFrame] IS NULL) OR ([RestL"& _ 
                "otInitialInputFrame] = @Original_RestLotInitialInputFrame)) AND ((@IsNull_Sectio"& _ 
                "n = 1 AND [Section] IS NULL) OR ([Section] = @Original_Section)) AND ((@IsNull_I"& _ 
                "nvoiceNo = 1 AND [InvoiceNo] IS NULL) OR ([InvoiceNo] = @Original_InvoiceNo)) AN"& _ 
                "D ((@IsNull_QCCheckDBNG = 1 AND [QCCheckDBNG] IS NULL) OR ([QCCheckDBNG] = @Orig"& _ 
                "inal_QCCheckDBNG)) AND ((@IsNull_QCCheckDBPNashi = 1 AND [QCCheckDBPNashi] IS NU"& _ 
                "LL) OR ([QCCheckDBPNashi] = @Original_QCCheckDBPNashi)) AND ((@IsNull_QCCheckHaj"& _ 
                "ikiPullShaer = 1 AND [QCCheckHajikiPullShaer] IS NULL) OR ([QCCheckHajikiPullSha"& _ 
                "er] = @Original_QCCheckHajikiPullShaer)) AND ((@IsNull_QCCheckWBNG = 1 AND [QCCh"& _ 
                "eckWBNG] IS NULL) OR ([QCCheckWBNG] = @Original_QCCheckWBNG)) AND ((@IsNull_QCCh"& _ 
                "eckWBInsNG = 1 AND [QCCheckWBInsNG] IS NULL) OR ([QCCheckWBInsNG] = @Original_QC"& _ 
                "CheckWBInsNG)) AND ((@IsNull_QCCheckOSNG = 1 AND [QCCheckOSNG] IS NULL) OR ([QCC"& _ 
                "heckOSNG] = @Original_QCCheckOSNG)) AND ((@IsNull_QCCheckJudge = 1 AND [QCCheckJ"& _ 
                "udge] IS NULL) OR ([QCCheckJudge] = @Original_QCCheckJudge)) AND ((@IsNull_QCChe"& _ 
                "ckerPD = 1 AND [QCCheckerPD] IS NULL) OR ([QCCheckerPD] = @Original_QCCheckerPD)"& _ 
                ") AND ((@IsNull_QCCheckerQC = 1 AND [QCCheckerQC] IS NULL) OR ([QCCheckerQC] = @"& _ 
                "Original_QCCheckerQC)) AND ((@IsNull_QCAQIIssueDate = 1 AND [QCAQIIssueDate] IS "& _ 
                "NULL) OR ([QCAQIIssueDate] = @Original_QCAQIIssueDate)) AND ((@IsNull_QCCheckExc"& _ 
                "eptOSNG = 1 AND [QCCheckExceptOSNG] IS NULL) OR ([QCCheckExceptOSNG] = @Original"& _ 
                "_QCCheckExceptOSNG)) AND ((@IsNull_QCMainReasonExceptOSNG = 1 AND [QCMainReasonE"& _ 
                "xceptOSNG] IS NULL) OR ([QCMainReasonExceptOSNG] = @Original_QCMainReasonExceptO"& _ 
                "SNG)) AND ((@IsNull_QCNGChipInExceptOSNG = 1 AND [QCNGChipInExceptOSNG] IS NULL)"& _ 
                " OR ([QCNGChipInExceptOSNG] = @Original_QCNGChipInExceptOSNG)) AND ((@IsNull_QCN"& _ 
                "GIncludeExceptOSNG = 1 AND [QCNGIncludeExceptOSNG] IS NULL) OR ([QCNGIncludeExce"& _ 
                "ptOSNG] = @Original_QCNGIncludeExceptOSNG)) AND ((@IsNull_QCNGJudgeExceptOSNG = "& _ 
                "1 AND [QCNGJudgeExceptOSNG] IS NULL) OR ([QCNGJudgeExceptOSNG] = @Original_QCNGJ"& _ 
                "udgeExceptOSNG)) AND ((@IsNull_QCNGChipInGoodChip = 1 AND [QCNGChipInGoodChip] I"& _ 
                "S NULL) OR ([QCNGChipInGoodChip] = @Original_QCNGChipInGoodChip)) AND ((@IsNull_"& _ 
                "QCNGIncludeGoodChip = 1 AND [QCNGIncludeGoodChip] IS NULL) OR ([QCNGIncludeGoodC"& _ 
                "hip] = @Original_QCNGIncludeGoodChip)) AND ((@IsNull_QCNGJudgeGoodChip = 1 AND ["& _ 
                "QCNGJudgeGoodChip] IS NULL) OR ([QCNGJudgeGoodChip] = @Original_QCNGJudgeGoodChi"& _ 
                "p)) AND ((@IsNull_CREATION_DATE = 1 AND [CREATION_DATE] IS NULL) OR ([CREATION_D"& _ 
                "ATE] = @Original_CREATION_DATE)) AND ((@IsNull_SEND_FLG = 1 AND [SEND_FLG] IS NU"& _ 
                "LL) OR ([SEND_FLG] = @Original_SEND_FLG)) AND ((@IsNull_SEND_DATE = 1 AND [SEND_"& _ 
                "DATE] IS NULL) OR ([SEND_DATE] = @Original_SEND_DATE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT LOT_NO, DVI_NO,"& _ 
                " PRD_NAME, IN_DAY, OUT_DAY, OPE_SEQ, PRD_PIECE, INP_PIECE, OUT_PIECE, REAL_DAY, "& _ 
                "BATCH_NO, BATCH_SUB, MATER_NAME, MATER_SNAME, MAKER, Y_LEVEL, STATUS1, STATUS2, "& _ 
                "CYCLE, BOX_NO, PRV_BOX_NO, WAFER_STATUS, LMT_STR_TIME, WAGON_NO, REP_OPE_SEQ, RE"& _ 
                "PEAT_QNT, TOTAL_MASK, STATUS2_SAVE, REAL_START, TRO_TIME, SISAKU_FLG, PARENT_LOT"& _ 
                ", OPE_AREA, OPE_CHG_FLG, PLT_OPE_SEQ1, PLT_OPE_SEQ2, PILOT_QNT, TOTAL_QNT, COMME"& _ 
                "NT, ROHM_ORDER_MODEL_NAME_O, ORDER_NO, FT_MODEL_NAME, TP_RANK, WARI_STOCK_KBN, W"& _ 
                "ARI_INSTRUCT_KBN, FORM_NAME, GOOD_PIECES, BAD_PIECES, ShipTargetChipCount, Offic"& _ 
                "ialChipCount, RestLotInitialChipCount, RestLotInitialInputMagazine, RestLotIniti"& _ 
                "alInputFrame, Section, InvoiceNo, QCCheckDBNG, QCCheckDBPNashi, QCCheckHajikiPul"& _ 
                "lShaer, QCCheckWBNG, QCCheckWBInsNG, QCCheckOSNG, QCCheckJudge, QCCheckerPD, QCC"& _ 
                "heckerQC, QCAQIIssueDate, QCCheckExceptOSNG, QCMainReasonExceptOSNG, QCNGChipInE"& _ 
                "xceptOSNG, QCNGIncludeExceptOSNG, QCNGJudgeExceptOSNG, QCNGChipInGoodChip, QCNGI"& _ 
                "ncludeGoodChip, QCNGJudgeGoodChip, CREATION_DATE, SEND_FLG, SEND_DATE FROM LOT1_"& _ 
                "TABLE WHERE (LOT_NO = @LOT_NO)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DVI_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DVI_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRD_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRD_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_DAY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_DAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_DAY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_DAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRD_PIECE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRD_PIECE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INP_PIECE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INP_PIECE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_PIECE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_PIECE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REAL_DAY", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_DAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BATCH_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BATCH_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BATCH_SUB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BATCH_SUB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MATER_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATER_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MATER_SNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATER_SNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MAKER", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAKER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Y_LEVEL", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Y_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATUS1", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATUS2", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CYCLE", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CYCLE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BOX_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BOX_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRV_BOX_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRV_BOX_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WAFER_STATUS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAFER_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LMT_STR_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LMT_STR_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WAGON_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAGON_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REP_OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REP_OPE_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REPEAT_QNT", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REPEAT_QNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_MASK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_MASK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATUS2_SAVE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS2_SAVE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REAL_START", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_START", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRO_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRO_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SISAKU_FLG", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SISAKU_FLG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PARENT_LOT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARENT_LOT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPE_AREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_AREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPE_CHG_FLG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_CHG_FLG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLT_OPE_SEQ1", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLT_OPE_SEQ1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLT_OPE_SEQ2", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLT_OPE_SEQ2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PILOT_QNT", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PILOT_QNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_QNT", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_QNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ROHM_ORDER_MODEL_NAME_O", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ROHM_ORDER_MODEL_NAME_O", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDER_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDER_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FT_MODEL_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FT_MODEL_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TP_RANK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TP_RANK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WARI_STOCK_KBN", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WARI_STOCK_KBN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WARI_INSTRUCT_KBN", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WARI_INSTRUCT_KBN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORM_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORM_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GOOD_PIECES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GOOD_PIECES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BAD_PIECES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BAD_PIECES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ShipTargetChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ShipTargetChipCount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OfficialChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OfficialChipCount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RestLotInitialChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialChipCount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RestLotInitialInputMagazine", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialInputMagazine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RestLotInitialInputFrame", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialInputFrame", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Section", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Section", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InvoiceNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InvoiceNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckDBNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckDBNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckDBPNashi", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckDBPNashi", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckHajikiPullShaer", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckHajikiPullShaer", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckWBNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckWBNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckWBInsNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckWBInsNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckOSNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckJudge", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckJudge", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckerPD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckerPD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckerQC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckerQC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCAQIIssueDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCAQIIssueDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckExceptOSNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCMainReasonExceptOSNG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCMainReasonExceptOSNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCNGChipInExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGChipInExceptOSNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCNGIncludeExceptOSNG", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGIncludeExceptOSNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCNGJudgeExceptOSNG", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGJudgeExceptOSNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCNGChipInGoodChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGChipInGoodChip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCNGIncludeGoodChip", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGIncludeGoodChip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCNGJudgeGoodChip", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGJudgeGoodChip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATION_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATION_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEND_FLG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_FLG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEND_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DVI_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DVI_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRD_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRD_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IN_DAY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_DAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OUT_DAY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_DAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRD_PIECE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRD_PIECE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INP_PIECE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INP_PIECE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OUT_PIECE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_PIECE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REAL_DAY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_DAY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REAL_DAY", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_DAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BATCH_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BATCH_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BATCH_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BATCH_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BATCH_SUB", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BATCH_SUB", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BATCH_SUB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BATCH_SUB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MATER_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATER_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MATER_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATER_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MATER_SNAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATER_SNAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MATER_SNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATER_SNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MAKER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAKER", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MAKER", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAKER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Y_LEVEL", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Y_LEVEL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_STATUS1", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_STATUS2", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CYCLE", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CYCLE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BOX_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BOX_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BOX_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BOX_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRV_BOX_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRV_BOX_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRV_BOX_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRV_BOX_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WAFER_STATUS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAFER_STATUS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WAFER_STATUS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAFER_STATUS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LMT_STR_TIME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LMT_STR_TIME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LMT_STR_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LMT_STR_TIME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WAGON_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAGON_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WAGON_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAGON_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REP_OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REP_OPE_SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REPEAT_QNT", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REPEAT_QNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_MASK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_MASK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_MASK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_MASK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_STATUS2_SAVE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS2_SAVE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_STATUS2_SAVE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS2_SAVE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REAL_START", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_START", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REAL_START", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_START", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRO_TIME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRO_TIME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRO_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRO_TIME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SISAKU_FLG", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SISAKU_FLG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PARENT_LOT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARENT_LOT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PARENT_LOT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARENT_LOT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OPE_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_AREA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPE_AREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_AREA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OPE_CHG_FLG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_CHG_FLG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPE_CHG_FLG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_CHG_FLG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PLT_OPE_SEQ1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLT_OPE_SEQ1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLT_OPE_SEQ1", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLT_OPE_SEQ1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PLT_OPE_SEQ2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLT_OPE_SEQ2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLT_OPE_SEQ2", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLT_OPE_SEQ2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PILOT_QNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PILOT_QNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PILOT_QNT", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PILOT_QNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_QNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_QNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_QNT", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_QNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COMMENT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COMMENT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ROHM_ORDER_MODEL_NAME_O", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ROHM_ORDER_MODEL_NAME_O", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ROHM_ORDER_MODEL_NAME_O", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ROHM_ORDER_MODEL_NAME_O", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ORDER_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDER_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORDER_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDER_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FT_MODEL_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FT_MODEL_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FT_MODEL_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FT_MODEL_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TP_RANK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TP_RANK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TP_RANK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TP_RANK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WARI_STOCK_KBN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WARI_STOCK_KBN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WARI_STOCK_KBN", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WARI_STOCK_KBN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WARI_INSTRUCT_KBN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WARI_INSTRUCT_KBN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WARI_INSTRUCT_KBN", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WARI_INSTRUCT_KBN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FORM_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORM_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORM_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORM_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GOOD_PIECES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GOOD_PIECES", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BAD_PIECES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BAD_PIECES", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ShipTargetChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ShipTargetChipCount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ShipTargetChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ShipTargetChipCount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OfficialChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OfficialChipCount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OfficialChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OfficialChipCount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RestLotInitialChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialChipCount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RestLotInitialChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialChipCount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RestLotInitialInputMagazine", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialInputMagazine", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RestLotInitialInputMagazine", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialInputMagazine", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RestLotInitialInputFrame", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialInputFrame", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RestLotInitialInputFrame", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialInputFrame", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Section", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Section", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Section", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Section", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_InvoiceNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InvoiceNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InvoiceNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InvoiceNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckDBNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckDBNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckDBNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckDBNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckDBPNashi", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckDBPNashi", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckDBPNashi", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckDBPNashi", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckHajikiPullShaer", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckHajikiPullShaer", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckHajikiPullShaer", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckHajikiPullShaer", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckWBNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckWBNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckWBNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckWBNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckWBInsNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckWBInsNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckWBInsNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckWBInsNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckOSNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckOSNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckJudge", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckJudge", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckJudge", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckJudge", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckerPD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckerPD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckerPD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckerPD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckerQC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckerQC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckerQC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckerQC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCAQIIssueDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCAQIIssueDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCAQIIssueDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCAQIIssueDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckExceptOSNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckExceptOSNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCMainReasonExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCMainReasonExceptOSNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCMainReasonExceptOSNG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCMainReasonExceptOSNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCNGChipInExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGChipInExceptOSNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCNGChipInExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGChipInExceptOSNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCNGIncludeExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGIncludeExceptOSNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCNGIncludeExceptOSNG", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGIncludeExceptOSNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCNGJudgeExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGJudgeExceptOSNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCNGJudgeExceptOSNG", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGJudgeExceptOSNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCNGChipInGoodChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGChipInGoodChip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCNGChipInGoodChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGChipInGoodChip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCNGIncludeGoodChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGIncludeGoodChip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCNGIncludeGoodChip", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGIncludeGoodChip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCNGJudgeGoodChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGJudgeGoodChip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCNGJudgeGoodChip", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGJudgeGoodChip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATION_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATION_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATION_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATION_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SEND_FLG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_FLG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEND_FLG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_FLG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SEND_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEND_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Rohm.Apcs.Tdc.My.MySettings.Default.APCSDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT LOT_NO, DVI_NO, PRD_NAME, IN_DAY, OUT_DAY, OPE_SEQ, PRD_PIECE, INP_PIECE, "& _ 
                "OUT_PIECE, REAL_DAY, BATCH_NO, BATCH_SUB, MATER_NAME, MATER_SNAME, MAKER, Y_LEVE"& _ 
                "L, STATUS1, STATUS2, CYCLE, BOX_NO, PRV_BOX_NO, WAFER_STATUS, LMT_STR_TIME, WAGO"& _ 
                "N_NO, REP_OPE_SEQ, REPEAT_QNT, TOTAL_MASK, STATUS2_SAVE, REAL_START, TRO_TIME, S"& _ 
                "ISAKU_FLG, PARENT_LOT, OPE_AREA, OPE_CHG_FLG, PLT_OPE_SEQ1, PLT_OPE_SEQ2, PILOT_"& _ 
                "QNT, TOTAL_QNT, COMMENT, ROHM_ORDER_MODEL_NAME_O, ORDER_NO, FT_MODEL_NAME, TP_RA"& _ 
                "NK, WARI_STOCK_KBN, WARI_INSTRUCT_KBN, FORM_NAME, GOOD_PIECES, BAD_PIECES, ShipT"& _ 
                "argetChipCount, OfficialChipCount, RestLotInitialChipCount, RestLotInitialInputM"& _ 
                "agazine, RestLotInitialInputFrame, Section, InvoiceNo, QCCheckDBNG, QCCheckDBPNa"& _ 
                "shi, QCCheckHajikiPullShaer, QCCheckWBNG, QCCheckWBInsNG, QCCheckOSNG, QCCheckJu"& _ 
                "dge, QCCheckerPD, QCCheckerQC, QCAQIIssueDate, QCCheckExceptOSNG, QCMainReasonEx"& _ 
                "ceptOSNG, QCNGChipInExceptOSNG, QCNGIncludeExceptOSNG, QCNGJudgeExceptOSNG, QCNG"& _ 
                "ChipInGoodChip, QCNGIncludeGoodChip, QCNGJudgeGoodChip, CREATION_DATE, SEND_FLG,"& _ 
                " SEND_DATE FROM dbo.LOT1_TABLE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT LOT_NO, DVI_NO, PRD_NAME, IN_DAY, OUT_DAY, OPE_SEQ, PRD_PIECE, INP_PIECE, "& _ 
                "OUT_PIECE, REAL_DAY, BATCH_NO, BATCH_SUB, MATER_NAME, MATER_SNAME, MAKER, Y_LEVE"& _ 
                "L, STATUS1, STATUS2, CYCLE, BOX_NO, PRV_BOX_NO, WAFER_STATUS, LMT_STR_TIME, WAGO"& _ 
                "N_NO, REP_OPE_SEQ, REPEAT_QNT, TOTAL_MASK, STATUS2_SAVE, REAL_START, TRO_TIME, S"& _ 
                "ISAKU_FLG, PARENT_LOT, OPE_AREA, OPE_CHG_FLG, PLT_OPE_SEQ1, PLT_OPE_SEQ2, PILOT_"& _ 
                "QNT, TOTAL_QNT, COMMENT, ROHM_ORDER_MODEL_NAME_O, ORDER_NO, FT_MODEL_NAME, TP_RA"& _ 
                "NK, WARI_STOCK_KBN, WARI_INSTRUCT_KBN, FORM_NAME, GOOD_PIECES, BAD_PIECES, ShipT"& _ 
                "argetChipCount, OfficialChipCount, RestLotInitialChipCount, RestLotInitialInputM"& _ 
                "agazine, RestLotInitialInputFrame, Section, InvoiceNo, QCCheckDBNG, QCCheckDBPNa"& _ 
                "shi, QCCheckHajikiPullShaer, QCCheckWBNG, QCCheckWBInsNG, QCCheckOSNG, QCCheckJu"& _ 
                "dge, QCCheckerPD, QCCheckerQC, QCAQIIssueDate, QCCheckExceptOSNG, QCMainReasonEx"& _ 
                "ceptOSNG, QCNGChipInExceptOSNG, QCNGIncludeExceptOSNG, QCNGJudgeExceptOSNG, QCNG"& _ 
                "ChipInGoodChip, QCNGIncludeGoodChip, QCNGJudgeGoodChip, CREATION_DATE, SEND_FLG,"& _ 
                " SEND_DATE FROM dbo.LOT1_TABLE WHERE LOT_NO = @LOT_NO"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 13, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As APCSDBDataSet.LOT1_TABLEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As APCSDBDataSet.LOT1_TABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As APCSDBDataSet.LOT1_TABLEDataTable = New APCSDBDataSet.LOT1_TABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByLotNo(ByVal dataTable As APCSDBDataSet.LOT1_TABLEDataTable, ByVal LOT_NO As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(LOT_NO,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByLotNo(ByVal LOT_NO As String) As APCSDBDataSet.LOT1_TABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(LOT_NO,String)
            End If
            Dim dataTable As APCSDBDataSet.LOT1_TABLEDataTable = New APCSDBDataSet.LOT1_TABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As APCSDBDataSet.LOT1_TABLEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As APCSDBDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "LOT1_TABLE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_LOT_NO As String,  _
                    ByVal Original_DVI_NO As Integer,  _
                    ByVal Original_PRD_NAME As String,  _
                    ByVal Original_IN_DAY As String,  _
                    ByVal Original_OUT_DAY As String,  _
                    ByVal Original_OPE_SEQ As Short,  _
                    ByVal Original_PRD_PIECE As Integer,  _
                    ByVal Original_INP_PIECE As Integer,  _
                    ByVal Original_OUT_PIECE As Integer,  _
                    ByVal Original_REAL_DAY As Global.System.Nullable(Of Date),  _
                    ByVal Original_BATCH_NO As String,  _
                    ByVal Original_BATCH_SUB As String,  _
                    ByVal Original_MATER_NAME As String,  _
                    ByVal Original_MATER_SNAME As String,  _
                    ByVal Original_MAKER As String,  _
                    ByVal Original_Y_LEVEL As String,  _
                    ByVal Original_STATUS1 As String,  _
                    ByVal Original_STATUS2 As String,  _
                    ByVal Original_CYCLE As Short,  _
                    ByVal Original_BOX_NO As String,  _
                    ByVal Original_PRV_BOX_NO As String,  _
                    ByVal Original_WAFER_STATUS As String,  _
                    ByVal Original_LMT_STR_TIME As Global.System.Nullable(Of Date),  _
                    ByVal Original_WAGON_NO As String,  _
                    ByVal Original_REP_OPE_SEQ As Short,  _
                    ByVal Original_REPEAT_QNT As Short,  _
                    ByVal Original_TOTAL_MASK As String,  _
                    ByVal Original_STATUS2_SAVE As String,  _
                    ByVal Original_REAL_START As Global.System.Nullable(Of Date),  _
                    ByVal Original_TRO_TIME As Global.System.Nullable(Of Date),  _
                    ByVal Original_SISAKU_FLG As String,  _
                    ByVal Original_PARENT_LOT As String,  _
                    ByVal Original_OPE_AREA As String,  _
                    ByVal Original_OPE_CHG_FLG As String,  _
                    ByVal Original_PLT_OPE_SEQ1 As Global.System.Nullable(Of Short),  _
                    ByVal Original_PLT_OPE_SEQ2 As Global.System.Nullable(Of Short),  _
                    ByVal Original_PILOT_QNT As Global.System.Nullable(Of Short),  _
                    ByVal Original_TOTAL_QNT As Global.System.Nullable(Of Short),  _
                    ByVal Original_COMMENT As String,  _
                    ByVal Original_ROHM_ORDER_MODEL_NAME_O As String,  _
                    ByVal Original_ORDER_NO As String,  _
                    ByVal Original_FT_MODEL_NAME As String,  _
                    ByVal Original_TP_RANK As String,  _
                    ByVal Original_WARI_STOCK_KBN As Global.System.Nullable(Of Short),  _
                    ByVal Original_WARI_INSTRUCT_KBN As Global.System.Nullable(Of Short),  _
                    ByVal Original_FORM_NAME As String,  _
                    ByVal Original_GOOD_PIECES As Integer,  _
                    ByVal Original_BAD_PIECES As Integer,  _
                    ByVal Original_ShipTargetChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal Original_OfficialChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal Original_RestLotInitialChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal Original_RestLotInitialInputMagazine As Global.System.Nullable(Of Short),  _
                    ByVal Original_RestLotInitialInputFrame As Global.System.Nullable(Of Short),  _
                    ByVal Original_Section As String,  _
                    ByVal Original_InvoiceNo As String,  _
                    ByVal Original_QCCheckDBNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckDBPNashi As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckHajikiPullShaer As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckWBNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckWBInsNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckJudge As Global.System.Nullable(Of Short),  _
                    ByVal Original_QCCheckerPD As String,  _
                    ByVal Original_QCCheckerQC As String,  _
                    ByVal Original_QCAQIIssueDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_QCCheckExceptOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCMainReasonExceptOSNG As String,  _
                    ByVal Original_QCNGChipInExceptOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCNGIncludeExceptOSNG As Global.System.Nullable(Of Short),  _
                    ByVal Original_QCNGJudgeExceptOSNG As Global.System.Nullable(Of Short),  _
                    ByVal Original_QCNGChipInGoodChip As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCNGIncludeGoodChip As Global.System.Nullable(Of Short),  _
                    ByVal Original_QCNGJudgeGoodChip As Global.System.Nullable(Of Short),  _
                    ByVal Original_CREATION_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_SEND_FLG As String,  _
                    ByVal Original_SEND_DATE As Global.System.Nullable(Of Date)) As Integer
            If (Original_LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOT_NO")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_LOT_NO,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_DVI_NO,Integer)
            If (Original_PRD_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRD_NAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PRD_NAME,String)
            End If
            If (Original_IN_DAY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IN_DAY")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_IN_DAY,String)
            End If
            If (Original_OUT_DAY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_OUT_DAY")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_OUT_DAY,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_OPE_SEQ,Short)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_PRD_PIECE,Integer)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_INP_PIECE,Integer)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_OUT_PIECE,Integer)
            If (Original_REAL_DAY.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_REAL_DAY.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_BATCH_NO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_BATCH_NO,String)
            End If
            If (Original_BATCH_SUB Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_BATCH_SUB,String)
            End If
            If (Original_MATER_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_MATER_NAME,String)
            End If
            If (Original_MATER_SNAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_MATER_SNAME,String)
            End If
            If (Original_MAKER Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_MAKER,String)
            End If
            If (Original_Y_LEVEL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Y_LEVEL")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_Y_LEVEL,String)
            End If
            If (Original_STATUS1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STATUS1")
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_STATUS1,String)
            End If
            If (Original_STATUS2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STATUS2")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_STATUS2,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_CYCLE,Short)
            If (Original_BOX_NO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_BOX_NO,String)
            End If
            If (Original_PRV_BOX_NO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_PRV_BOX_NO,String)
            End If
            If (Original_WAFER_STATUS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_WAFER_STATUS,String)
            End If
            If (Original_LMT_STR_TIME.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_LMT_STR_TIME.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_WAGON_NO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_WAGON_NO,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(35).Value = CType(Original_REP_OPE_SEQ,Short)
            Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_REPEAT_QNT,Short)
            If (Original_TOTAL_MASK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_TOTAL_MASK,String)
            End If
            If (Original_STATUS2_SAVE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_STATUS2_SAVE,String)
            End If
            If (Original_REAL_START.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_REAL_START.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_TRO_TIME.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_TRO_TIME.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_SISAKU_FLG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SISAKU_FLG")
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(Original_SISAKU_FLG,String)
            End If
            If (Original_PARENT_LOT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(Original_PARENT_LOT,String)
            End If
            If (Original_OPE_AREA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(Original_OPE_AREA,String)
            End If
            If (Original_OPE_CHG_FLG Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(Original_OPE_CHG_FLG,String)
            End If
            If (Original_PLT_OPE_SEQ1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(Original_PLT_OPE_SEQ1.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (Original_PLT_OPE_SEQ2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(Original_PLT_OPE_SEQ2.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (Original_PILOT_QNT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(Original_PILOT_QNT.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (Original_TOTAL_QNT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(Original_TOTAL_QNT.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (Original_COMMENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(Original_COMMENT,String)
            End If
            If (Original_ROHM_ORDER_MODEL_NAME_O Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(63).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(Original_ROHM_ORDER_MODEL_NAME_O,String)
            End If
            If (Original_ORDER_NO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(65).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(65).Value = CType(Original_ORDER_NO,String)
            End If
            If (Original_FT_MODEL_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(67).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(Original_FT_MODEL_NAME,String)
            End If
            If (Original_TP_RANK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(69).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(Original_TP_RANK,String)
            End If
            If (Original_WARI_STOCK_KBN.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(71).Value = CType(Original_WARI_STOCK_KBN.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(70).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(71).Value = Global.System.DBNull.Value
            End If
            If (Original_WARI_INSTRUCT_KBN.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(72).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(Original_WARI_INSTRUCT_KBN.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(72).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(73).Value = Global.System.DBNull.Value
            End If
            If (Original_FORM_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(74).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(75).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(74).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(Original_FORM_NAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(76).Value = CType(Original_GOOD_PIECES,Integer)
            Me.Adapter.DeleteCommand.Parameters(77).Value = CType(Original_BAD_PIECES,Integer)
            If (Original_ShipTargetChipCount.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(78).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(79).Value = CType(Original_ShipTargetChipCount.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(78).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(79).Value = Global.System.DBNull.Value
            End If
            If (Original_OfficialChipCount.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(80).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(81).Value = CType(Original_OfficialChipCount.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(80).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(81).Value = Global.System.DBNull.Value
            End If
            If (Original_RestLotInitialChipCount.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(82).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(83).Value = CType(Original_RestLotInitialChipCount.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(82).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(83).Value = Global.System.DBNull.Value
            End If
            If (Original_RestLotInitialInputMagazine.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(84).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(85).Value = CType(Original_RestLotInitialInputMagazine.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(84).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(85).Value = Global.System.DBNull.Value
            End If
            If (Original_RestLotInitialInputFrame.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(86).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(87).Value = CType(Original_RestLotInitialInputFrame.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(86).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(87).Value = Global.System.DBNull.Value
            End If
            If (Original_Section Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(88).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(89).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(88).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(89).Value = CType(Original_Section,String)
            End If
            If (Original_InvoiceNo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(90).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(91).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(90).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(91).Value = CType(Original_InvoiceNo,String)
            End If
            If (Original_QCCheckDBNG.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(92).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(93).Value = CType(Original_QCCheckDBNG.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(92).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(93).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckDBPNashi.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(94).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(95).Value = CType(Original_QCCheckDBPNashi.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(94).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(95).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckHajikiPullShaer.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(96).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(97).Value = CType(Original_QCCheckHajikiPullShaer.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(96).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(97).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckWBNG.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(98).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(99).Value = CType(Original_QCCheckWBNG.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(98).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(99).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckWBInsNG.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(100).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(101).Value = CType(Original_QCCheckWBInsNG.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(100).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(101).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckOSNG.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(102).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(103).Value = CType(Original_QCCheckOSNG.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(102).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(103).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckJudge.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(104).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(105).Value = CType(Original_QCCheckJudge.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(104).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(105).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckerPD Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(106).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(107).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(106).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(107).Value = CType(Original_QCCheckerPD,String)
            End If
            If (Original_QCCheckerQC Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(108).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(109).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(108).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(109).Value = CType(Original_QCCheckerQC,String)
            End If
            If (Original_QCAQIIssueDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(110).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(111).Value = CType(Original_QCAQIIssueDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(110).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(111).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckExceptOSNG.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(112).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(113).Value = CType(Original_QCCheckExceptOSNG.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(112).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(113).Value = Global.System.DBNull.Value
            End If
            If (Original_QCMainReasonExceptOSNG Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(114).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(115).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(114).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(115).Value = CType(Original_QCMainReasonExceptOSNG,String)
            End If
            If (Original_QCNGChipInExceptOSNG.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(116).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(117).Value = CType(Original_QCNGChipInExceptOSNG.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(116).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(117).Value = Global.System.DBNull.Value
            End If
            If (Original_QCNGIncludeExceptOSNG.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(118).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(119).Value = CType(Original_QCNGIncludeExceptOSNG.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(118).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(119).Value = Global.System.DBNull.Value
            End If
            If (Original_QCNGJudgeExceptOSNG.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(120).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(121).Value = CType(Original_QCNGJudgeExceptOSNG.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(120).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(121).Value = Global.System.DBNull.Value
            End If
            If (Original_QCNGChipInGoodChip.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(122).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(123).Value = CType(Original_QCNGChipInGoodChip.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(122).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(123).Value = Global.System.DBNull.Value
            End If
            If (Original_QCNGIncludeGoodChip.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(124).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(125).Value = CType(Original_QCNGIncludeGoodChip.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(124).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(125).Value = Global.System.DBNull.Value
            End If
            If (Original_QCNGJudgeGoodChip.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(126).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(127).Value = CType(Original_QCNGJudgeGoodChip.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(126).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(127).Value = Global.System.DBNull.Value
            End If
            If (Original_CREATION_DATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(128).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(129).Value = CType(Original_CREATION_DATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(128).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(129).Value = Global.System.DBNull.Value
            End If
            If (Original_SEND_FLG Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(130).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(131).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(130).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(131).Value = CType(Original_SEND_FLG,String)
            End If
            If (Original_SEND_DATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(132).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(133).Value = CType(Original_SEND_DATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(132).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(133).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal LOT_NO As String,  _
                    ByVal DVI_NO As Integer,  _
                    ByVal PRD_NAME As String,  _
                    ByVal IN_DAY As String,  _
                    ByVal OUT_DAY As String,  _
                    ByVal OPE_SEQ As Short,  _
                    ByVal PRD_PIECE As Integer,  _
                    ByVal INP_PIECE As Integer,  _
                    ByVal OUT_PIECE As Integer,  _
                    ByVal REAL_DAY As Global.System.Nullable(Of Date),  _
                    ByVal BATCH_NO As String,  _
                    ByVal BATCH_SUB As String,  _
                    ByVal MATER_NAME As String,  _
                    ByVal MATER_SNAME As String,  _
                    ByVal MAKER As String,  _
                    ByVal Y_LEVEL As String,  _
                    ByVal STATUS1 As String,  _
                    ByVal STATUS2 As String,  _
                    ByVal CYCLE As Short,  _
                    ByVal BOX_NO As String,  _
                    ByVal PRV_BOX_NO As String,  _
                    ByVal WAFER_STATUS As String,  _
                    ByVal LMT_STR_TIME As Global.System.Nullable(Of Date),  _
                    ByVal WAGON_NO As String,  _
                    ByVal REP_OPE_SEQ As Short,  _
                    ByVal REPEAT_QNT As Short,  _
                    ByVal TOTAL_MASK As String,  _
                    ByVal STATUS2_SAVE As String,  _
                    ByVal REAL_START As Global.System.Nullable(Of Date),  _
                    ByVal TRO_TIME As Global.System.Nullable(Of Date),  _
                    ByVal SISAKU_FLG As String,  _
                    ByVal PARENT_LOT As String,  _
                    ByVal OPE_AREA As String,  _
                    ByVal OPE_CHG_FLG As String,  _
                    ByVal PLT_OPE_SEQ1 As Global.System.Nullable(Of Short),  _
                    ByVal PLT_OPE_SEQ2 As Global.System.Nullable(Of Short),  _
                    ByVal PILOT_QNT As Global.System.Nullable(Of Short),  _
                    ByVal TOTAL_QNT As Global.System.Nullable(Of Short),  _
                    ByVal COMMENT As String,  _
                    ByVal ROHM_ORDER_MODEL_NAME_O As String,  _
                    ByVal ORDER_NO As String,  _
                    ByVal FT_MODEL_NAME As String,  _
                    ByVal TP_RANK As String,  _
                    ByVal WARI_STOCK_KBN As Global.System.Nullable(Of Short),  _
                    ByVal WARI_INSTRUCT_KBN As Global.System.Nullable(Of Short),  _
                    ByVal FORM_NAME As String,  _
                    ByVal GOOD_PIECES As Integer,  _
                    ByVal BAD_PIECES As Integer,  _
                    ByVal ShipTargetChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal OfficialChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal RestLotInitialChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal RestLotInitialInputMagazine As Global.System.Nullable(Of Short),  _
                    ByVal RestLotInitialInputFrame As Global.System.Nullable(Of Short),  _
                    ByVal Section As String,  _
                    ByVal InvoiceNo As String,  _
                    ByVal QCCheckDBNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckDBPNashi As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckHajikiPullShaer As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckWBNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckWBInsNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckJudge As Global.System.Nullable(Of Short),  _
                    ByVal QCCheckerPD As String,  _
                    ByVal QCCheckerQC As String,  _
                    ByVal QCAQIIssueDate As Global.System.Nullable(Of Date),  _
                    ByVal QCCheckExceptOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCMainReasonExceptOSNG As String,  _
                    ByVal QCNGChipInExceptOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCNGIncludeExceptOSNG As Global.System.Nullable(Of Short),  _
                    ByVal QCNGJudgeExceptOSNG As Global.System.Nullable(Of Short),  _
                    ByVal QCNGChipInGoodChip As Global.System.Nullable(Of Integer),  _
                    ByVal QCNGIncludeGoodChip As Global.System.Nullable(Of Short),  _
                    ByVal QCNGJudgeGoodChip As Global.System.Nullable(Of Short),  _
                    ByVal CREATION_DATE As Global.System.Nullable(Of Date),  _
                    ByVal SEND_FLG As String,  _
                    ByVal SEND_DATE As Global.System.Nullable(Of Date)) As Integer
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(LOT_NO,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(DVI_NO,Integer)
            If (PRD_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRD_NAME")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PRD_NAME,String)
            End If
            If (IN_DAY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IN_DAY")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(IN_DAY,String)
            End If
            If (OUT_DAY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OUT_DAY")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(OUT_DAY,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(OPE_SEQ,Short)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(PRD_PIECE,Integer)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(INP_PIECE,Integer)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(OUT_PIECE,Integer)
            If (REAL_DAY.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(REAL_DAY.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (BATCH_NO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(BATCH_NO,String)
            End If
            If (BATCH_SUB Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(BATCH_SUB,String)
            End If
            If (MATER_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(MATER_NAME,String)
            End If
            If (MATER_SNAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(MATER_SNAME,String)
            End If
            If (MAKER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(MAKER,String)
            End If
            If (Y_LEVEL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Y_LEVEL")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Y_LEVEL,String)
            End If
            If (STATUS1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STATUS1")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(STATUS1,String)
            End If
            If (STATUS2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STATUS2")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(STATUS2,String)
            End If
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(CYCLE,Short)
            If (BOX_NO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(BOX_NO,String)
            End If
            If (PRV_BOX_NO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(PRV_BOX_NO,String)
            End If
            If (WAFER_STATUS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(WAFER_STATUS,String)
            End If
            If (LMT_STR_TIME.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(LMT_STR_TIME.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (WAGON_NO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(WAGON_NO,String)
            End If
            Me.Adapter.InsertCommand.Parameters(24).Value = CType(REP_OPE_SEQ,Short)
            Me.Adapter.InsertCommand.Parameters(25).Value = CType(REPEAT_QNT,Short)
            If (TOTAL_MASK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(TOTAL_MASK,String)
            End If
            If (STATUS2_SAVE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(STATUS2_SAVE,String)
            End If
            If (REAL_START.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(REAL_START.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (TRO_TIME.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(TRO_TIME.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (SISAKU_FLG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SISAKU_FLG")
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(SISAKU_FLG,String)
            End If
            If (PARENT_LOT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(PARENT_LOT,String)
            End If
            If (OPE_AREA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(OPE_AREA,String)
            End If
            If (OPE_CHG_FLG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(OPE_CHG_FLG,String)
            End If
            If (PLT_OPE_SEQ1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(PLT_OPE_SEQ1.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (PLT_OPE_SEQ2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(PLT_OPE_SEQ2.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (PILOT_QNT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(PILOT_QNT.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_QNT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(TOTAL_QNT.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (COMMENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(COMMENT,String)
            End If
            If (ROHM_ORDER_MODEL_NAME_O Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(ROHM_ORDER_MODEL_NAME_O,String)
            End If
            If (ORDER_NO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(ORDER_NO,String)
            End If
            If (FT_MODEL_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(FT_MODEL_NAME,String)
            End If
            If (TP_RANK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(TP_RANK,String)
            End If
            If (WARI_STOCK_KBN.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(WARI_STOCK_KBN.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (WARI_INSTRUCT_KBN.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(WARI_INSTRUCT_KBN.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (FORM_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(FORM_NAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(46).Value = CType(GOOD_PIECES,Integer)
            Me.Adapter.InsertCommand.Parameters(47).Value = CType(BAD_PIECES,Integer)
            If (ShipTargetChipCount.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(ShipTargetChipCount.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (OfficialChipCount.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(OfficialChipCount.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (RestLotInitialChipCount.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(RestLotInitialChipCount.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (RestLotInitialInputMagazine.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(RestLotInitialInputMagazine.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (RestLotInitialInputFrame.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(RestLotInitialInputFrame.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (Section Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(Section,String)
            End If
            If (InvoiceNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(InvoiceNo,String)
            End If
            If (QCCheckDBNG.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(QCCheckDBNG.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (QCCheckDBPNashi.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(56).Value = CType(QCCheckDBPNashi.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (QCCheckHajikiPullShaer.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(57).Value = CType(QCCheckHajikiPullShaer.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (QCCheckWBNG.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(58).Value = CType(QCCheckWBNG.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (QCCheckWBInsNG.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(59).Value = CType(QCCheckWBInsNG.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (QCCheckOSNG.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(60).Value = CType(QCCheckOSNG.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (QCCheckJudge.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(61).Value = CType(QCCheckJudge.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (QCCheckerPD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(62).Value = CType(QCCheckerPD,String)
            End If
            If (QCCheckerQC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(63).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(63).Value = CType(QCCheckerQC,String)
            End If
            If (QCAQIIssueDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(64).Value = CType(QCAQIIssueDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (QCCheckExceptOSNG.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(65).Value = CType(QCCheckExceptOSNG.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (QCMainReasonExceptOSNG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(66).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(66).Value = CType(QCMainReasonExceptOSNG,String)
            End If
            If (QCNGChipInExceptOSNG.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(67).Value = CType(QCNGChipInExceptOSNG.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (QCNGIncludeExceptOSNG.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(68).Value = CType(QCNGIncludeExceptOSNG.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(68).Value = Global.System.DBNull.Value
            End If
            If (QCNGJudgeExceptOSNG.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(69).Value = CType(QCNGJudgeExceptOSNG.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            If (QCNGChipInGoodChip.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(70).Value = CType(QCNGChipInGoodChip.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(70).Value = Global.System.DBNull.Value
            End If
            If (QCNGIncludeGoodChip.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(71).Value = CType(QCNGIncludeGoodChip.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(71).Value = Global.System.DBNull.Value
            End If
            If (QCNGJudgeGoodChip.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(72).Value = CType(QCNGJudgeGoodChip.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(72).Value = Global.System.DBNull.Value
            End If
            If (CREATION_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(73).Value = CType(CREATION_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(73).Value = Global.System.DBNull.Value
            End If
            If (SEND_FLG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(74).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(74).Value = CType(SEND_FLG,String)
            End If
            If (SEND_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(75).Value = CType(SEND_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(75).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal LOT_NO As String,  _
                    ByVal DVI_NO As Integer,  _
                    ByVal PRD_NAME As String,  _
                    ByVal IN_DAY As String,  _
                    ByVal OUT_DAY As String,  _
                    ByVal OPE_SEQ As Short,  _
                    ByVal PRD_PIECE As Integer,  _
                    ByVal INP_PIECE As Integer,  _
                    ByVal OUT_PIECE As Integer,  _
                    ByVal REAL_DAY As Global.System.Nullable(Of Date),  _
                    ByVal BATCH_NO As String,  _
                    ByVal BATCH_SUB As String,  _
                    ByVal MATER_NAME As String,  _
                    ByVal MATER_SNAME As String,  _
                    ByVal MAKER As String,  _
                    ByVal Y_LEVEL As String,  _
                    ByVal STATUS1 As String,  _
                    ByVal STATUS2 As String,  _
                    ByVal CYCLE As Short,  _
                    ByVal BOX_NO As String,  _
                    ByVal PRV_BOX_NO As String,  _
                    ByVal WAFER_STATUS As String,  _
                    ByVal LMT_STR_TIME As Global.System.Nullable(Of Date),  _
                    ByVal WAGON_NO As String,  _
                    ByVal REP_OPE_SEQ As Short,  _
                    ByVal REPEAT_QNT As Short,  _
                    ByVal TOTAL_MASK As String,  _
                    ByVal STATUS2_SAVE As String,  _
                    ByVal REAL_START As Global.System.Nullable(Of Date),  _
                    ByVal TRO_TIME As Global.System.Nullable(Of Date),  _
                    ByVal SISAKU_FLG As String,  _
                    ByVal PARENT_LOT As String,  _
                    ByVal OPE_AREA As String,  _
                    ByVal OPE_CHG_FLG As String,  _
                    ByVal PLT_OPE_SEQ1 As Global.System.Nullable(Of Short),  _
                    ByVal PLT_OPE_SEQ2 As Global.System.Nullable(Of Short),  _
                    ByVal PILOT_QNT As Global.System.Nullable(Of Short),  _
                    ByVal TOTAL_QNT As Global.System.Nullable(Of Short),  _
                    ByVal COMMENT As String,  _
                    ByVal ROHM_ORDER_MODEL_NAME_O As String,  _
                    ByVal ORDER_NO As String,  _
                    ByVal FT_MODEL_NAME As String,  _
                    ByVal TP_RANK As String,  _
                    ByVal WARI_STOCK_KBN As Global.System.Nullable(Of Short),  _
                    ByVal WARI_INSTRUCT_KBN As Global.System.Nullable(Of Short),  _
                    ByVal FORM_NAME As String,  _
                    ByVal GOOD_PIECES As Integer,  _
                    ByVal BAD_PIECES As Integer,  _
                    ByVal ShipTargetChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal OfficialChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal RestLotInitialChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal RestLotInitialInputMagazine As Global.System.Nullable(Of Short),  _
                    ByVal RestLotInitialInputFrame As Global.System.Nullable(Of Short),  _
                    ByVal Section As String,  _
                    ByVal InvoiceNo As String,  _
                    ByVal QCCheckDBNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckDBPNashi As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckHajikiPullShaer As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckWBNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckWBInsNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckJudge As Global.System.Nullable(Of Short),  _
                    ByVal QCCheckerPD As String,  _
                    ByVal QCCheckerQC As String,  _
                    ByVal QCAQIIssueDate As Global.System.Nullable(Of Date),  _
                    ByVal QCCheckExceptOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCMainReasonExceptOSNG As String,  _
                    ByVal QCNGChipInExceptOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCNGIncludeExceptOSNG As Global.System.Nullable(Of Short),  _
                    ByVal QCNGJudgeExceptOSNG As Global.System.Nullable(Of Short),  _
                    ByVal QCNGChipInGoodChip As Global.System.Nullable(Of Integer),  _
                    ByVal QCNGIncludeGoodChip As Global.System.Nullable(Of Short),  _
                    ByVal QCNGJudgeGoodChip As Global.System.Nullable(Of Short),  _
                    ByVal CREATION_DATE As Global.System.Nullable(Of Date),  _
                    ByVal SEND_FLG As String,  _
                    ByVal SEND_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_LOT_NO As String,  _
                    ByVal Original_DVI_NO As Integer,  _
                    ByVal Original_PRD_NAME As String,  _
                    ByVal Original_IN_DAY As String,  _
                    ByVal Original_OUT_DAY As String,  _
                    ByVal Original_OPE_SEQ As Short,  _
                    ByVal Original_PRD_PIECE As Integer,  _
                    ByVal Original_INP_PIECE As Integer,  _
                    ByVal Original_OUT_PIECE As Integer,  _
                    ByVal Original_REAL_DAY As Global.System.Nullable(Of Date),  _
                    ByVal Original_BATCH_NO As String,  _
                    ByVal Original_BATCH_SUB As String,  _
                    ByVal Original_MATER_NAME As String,  _
                    ByVal Original_MATER_SNAME As String,  _
                    ByVal Original_MAKER As String,  _
                    ByVal Original_Y_LEVEL As String,  _
                    ByVal Original_STATUS1 As String,  _
                    ByVal Original_STATUS2 As String,  _
                    ByVal Original_CYCLE As Short,  _
                    ByVal Original_BOX_NO As String,  _
                    ByVal Original_PRV_BOX_NO As String,  _
                    ByVal Original_WAFER_STATUS As String,  _
                    ByVal Original_LMT_STR_TIME As Global.System.Nullable(Of Date),  _
                    ByVal Original_WAGON_NO As String,  _
                    ByVal Original_REP_OPE_SEQ As Short,  _
                    ByVal Original_REPEAT_QNT As Short,  _
                    ByVal Original_TOTAL_MASK As String,  _
                    ByVal Original_STATUS2_SAVE As String,  _
                    ByVal Original_REAL_START As Global.System.Nullable(Of Date),  _
                    ByVal Original_TRO_TIME As Global.System.Nullable(Of Date),  _
                    ByVal Original_SISAKU_FLG As String,  _
                    ByVal Original_PARENT_LOT As String,  _
                    ByVal Original_OPE_AREA As String,  _
                    ByVal Original_OPE_CHG_FLG As String,  _
                    ByVal Original_PLT_OPE_SEQ1 As Global.System.Nullable(Of Short),  _
                    ByVal Original_PLT_OPE_SEQ2 As Global.System.Nullable(Of Short),  _
                    ByVal Original_PILOT_QNT As Global.System.Nullable(Of Short),  _
                    ByVal Original_TOTAL_QNT As Global.System.Nullable(Of Short),  _
                    ByVal Original_COMMENT As String,  _
                    ByVal Original_ROHM_ORDER_MODEL_NAME_O As String,  _
                    ByVal Original_ORDER_NO As String,  _
                    ByVal Original_FT_MODEL_NAME As String,  _
                    ByVal Original_TP_RANK As String,  _
                    ByVal Original_WARI_STOCK_KBN As Global.System.Nullable(Of Short),  _
                    ByVal Original_WARI_INSTRUCT_KBN As Global.System.Nullable(Of Short),  _
                    ByVal Original_FORM_NAME As String,  _
                    ByVal Original_GOOD_PIECES As Integer,  _
                    ByVal Original_BAD_PIECES As Integer,  _
                    ByVal Original_ShipTargetChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal Original_OfficialChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal Original_RestLotInitialChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal Original_RestLotInitialInputMagazine As Global.System.Nullable(Of Short),  _
                    ByVal Original_RestLotInitialInputFrame As Global.System.Nullable(Of Short),  _
                    ByVal Original_Section As String,  _
                    ByVal Original_InvoiceNo As String,  _
                    ByVal Original_QCCheckDBNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckDBPNashi As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckHajikiPullShaer As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckWBNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckWBInsNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckJudge As Global.System.Nullable(Of Short),  _
                    ByVal Original_QCCheckerPD As String,  _
                    ByVal Original_QCCheckerQC As String,  _
                    ByVal Original_QCAQIIssueDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_QCCheckExceptOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCMainReasonExceptOSNG As String,  _
                    ByVal Original_QCNGChipInExceptOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCNGIncludeExceptOSNG As Global.System.Nullable(Of Short),  _
                    ByVal Original_QCNGJudgeExceptOSNG As Global.System.Nullable(Of Short),  _
                    ByVal Original_QCNGChipInGoodChip As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCNGIncludeGoodChip As Global.System.Nullable(Of Short),  _
                    ByVal Original_QCNGJudgeGoodChip As Global.System.Nullable(Of Short),  _
                    ByVal Original_CREATION_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_SEND_FLG As String,  _
                    ByVal Original_SEND_DATE As Global.System.Nullable(Of Date)) As Integer
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(LOT_NO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DVI_NO,Integer)
            If (PRD_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRD_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PRD_NAME,String)
            End If
            If (IN_DAY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IN_DAY")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(IN_DAY,String)
            End If
            If (OUT_DAY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OUT_DAY")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(OUT_DAY,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(OPE_SEQ,Short)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PRD_PIECE,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(INP_PIECE,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(OUT_PIECE,Integer)
            If (REAL_DAY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(REAL_DAY.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (BATCH_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(BATCH_NO,String)
            End If
            If (BATCH_SUB Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(BATCH_SUB,String)
            End If
            If (MATER_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(MATER_NAME,String)
            End If
            If (MATER_SNAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(MATER_SNAME,String)
            End If
            If (MAKER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(MAKER,String)
            End If
            If (Y_LEVEL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Y_LEVEL")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Y_LEVEL,String)
            End If
            If (STATUS1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STATUS1")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(STATUS1,String)
            End If
            If (STATUS2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STATUS2")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(STATUS2,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(CYCLE,Short)
            If (BOX_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(BOX_NO,String)
            End If
            If (PRV_BOX_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(PRV_BOX_NO,String)
            End If
            If (WAFER_STATUS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(WAFER_STATUS,String)
            End If
            If (LMT_STR_TIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(LMT_STR_TIME.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (WAGON_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(WAGON_NO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(REP_OPE_SEQ,Short)
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(REPEAT_QNT,Short)
            If (TOTAL_MASK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(TOTAL_MASK,String)
            End If
            If (STATUS2_SAVE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(STATUS2_SAVE,String)
            End If
            If (REAL_START.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(REAL_START.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (TRO_TIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(TRO_TIME.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (SISAKU_FLG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SISAKU_FLG")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(SISAKU_FLG,String)
            End If
            If (PARENT_LOT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(PARENT_LOT,String)
            End If
            If (OPE_AREA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(OPE_AREA,String)
            End If
            If (OPE_CHG_FLG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(OPE_CHG_FLG,String)
            End If
            If (PLT_OPE_SEQ1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(PLT_OPE_SEQ1.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (PLT_OPE_SEQ2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(PLT_OPE_SEQ2.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (PILOT_QNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(PILOT_QNT.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_QNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(TOTAL_QNT.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (COMMENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(COMMENT,String)
            End If
            If (ROHM_ORDER_MODEL_NAME_O Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(ROHM_ORDER_MODEL_NAME_O,String)
            End If
            If (ORDER_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(ORDER_NO,String)
            End If
            If (FT_MODEL_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(FT_MODEL_NAME,String)
            End If
            If (TP_RANK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(TP_RANK,String)
            End If
            If (WARI_STOCK_KBN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(WARI_STOCK_KBN.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (WARI_INSTRUCT_KBN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(WARI_INSTRUCT_KBN.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (FORM_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(FORM_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(46).Value = CType(GOOD_PIECES,Integer)
            Me.Adapter.UpdateCommand.Parameters(47).Value = CType(BAD_PIECES,Integer)
            If (ShipTargetChipCount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(ShipTargetChipCount.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (OfficialChipCount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(OfficialChipCount.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (RestLotInitialChipCount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(RestLotInitialChipCount.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (RestLotInitialInputMagazine.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(RestLotInitialInputMagazine.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (RestLotInitialInputFrame.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(RestLotInitialInputFrame.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (Section Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Section,String)
            End If
            If (InvoiceNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(InvoiceNo,String)
            End If
            If (QCCheckDBNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(QCCheckDBNG.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (QCCheckDBPNashi.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(QCCheckDBPNashi.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (QCCheckHajikiPullShaer.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(QCCheckHajikiPullShaer.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (QCCheckWBNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(QCCheckWBNG.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (QCCheckWBInsNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(QCCheckWBInsNG.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (QCCheckOSNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(QCCheckOSNG.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (QCCheckJudge.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(QCCheckJudge.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (QCCheckerPD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(QCCheckerPD,String)
            End If
            If (QCCheckerQC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(QCCheckerQC,String)
            End If
            If (QCAQIIssueDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(QCAQIIssueDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (QCCheckExceptOSNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(QCCheckExceptOSNG.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (QCMainReasonExceptOSNG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(QCMainReasonExceptOSNG,String)
            End If
            If (QCNGChipInExceptOSNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(QCNGChipInExceptOSNG.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (QCNGIncludeExceptOSNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(QCNGIncludeExceptOSNG.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            End If
            If (QCNGJudgeExceptOSNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(QCNGJudgeExceptOSNG.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            If (QCNGChipInGoodChip.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(QCNGChipInGoodChip.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = Global.System.DBNull.Value
            End If
            If (QCNGIncludeGoodChip.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(QCNGIncludeGoodChip.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            End If
            If (QCNGJudgeGoodChip.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(QCNGJudgeGoodChip.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = Global.System.DBNull.Value
            End If
            If (CREATION_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(CREATION_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            End If
            If (SEND_FLG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(SEND_FLG,String)
            End If
            If (SEND_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(SEND_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(75).Value = Global.System.DBNull.Value
            End If
            If (Original_LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOT_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(Original_LOT_NO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(77).Value = CType(Original_DVI_NO,Integer)
            If (Original_PRD_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRD_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(Original_PRD_NAME,String)
            End If
            If (Original_IN_DAY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IN_DAY")
            Else
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(Original_IN_DAY,String)
            End If
            If (Original_OUT_DAY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_OUT_DAY")
            Else
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(Original_OUT_DAY,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(81).Value = CType(Original_OPE_SEQ,Short)
            Me.Adapter.UpdateCommand.Parameters(82).Value = CType(Original_PRD_PIECE,Integer)
            Me.Adapter.UpdateCommand.Parameters(83).Value = CType(Original_INP_PIECE,Integer)
            Me.Adapter.UpdateCommand.Parameters(84).Value = CType(Original_OUT_PIECE,Integer)
            If (Original_REAL_DAY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(Original_REAL_DAY.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(86).Value = Global.System.DBNull.Value
            End If
            If (Original_BATCH_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(Original_BATCH_NO,String)
            End If
            If (Original_BATCH_SUB Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(Original_BATCH_SUB,String)
            End If
            If (Original_MATER_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(Original_MATER_NAME,String)
            End If
            If (Original_MATER_SNAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(Original_MATER_SNAME,String)
            End If
            If (Original_MAKER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(Original_MAKER,String)
            End If
            If (Original_Y_LEVEL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Y_LEVEL")
            Else
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(Original_Y_LEVEL,String)
            End If
            If (Original_STATUS1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STATUS1")
            Else
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(Original_STATUS1,String)
            End If
            If (Original_STATUS2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STATUS2")
            Else
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(Original_STATUS2,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(100).Value = CType(Original_CYCLE,Short)
            If (Original_BOX_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(102).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(Original_BOX_NO,String)
            End If
            If (Original_PRV_BOX_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(104).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(Original_PRV_BOX_NO,String)
            End If
            If (Original_WAFER_STATUS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(105).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(106).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(105).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(106).Value = CType(Original_WAFER_STATUS,String)
            End If
            If (Original_LMT_STR_TIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(Original_LMT_STR_TIME.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(108).Value = Global.System.DBNull.Value
            End If
            If (Original_WAGON_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(110).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(Original_WAGON_NO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(111).Value = CType(Original_REP_OPE_SEQ,Short)
            Me.Adapter.UpdateCommand.Parameters(112).Value = CType(Original_REPEAT_QNT,Short)
            If (Original_TOTAL_MASK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(113).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(114).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(113).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(Original_TOTAL_MASK,String)
            End If
            If (Original_STATUS2_SAVE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(115).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(116).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(115).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(Original_STATUS2_SAVE,String)
            End If
            If (Original_REAL_START.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(117).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(118).Value = CType(Original_REAL_START.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(117).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(118).Value = Global.System.DBNull.Value
            End If
            If (Original_TRO_TIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(119).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(120).Value = CType(Original_TRO_TIME.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(119).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(120).Value = Global.System.DBNull.Value
            End If
            If (Original_SISAKU_FLG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SISAKU_FLG")
            Else
                Me.Adapter.UpdateCommand.Parameters(121).Value = CType(Original_SISAKU_FLG,String)
            End If
            If (Original_PARENT_LOT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(122).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(123).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(122).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(123).Value = CType(Original_PARENT_LOT,String)
            End If
            If (Original_OPE_AREA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(124).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(125).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(124).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(125).Value = CType(Original_OPE_AREA,String)
            End If
            If (Original_OPE_CHG_FLG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(126).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(127).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(126).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(127).Value = CType(Original_OPE_CHG_FLG,String)
            End If
            If (Original_PLT_OPE_SEQ1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(128).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(129).Value = CType(Original_PLT_OPE_SEQ1.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(128).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(129).Value = Global.System.DBNull.Value
            End If
            If (Original_PLT_OPE_SEQ2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(130).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(131).Value = CType(Original_PLT_OPE_SEQ2.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(130).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(131).Value = Global.System.DBNull.Value
            End If
            If (Original_PILOT_QNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(132).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(133).Value = CType(Original_PILOT_QNT.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(132).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(133).Value = Global.System.DBNull.Value
            End If
            If (Original_TOTAL_QNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(134).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(135).Value = CType(Original_TOTAL_QNT.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(134).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(135).Value = Global.System.DBNull.Value
            End If
            If (Original_COMMENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(136).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(137).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(136).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(137).Value = CType(Original_COMMENT,String)
            End If
            If (Original_ROHM_ORDER_MODEL_NAME_O Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(138).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(139).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(138).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(139).Value = CType(Original_ROHM_ORDER_MODEL_NAME_O,String)
            End If
            If (Original_ORDER_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(140).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(141).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(140).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(141).Value = CType(Original_ORDER_NO,String)
            End If
            If (Original_FT_MODEL_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(142).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(143).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(142).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(143).Value = CType(Original_FT_MODEL_NAME,String)
            End If
            If (Original_TP_RANK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(144).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(145).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(144).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(145).Value = CType(Original_TP_RANK,String)
            End If
            If (Original_WARI_STOCK_KBN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(146).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(147).Value = CType(Original_WARI_STOCK_KBN.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(146).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(147).Value = Global.System.DBNull.Value
            End If
            If (Original_WARI_INSTRUCT_KBN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(148).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(149).Value = CType(Original_WARI_INSTRUCT_KBN.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(148).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(149).Value = Global.System.DBNull.Value
            End If
            If (Original_FORM_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(150).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(151).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(150).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(151).Value = CType(Original_FORM_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(152).Value = CType(Original_GOOD_PIECES,Integer)
            Me.Adapter.UpdateCommand.Parameters(153).Value = CType(Original_BAD_PIECES,Integer)
            If (Original_ShipTargetChipCount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(154).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(155).Value = CType(Original_ShipTargetChipCount.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(154).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(155).Value = Global.System.DBNull.Value
            End If
            If (Original_OfficialChipCount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(156).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(157).Value = CType(Original_OfficialChipCount.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(156).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(157).Value = Global.System.DBNull.Value
            End If
            If (Original_RestLotInitialChipCount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(158).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(159).Value = CType(Original_RestLotInitialChipCount.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(158).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(159).Value = Global.System.DBNull.Value
            End If
            If (Original_RestLotInitialInputMagazine.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(160).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(161).Value = CType(Original_RestLotInitialInputMagazine.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(160).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(161).Value = Global.System.DBNull.Value
            End If
            If (Original_RestLotInitialInputFrame.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(162).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(163).Value = CType(Original_RestLotInitialInputFrame.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(162).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(163).Value = Global.System.DBNull.Value
            End If
            If (Original_Section Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(164).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(165).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(164).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(165).Value = CType(Original_Section,String)
            End If
            If (Original_InvoiceNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(166).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(167).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(166).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(167).Value = CType(Original_InvoiceNo,String)
            End If
            If (Original_QCCheckDBNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(168).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(169).Value = CType(Original_QCCheckDBNG.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(168).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(169).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckDBPNashi.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(170).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(171).Value = CType(Original_QCCheckDBPNashi.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(170).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(171).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckHajikiPullShaer.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(172).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(173).Value = CType(Original_QCCheckHajikiPullShaer.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(172).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(173).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckWBNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(174).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(175).Value = CType(Original_QCCheckWBNG.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(174).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(175).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckWBInsNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(176).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(177).Value = CType(Original_QCCheckWBInsNG.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(176).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(177).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckOSNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(178).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(179).Value = CType(Original_QCCheckOSNG.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(178).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(179).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckJudge.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(180).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(181).Value = CType(Original_QCCheckJudge.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(180).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(181).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckerPD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(182).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(183).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(182).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(183).Value = CType(Original_QCCheckerPD,String)
            End If
            If (Original_QCCheckerQC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(184).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(185).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(184).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(185).Value = CType(Original_QCCheckerQC,String)
            End If
            If (Original_QCAQIIssueDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(186).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(187).Value = CType(Original_QCAQIIssueDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(186).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(187).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckExceptOSNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(188).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(189).Value = CType(Original_QCCheckExceptOSNG.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(188).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(189).Value = Global.System.DBNull.Value
            End If
            If (Original_QCMainReasonExceptOSNG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(190).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(191).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(190).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(191).Value = CType(Original_QCMainReasonExceptOSNG,String)
            End If
            If (Original_QCNGChipInExceptOSNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(192).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(193).Value = CType(Original_QCNGChipInExceptOSNG.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(192).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(193).Value = Global.System.DBNull.Value
            End If
            If (Original_QCNGIncludeExceptOSNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(194).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(195).Value = CType(Original_QCNGIncludeExceptOSNG.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(194).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(195).Value = Global.System.DBNull.Value
            End If
            If (Original_QCNGJudgeExceptOSNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(196).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(197).Value = CType(Original_QCNGJudgeExceptOSNG.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(196).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(197).Value = Global.System.DBNull.Value
            End If
            If (Original_QCNGChipInGoodChip.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(198).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(199).Value = CType(Original_QCNGChipInGoodChip.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(198).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(199).Value = Global.System.DBNull.Value
            End If
            If (Original_QCNGIncludeGoodChip.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(200).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(201).Value = CType(Original_QCNGIncludeGoodChip.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(200).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(201).Value = Global.System.DBNull.Value
            End If
            If (Original_QCNGJudgeGoodChip.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(202).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(203).Value = CType(Original_QCNGJudgeGoodChip.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(202).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(203).Value = Global.System.DBNull.Value
            End If
            If (Original_CREATION_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(204).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(205).Value = CType(Original_CREATION_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(204).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(205).Value = Global.System.DBNull.Value
            End If
            If (Original_SEND_FLG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(206).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(207).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(206).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(207).Value = CType(Original_SEND_FLG,String)
            End If
            If (Original_SEND_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(208).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(209).Value = CType(Original_SEND_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(208).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(209).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal DVI_NO As Integer,  _
                    ByVal PRD_NAME As String,  _
                    ByVal IN_DAY As String,  _
                    ByVal OUT_DAY As String,  _
                    ByVal OPE_SEQ As Short,  _
                    ByVal PRD_PIECE As Integer,  _
                    ByVal INP_PIECE As Integer,  _
                    ByVal OUT_PIECE As Integer,  _
                    ByVal REAL_DAY As Global.System.Nullable(Of Date),  _
                    ByVal BATCH_NO As String,  _
                    ByVal BATCH_SUB As String,  _
                    ByVal MATER_NAME As String,  _
                    ByVal MATER_SNAME As String,  _
                    ByVal MAKER As String,  _
                    ByVal Y_LEVEL As String,  _
                    ByVal STATUS1 As String,  _
                    ByVal STATUS2 As String,  _
                    ByVal CYCLE As Short,  _
                    ByVal BOX_NO As String,  _
                    ByVal PRV_BOX_NO As String,  _
                    ByVal WAFER_STATUS As String,  _
                    ByVal LMT_STR_TIME As Global.System.Nullable(Of Date),  _
                    ByVal WAGON_NO As String,  _
                    ByVal REP_OPE_SEQ As Short,  _
                    ByVal REPEAT_QNT As Short,  _
                    ByVal TOTAL_MASK As String,  _
                    ByVal STATUS2_SAVE As String,  _
                    ByVal REAL_START As Global.System.Nullable(Of Date),  _
                    ByVal TRO_TIME As Global.System.Nullable(Of Date),  _
                    ByVal SISAKU_FLG As String,  _
                    ByVal PARENT_LOT As String,  _
                    ByVal OPE_AREA As String,  _
                    ByVal OPE_CHG_FLG As String,  _
                    ByVal PLT_OPE_SEQ1 As Global.System.Nullable(Of Short),  _
                    ByVal PLT_OPE_SEQ2 As Global.System.Nullable(Of Short),  _
                    ByVal PILOT_QNT As Global.System.Nullable(Of Short),  _
                    ByVal TOTAL_QNT As Global.System.Nullable(Of Short),  _
                    ByVal COMMENT As String,  _
                    ByVal ROHM_ORDER_MODEL_NAME_O As String,  _
                    ByVal ORDER_NO As String,  _
                    ByVal FT_MODEL_NAME As String,  _
                    ByVal TP_RANK As String,  _
                    ByVal WARI_STOCK_KBN As Global.System.Nullable(Of Short),  _
                    ByVal WARI_INSTRUCT_KBN As Global.System.Nullable(Of Short),  _
                    ByVal FORM_NAME As String,  _
                    ByVal GOOD_PIECES As Integer,  _
                    ByVal BAD_PIECES As Integer,  _
                    ByVal ShipTargetChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal OfficialChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal RestLotInitialChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal RestLotInitialInputMagazine As Global.System.Nullable(Of Short),  _
                    ByVal RestLotInitialInputFrame As Global.System.Nullable(Of Short),  _
                    ByVal Section As String,  _
                    ByVal InvoiceNo As String,  _
                    ByVal QCCheckDBNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckDBPNashi As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckHajikiPullShaer As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckWBNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckWBInsNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckJudge As Global.System.Nullable(Of Short),  _
                    ByVal QCCheckerPD As String,  _
                    ByVal QCCheckerQC As String,  _
                    ByVal QCAQIIssueDate As Global.System.Nullable(Of Date),  _
                    ByVal QCCheckExceptOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCMainReasonExceptOSNG As String,  _
                    ByVal QCNGChipInExceptOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCNGIncludeExceptOSNG As Global.System.Nullable(Of Short),  _
                    ByVal QCNGJudgeExceptOSNG As Global.System.Nullable(Of Short),  _
                    ByVal QCNGChipInGoodChip As Global.System.Nullable(Of Integer),  _
                    ByVal QCNGIncludeGoodChip As Global.System.Nullable(Of Short),  _
                    ByVal QCNGJudgeGoodChip As Global.System.Nullable(Of Short),  _
                    ByVal CREATION_DATE As Global.System.Nullable(Of Date),  _
                    ByVal SEND_FLG As String,  _
                    ByVal SEND_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_LOT_NO As String,  _
                    ByVal Original_DVI_NO As Integer,  _
                    ByVal Original_PRD_NAME As String,  _
                    ByVal Original_IN_DAY As String,  _
                    ByVal Original_OUT_DAY As String,  _
                    ByVal Original_OPE_SEQ As Short,  _
                    ByVal Original_PRD_PIECE As Integer,  _
                    ByVal Original_INP_PIECE As Integer,  _
                    ByVal Original_OUT_PIECE As Integer,  _
                    ByVal Original_REAL_DAY As Global.System.Nullable(Of Date),  _
                    ByVal Original_BATCH_NO As String,  _
                    ByVal Original_BATCH_SUB As String,  _
                    ByVal Original_MATER_NAME As String,  _
                    ByVal Original_MATER_SNAME As String,  _
                    ByVal Original_MAKER As String,  _
                    ByVal Original_Y_LEVEL As String,  _
                    ByVal Original_STATUS1 As String,  _
                    ByVal Original_STATUS2 As String,  _
                    ByVal Original_CYCLE As Short,  _
                    ByVal Original_BOX_NO As String,  _
                    ByVal Original_PRV_BOX_NO As String,  _
                    ByVal Original_WAFER_STATUS As String,  _
                    ByVal Original_LMT_STR_TIME As Global.System.Nullable(Of Date),  _
                    ByVal Original_WAGON_NO As String,  _
                    ByVal Original_REP_OPE_SEQ As Short,  _
                    ByVal Original_REPEAT_QNT As Short,  _
                    ByVal Original_TOTAL_MASK As String,  _
                    ByVal Original_STATUS2_SAVE As String,  _
                    ByVal Original_REAL_START As Global.System.Nullable(Of Date),  _
                    ByVal Original_TRO_TIME As Global.System.Nullable(Of Date),  _
                    ByVal Original_SISAKU_FLG As String,  _
                    ByVal Original_PARENT_LOT As String,  _
                    ByVal Original_OPE_AREA As String,  _
                    ByVal Original_OPE_CHG_FLG As String,  _
                    ByVal Original_PLT_OPE_SEQ1 As Global.System.Nullable(Of Short),  _
                    ByVal Original_PLT_OPE_SEQ2 As Global.System.Nullable(Of Short),  _
                    ByVal Original_PILOT_QNT As Global.System.Nullable(Of Short),  _
                    ByVal Original_TOTAL_QNT As Global.System.Nullable(Of Short),  _
                    ByVal Original_COMMENT As String,  _
                    ByVal Original_ROHM_ORDER_MODEL_NAME_O As String,  _
                    ByVal Original_ORDER_NO As String,  _
                    ByVal Original_FT_MODEL_NAME As String,  _
                    ByVal Original_TP_RANK As String,  _
                    ByVal Original_WARI_STOCK_KBN As Global.System.Nullable(Of Short),  _
                    ByVal Original_WARI_INSTRUCT_KBN As Global.System.Nullable(Of Short),  _
                    ByVal Original_FORM_NAME As String,  _
                    ByVal Original_GOOD_PIECES As Integer,  _
                    ByVal Original_BAD_PIECES As Integer,  _
                    ByVal Original_ShipTargetChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal Original_OfficialChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal Original_RestLotInitialChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal Original_RestLotInitialInputMagazine As Global.System.Nullable(Of Short),  _
                    ByVal Original_RestLotInitialInputFrame As Global.System.Nullable(Of Short),  _
                    ByVal Original_Section As String,  _
                    ByVal Original_InvoiceNo As String,  _
                    ByVal Original_QCCheckDBNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckDBPNashi As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckHajikiPullShaer As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckWBNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckWBInsNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckJudge As Global.System.Nullable(Of Short),  _
                    ByVal Original_QCCheckerPD As String,  _
                    ByVal Original_QCCheckerQC As String,  _
                    ByVal Original_QCAQIIssueDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_QCCheckExceptOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCMainReasonExceptOSNG As String,  _
                    ByVal Original_QCNGChipInExceptOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCNGIncludeExceptOSNG As Global.System.Nullable(Of Short),  _
                    ByVal Original_QCNGJudgeExceptOSNG As Global.System.Nullable(Of Short),  _
                    ByVal Original_QCNGChipInGoodChip As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCNGIncludeGoodChip As Global.System.Nullable(Of Short),  _
                    ByVal Original_QCNGJudgeGoodChip As Global.System.Nullable(Of Short),  _
                    ByVal Original_CREATION_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_SEND_FLG As String,  _
                    ByVal Original_SEND_DATE As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_LOT_NO, DVI_NO, PRD_NAME, IN_DAY, OUT_DAY, OPE_SEQ, PRD_PIECE, INP_PIECE, OUT_PIECE, REAL_DAY, BATCH_NO, BATCH_SUB, MATER_NAME, MATER_SNAME, MAKER, Y_LEVEL, STATUS1, STATUS2, CYCLE, BOX_NO, PRV_BOX_NO, WAFER_STATUS, LMT_STR_TIME, WAGON_NO, REP_OPE_SEQ, REPEAT_QNT, TOTAL_MASK, STATUS2_SAVE, REAL_START, TRO_TIME, SISAKU_FLG, PARENT_LOT, OPE_AREA, OPE_CHG_FLG, PLT_OPE_SEQ1, PLT_OPE_SEQ2, PILOT_QNT, TOTAL_QNT, COMMENT, ROHM_ORDER_MODEL_NAME_O, ORDER_NO, FT_MODEL_NAME, TP_RANK, WARI_STOCK_KBN, WARI_INSTRUCT_KBN, FORM_NAME, GOOD_PIECES, BAD_PIECES, ShipTargetChipCount, OfficialChipCount, RestLotInitialChipCount, RestLotInitialInputMagazine, RestLotInitialInputFrame, Section, InvoiceNo, QCCheckDBNG, QCCheckDBPNashi, QCCheckHajikiPullShaer, QCCheckWBNG, QCCheckWBInsNG, QCCheckOSNG, QCCheckJudge, QCCheckerPD, QCCheckerQC, QCAQIIssueDate, QCCheckExceptOSNG, QCMainReasonExceptOSNG, QCNGChipInExceptOSNG, QCNGIncludeExceptOSNG, QCNGJudgeExceptOSNG, QCNGChipInGoodChip, QCNGIncludeGoodChip, QCNGJudgeGoodChip, CREATION_DATE, SEND_FLG, SEND_DATE, Original_LOT_NO, Original_DVI_NO, Original_PRD_NAME, Original_IN_DAY, Original_OUT_DAY, Original_OPE_SEQ, Original_PRD_PIECE, Original_INP_PIECE, Original_OUT_PIECE, Original_REAL_DAY, Original_BATCH_NO, Original_BATCH_SUB, Original_MATER_NAME, Original_MATER_SNAME, Original_MAKER, Original_Y_LEVEL, Original_STATUS1, Original_STATUS2, Original_CYCLE, Original_BOX_NO, Original_PRV_BOX_NO, Original_WAFER_STATUS, Original_LMT_STR_TIME, Original_WAGON_NO, Original_REP_OPE_SEQ, Original_REPEAT_QNT, Original_TOTAL_MASK, Original_STATUS2_SAVE, Original_REAL_START, Original_TRO_TIME, Original_SISAKU_FLG, Original_PARENT_LOT, Original_OPE_AREA, Original_OPE_CHG_FLG, Original_PLT_OPE_SEQ1, Original_PLT_OPE_SEQ2, Original_PILOT_QNT, Original_TOTAL_QNT, Original_COMMENT, Original_ROHM_ORDER_MODEL_NAME_O, Original_ORDER_NO, Original_FT_MODEL_NAME, Original_TP_RANK, Original_WARI_STOCK_KBN, Original_WARI_INSTRUCT_KBN, Original_FORM_NAME, Original_GOOD_PIECES, Original_BAD_PIECES, Original_ShipTargetChipCount, Original_OfficialChipCount, Original_RestLotInitialChipCount, Original_RestLotInitialInputMagazine, Original_RestLotInitialInputFrame, Original_Section, Original_InvoiceNo, Original_QCCheckDBNG, Original_QCCheckDBPNashi, Original_QCCheckHajikiPullShaer, Original_QCCheckWBNG, Original_QCCheckWBInsNG, Original_QCCheckOSNG, Original_QCCheckJudge, Original_QCCheckerPD, Original_QCCheckerQC, Original_QCAQIIssueDate, Original_QCCheckExceptOSNG, Original_QCMainReasonExceptOSNG, Original_QCNGChipInExceptOSNG, Original_QCNGIncludeExceptOSNG, Original_QCNGJudgeExceptOSNG, Original_QCNGChipInGoodChip, Original_QCNGIncludeGoodChip, Original_QCNGJudgeGoodChip, Original_CREATION_DATE, Original_SEND_FLG, Original_SEND_DATE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class LOT2_DATATableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "LOT2_DATA"
            tableMapping.ColumnMappings.Add("LOT_NO", "LOT_NO")
            tableMapping.ColumnMappings.Add("OPE_SEQ", "OPE_SEQ")
            tableMapping.ColumnMappings.Add("N_OPE_SEQ", "N_OPE_SEQ")
            tableMapping.ColumnMappings.Add("LAY_NO", "LAY_NO")
            tableMapping.ColumnMappings.Add("PLAN_DAY", "PLAN_DAY")
            tableMapping.ColumnMappings.Add("REAL_START", "REAL_START")
            tableMapping.ColumnMappings.Add("ONLINE_START", "ONLINE_START")
            tableMapping.ColumnMappings.Add("REAL_DAY1", "REAL_DAY1")
            tableMapping.ColumnMappings.Add("REAL_DAY", "REAL_DAY")
            tableMapping.ColumnMappings.Add("RECIPE", "RECIPE")
            tableMapping.ColumnMappings.Add("MACHINE", "MACHINE")
            tableMapping.ColumnMappings.Add("MACHINE_SUB", "MACHINE_SUB")
            tableMapping.ColumnMappings.Add("START_MSG", "START_MSG")
            tableMapping.ColumnMappings.Add("END_MSG", "END_MSG")
            tableMapping.ColumnMappings.Add("OPERATOR1", "OPERATOR1")
            tableMapping.ColumnMappings.Add("OPERATOR2", "OPERATOR2")
            tableMapping.ColumnMappings.Add("QUANTITY", "QUANTITY")
            tableMapping.ColumnMappings.Add("LOSS_QTY", "LOSS_QTY")
            tableMapping.ColumnMappings.Add("DATA_NO", "DATA_NO")
            tableMapping.ColumnMappings.Add("LIMIT_TIME1", "LIMIT_TIME1")
            tableMapping.ColumnMappings.Add("LIMIT_FLG1", "LIMIT_FLG1")
            tableMapping.ColumnMappings.Add("LIMIT_MSG1", "LIMIT_MSG1")
            tableMapping.ColumnMappings.Add("LIMIT_TIME2", "LIMIT_TIME2")
            tableMapping.ColumnMappings.Add("LIMIT_FLG2", "LIMIT_FLG2")
            tableMapping.ColumnMappings.Add("LIMIT_MSG2", "LIMIT_MSG2")
            tableMapping.ColumnMappings.Add("OPE_AREA", "OPE_AREA")
            tableMapping.ColumnMappings.Add("INTEG1", "INTEG1")
            tableMapping.ColumnMappings.Add("INTEG2", "INTEG2")
            tableMapping.ColumnMappings.Add("INTEG3", "INTEG3")
            tableMapping.ColumnMappings.Add("INTEG4", "INTEG4")
            tableMapping.ColumnMappings.Add("REPEAT_FLG", "REPEAT_FLG")
            tableMapping.ColumnMappings.Add("REPEAT_TIME", "REPEAT_TIME")
            tableMapping.ColumnMappings.Add("WAFER_STATUS", "WAFER_STATUS")
            tableMapping.ColumnMappings.Add("LIMIT_FLG", "LIMIT_FLG")
            tableMapping.ColumnMappings.Add("PRD_NAME", "PRD_NAME")
            tableMapping.ColumnMappings.Add("PRV_BOX_NO", "PRV_BOX_NO")
            tableMapping.ColumnMappings.Add("MASK_NAME", "MASK_NAME")
            tableMapping.ColumnMappings.Add("COMMENT1", "COMMENT1")
            tableMapping.ColumnMappings.Add("MACHINE_PRM1", "MACHINE_PRM1")
            tableMapping.ColumnMappings.Add("MACHINE_PRM2", "MACHINE_PRM2")
            tableMapping.ColumnMappings.Add("COMMENT2", "COMMENT2")
            tableMapping.ColumnMappings.Add("M_START_MSG", "M_START_MSG")
            tableMapping.ColumnMappings.Add("M_END_MSG", "M_END_MSG")
            tableMapping.ColumnMappings.Add("COMMENT3", "COMMENT3")
            tableMapping.ColumnMappings.Add("COMMENT4", "COMMENT4")
            tableMapping.ColumnMappings.Add("GOOD_PIECES", "GOOD_PIECES")
            tableMapping.ColumnMappings.Add("BAD_PIECES", "BAD_PIECES")
            tableMapping.ColumnMappings.Add("ProcessJobID", "ProcessJobID")
            tableMapping.ColumnMappings.Add("CarrierNoIn", "CarrierNoIn")
            tableMapping.ColumnMappings.Add("CarrierNoOut", "CarrierNoOut")
            tableMapping.ColumnMappings.Add("RunTime", "RunTime")
            tableMapping.ColumnMappings.Add("StopTime", "StopTime")
            tableMapping.ColumnMappings.Add("AlarmTime", "AlarmTime")
            tableMapping.ColumnMappings.Add("MaterialChangeTime", "MaterialChangeTime")
            tableMapping.ColumnMappings.Add("WIPIdleTime", "WIPIdleTime")
            tableMapping.ColumnMappings.Add("IdleTime", "IdleTime")
            tableMapping.ColumnMappings.Add("TotalInputChip", "TotalInputChip")
            tableMapping.ColumnMappings.Add("TotalProcessChip", "TotalProcessChip")
            tableMapping.ColumnMappings.Add("ScrapChip", "ScrapChip")
            tableMapping.ColumnMappings.Add("VisualNGChip", "VisualNGChip")
            tableMapping.ColumnMappings.Add("UnknownLostChip", "UnknownLostChip")
            tableMapping.ColumnMappings.Add("RankOutChip", "RankOutChip")
            tableMapping.ColumnMappings.Add("RankType", "RankType")
            tableMapping.ColumnMappings.Add("KeepSample", "KeepSample")
            tableMapping.ColumnMappings.Add("ExcessChip", "ExcessChip")
            tableMapping.ColumnMappings.Add("NoChip", "NoChip")
            tableMapping.ColumnMappings.Add("MarkerNGCount", "MarkerNGCount")
            tableMapping.ColumnMappings.Add("TotalInputFrame", "TotalInputFrame")
            tableMapping.ColumnMappings.Add("TotalProcessFrame", "TotalProcessFrame")
            tableMapping.ColumnMappings.Add("ScrapFrame", "ScrapFrame")
            tableMapping.ColumnMappings.Add("DummyFrame", "DummyFrame")
            tableMapping.ColumnMappings.Add("RepateFrameCount", "RepateFrameCount")
            tableMapping.ColumnMappings.Add("Note", "Note")
            tableMapping.ColumnMappings.Add("LotOperationRate", "LotOperationRate")
            tableMapping.ColumnMappings.Add("LotMaximumRPM", "LotMaximumRPM")
            tableMapping.ColumnMappings.Add("LotAverageRPM", "LotAverageRPM")
            tableMapping.ColumnMappings.Add("LotAlarmTotalCount", "LotAlarmTotalCount")
            tableMapping.ColumnMappings.Add("InspectionJudge", "InspectionJudge")
            tableMapping.ColumnMappings.Add("InspectionDefect", "InspectionDefect")
            tableMapping.ColumnMappings.Add("RecognitionTotal", "RecognitionTotal")
            tableMapping.ColumnMappings.Add("RecognitionGood", "RecognitionGood")
            tableMapping.ColumnMappings.Add("RecognitionNG", "RecognitionNG")
            tableMapping.ColumnMappings.Add("RecognitionNG_Visual", "RecognitionNG_Visual")
            tableMapping.ColumnMappings.Add("RecognitionNG_Bond", "RecognitionNG_Bond")
            tableMapping.ColumnMappings.Add("RecognitionPass", "RecognitionPass")
            tableMapping.ColumnMappings.Add("RecognitionRetry", "RecognitionRetry")
            tableMapping.ColumnMappings.Add("RecognitionAlarm", "RecognitionAlarm")
            tableMapping.ColumnMappings.Add("CREATION_DATE", "CREATION_DATE")
            tableMapping.ColumnMappings.Add("SEND_FLG", "SEND_FLG")
            tableMapping.ColumnMappings.Add("SEND_DATE", "SEND_DATE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[LOT2_DATA] WHERE (([LOT_NO] = @Original_LOT_NO) AND ([OPE_SEQ]"& _ 
                " = @Original_OPE_SEQ) AND ([N_OPE_SEQ] = @Original_N_OPE_SEQ) AND ([LAY_NO] = @O"& _ 
                "riginal_LAY_NO) AND ((@IsNull_PLAN_DAY = 1 AND [PLAN_DAY] IS NULL) OR ([PLAN_DAY"& _ 
                "] = @Original_PLAN_DAY)) AND ([REAL_START] = @Original_REAL_START) AND ((@IsNull"& _ 
                "_ONLINE_START = 1 AND [ONLINE_START] IS NULL) OR ([ONLINE_START] = @Original_ONL"& _ 
                "INE_START)) AND ((@IsNull_REAL_DAY1 = 1 AND [REAL_DAY1] IS NULL) OR ([REAL_DAY1]"& _ 
                " = @Original_REAL_DAY1)) AND ((@IsNull_REAL_DAY = 1 AND [REAL_DAY] IS NULL) OR ("& _ 
                "[REAL_DAY] = @Original_REAL_DAY)) AND ((@IsNull_RECIPE = 1 AND [RECIPE] IS NULL)"& _ 
                " OR ([RECIPE] = @Original_RECIPE)) AND ((@IsNull_MACHINE = 1 AND [MACHINE] IS NU"& _ 
                "LL) OR ([MACHINE] = @Original_MACHINE)) AND ((@IsNull_MACHINE_SUB = 1 AND [MACHI"& _ 
                "NE_SUB] IS NULL) OR ([MACHINE_SUB] = @Original_MACHINE_SUB)) AND ((@IsNull_START"& _ 
                "_MSG = 1 AND [START_MSG] IS NULL) OR ([START_MSG] = @Original_START_MSG)) AND (("& _ 
                "@IsNull_END_MSG = 1 AND [END_MSG] IS NULL) OR ([END_MSG] = @Original_END_MSG)) A"& _ 
                "ND ((@IsNull_OPERATOR1 = 1 AND [OPERATOR1] IS NULL) OR ([OPERATOR1] = @Original_"& _ 
                "OPERATOR1)) AND ((@IsNull_OPERATOR2 = 1 AND [OPERATOR2] IS NULL) OR ([OPERATOR2]"& _ 
                " = @Original_OPERATOR2)) AND ([QUANTITY] = @Original_QUANTITY) AND ([LOSS_QTY] ="& _ 
                " @Original_LOSS_QTY) AND ([DATA_NO] = @Original_DATA_NO) AND ([LIMIT_TIME1] = @O"& _ 
                "riginal_LIMIT_TIME1) AND ([LIMIT_FLG1] = @Original_LIMIT_FLG1) AND ((@IsNull_LIM"& _ 
                "IT_MSG1 = 1 AND [LIMIT_MSG1] IS NULL) OR ([LIMIT_MSG1] = @Original_LIMIT_MSG1)) "& _ 
                "AND ([LIMIT_TIME2] = @Original_LIMIT_TIME2) AND ([LIMIT_FLG2] = @Original_LIMIT_"& _ 
                "FLG2) AND ((@IsNull_LIMIT_MSG2 = 1 AND [LIMIT_MSG2] IS NULL) OR ([LIMIT_MSG2] = "& _ 
                "@Original_LIMIT_MSG2)) AND ((@IsNull_OPE_AREA = 1 AND [OPE_AREA] IS NULL) OR ([O"& _ 
                "PE_AREA] = @Original_OPE_AREA)) AND ([INTEG1] = @Original_INTEG1) AND ([INTEG2] "& _ 
                "= @Original_INTEG2) AND ([INTEG3] = @Original_INTEG3) AND ([INTEG4] = @Original_"& _ 
                "INTEG4) AND ([REPEAT_FLG] = @Original_REPEAT_FLG) AND ([REPEAT_TIME] = @Original"& _ 
                "_REPEAT_TIME) AND ((@IsNull_WAFER_STATUS = 1 AND [WAFER_STATUS] IS NULL) OR ([WA"& _ 
                "FER_STATUS] = @Original_WAFER_STATUS)) AND ([LIMIT_FLG] = @Original_LIMIT_FLG) A"& _ 
                "ND ((@IsNull_PRD_NAME = 1 AND [PRD_NAME] IS NULL) OR ([PRD_NAME] = @Original_PRD"& _ 
                "_NAME)) AND ((@IsNull_PRV_BOX_NO = 1 AND [PRV_BOX_NO] IS NULL) OR ([PRV_BOX_NO] "& _ 
                "= @Original_PRV_BOX_NO)) AND ((@IsNull_MASK_NAME = 1 AND [MASK_NAME] IS NULL) OR"& _ 
                " ([MASK_NAME] = @Original_MASK_NAME)) AND ((@IsNull_COMMENT1 = 1 AND [COMMENT1] "& _ 
                "IS NULL) OR ([COMMENT1] = @Original_COMMENT1)) AND ((@IsNull_MACHINE_PRM1 = 1 AN"& _ 
                "D [MACHINE_PRM1] IS NULL) OR ([MACHINE_PRM1] = @Original_MACHINE_PRM1)) AND ((@I"& _ 
                "sNull_MACHINE_PRM2 = 1 AND [MACHINE_PRM2] IS NULL) OR ([MACHINE_PRM2] = @Origina"& _ 
                "l_MACHINE_PRM2)) AND ((@IsNull_COMMENT2 = 1 AND [COMMENT2] IS NULL) OR ([COMMENT"& _ 
                "2] = @Original_COMMENT2)) AND ((@IsNull_M_START_MSG = 1 AND [M_START_MSG] IS NUL"& _ 
                "L) OR ([M_START_MSG] = @Original_M_START_MSG)) AND ((@IsNull_M_END_MSG = 1 AND ["& _ 
                "M_END_MSG] IS NULL) OR ([M_END_MSG] = @Original_M_END_MSG)) AND ((@IsNull_COMMEN"& _ 
                "T3 = 1 AND [COMMENT3] IS NULL) OR ([COMMENT3] = @Original_COMMENT3)) AND ((@IsNu"& _ 
                "ll_COMMENT4 = 1 AND [COMMENT4] IS NULL) OR ([COMMENT4] = @Original_COMMENT4)) AN"& _ 
                "D ([GOOD_PIECES] = @Original_GOOD_PIECES) AND ([BAD_PIECES] = @Original_BAD_PIEC"& _ 
                "ES) AND ((@IsNull_ProcessJobID = 1 AND [ProcessJobID] IS NULL) OR ([ProcessJobID"& _ 
                "] = @Original_ProcessJobID)) AND ((@IsNull_CarrierNoIn = 1 AND [CarrierNoIn] IS "& _ 
                "NULL) OR ([CarrierNoIn] = @Original_CarrierNoIn)) AND ((@IsNull_CarrierNoOut = 1"& _ 
                " AND [CarrierNoOut] IS NULL) OR ([CarrierNoOut] = @Original_CarrierNoOut)) AND ("& _ 
                "(@IsNull_RunTime = 1 AND [RunTime] IS NULL) OR ([RunTime] = @Original_RunTime)) "& _ 
                "AND ((@IsNull_StopTime = 1 AND [StopTime] IS NULL) OR ([StopTime] = @Original_St"& _ 
                "opTime)) AND ((@IsNull_AlarmTime = 1 AND [AlarmTime] IS NULL) OR ([AlarmTime] = "& _ 
                "@Original_AlarmTime)) AND ((@IsNull_MaterialChangeTime = 1 AND [MaterialChangeTi"& _ 
                "me] IS NULL) OR ([MaterialChangeTime] = @Original_MaterialChangeTime)) AND ((@Is"& _ 
                "Null_WIPIdleTime = 1 AND [WIPIdleTime] IS NULL) OR ([WIPIdleTime] = @Original_WI"& _ 
                "PIdleTime)) AND ((@IsNull_IdleTime = 1 AND [IdleTime] IS NULL) OR ([IdleTime] = "& _ 
                "@Original_IdleTime)) AND ((@IsNull_TotalInputChip = 1 AND [TotalInputChip] IS NU"& _ 
                "LL) OR ([TotalInputChip] = @Original_TotalInputChip)) AND ((@IsNull_TotalProcess"& _ 
                "Chip = 1 AND [TotalProcessChip] IS NULL) OR ([TotalProcessChip] = @Original_Tota"& _ 
                "lProcessChip)) AND ((@IsNull_ScrapChip = 1 AND [ScrapChip] IS NULL) OR ([ScrapCh"& _ 
                "ip] = @Original_ScrapChip)) AND ((@IsNull_VisualNGChip = 1 AND [VisualNGChip] IS"& _ 
                " NULL) OR ([VisualNGChip] = @Original_VisualNGChip)) AND ((@IsNull_UnknownLostCh"& _ 
                "ip = 1 AND [UnknownLostChip] IS NULL) OR ([UnknownLostChip] = @Original_UnknownL"& _ 
                "ostChip)) AND ((@IsNull_RankOutChip = 1 AND [RankOutChip] IS NULL) OR ([RankOutC"& _ 
                "hip] = @Original_RankOutChip)) AND ((@IsNull_RankType = 1 AND [RankType] IS NULL"& _ 
                ") OR ([RankType] = @Original_RankType)) AND ((@IsNull_KeepSample = 1 AND [KeepSa"& _ 
                "mple] IS NULL) OR ([KeepSample] = @Original_KeepSample)) AND ((@IsNull_ExcessChi"& _ 
                "p = 1 AND [ExcessChip] IS NULL) OR ([ExcessChip] = @Original_ExcessChip)) AND (("& _ 
                "@IsNull_NoChip = 1 AND [NoChip] IS NULL) OR ([NoChip] = @Original_NoChip)) AND ("& _ 
                "(@IsNull_MarkerNGCount = 1 AND [MarkerNGCount] IS NULL) OR ([MarkerNGCount] = @O"& _ 
                "riginal_MarkerNGCount)) AND ((@IsNull_TotalInputFrame = 1 AND [TotalInputFrame] "& _ 
                "IS NULL) OR ([TotalInputFrame] = @Original_TotalInputFrame)) AND ((@IsNull_Total"& _ 
                "ProcessFrame = 1 AND [TotalProcessFrame] IS NULL) OR ([TotalProcessFrame] = @Ori"& _ 
                "ginal_TotalProcessFrame)) AND ((@IsNull_ScrapFrame = 1 AND [ScrapFrame] IS NULL)"& _ 
                " OR ([ScrapFrame] = @Original_ScrapFrame)) AND ((@IsNull_DummyFrame = 1 AND [Dum"& _ 
                "myFrame] IS NULL) OR ([DummyFrame] = @Original_DummyFrame)) AND ((@IsNull_Repate"& _ 
                "FrameCount = 1 AND [RepateFrameCount] IS NULL) OR ([RepateFrameCount] = @Origina"& _ 
                "l_RepateFrameCount)) AND ((@IsNull_Note = 1 AND [Note] IS NULL) OR ([Note] = @Or"& _ 
                "iginal_Note)) AND ((@IsNull_LotOperationRate = 1 AND [LotOperationRate] IS NULL)"& _ 
                " OR ([LotOperationRate] = @Original_LotOperationRate)) AND ((@IsNull_LotMaximumR"& _ 
                "PM = 1 AND [LotMaximumRPM] IS NULL) OR ([LotMaximumRPM] = @Original_LotMaximumRP"& _ 
                "M)) AND ((@IsNull_LotAverageRPM = 1 AND [LotAverageRPM] IS NULL) OR ([LotAverage"& _ 
                "RPM] = @Original_LotAverageRPM)) AND ((@IsNull_LotAlarmTotalCount = 1 AND [LotAl"& _ 
                "armTotalCount] IS NULL) OR ([LotAlarmTotalCount] = @Original_LotAlarmTotalCount)"& _ 
                ") AND ((@IsNull_InspectionJudge = 1 AND [InspectionJudge] IS NULL) OR ([Inspecti"& _ 
                "onJudge] = @Original_InspectionJudge)) AND ((@IsNull_InspectionDefect = 1 AND [I"& _ 
                "nspectionDefect] IS NULL) OR ([InspectionDefect] = @Original_InspectionDefect)) "& _ 
                "AND ((@IsNull_RecognitionTotal = 1 AND [RecognitionTotal] IS NULL) OR ([Recognit"& _ 
                "ionTotal] = @Original_RecognitionTotal)) AND ((@IsNull_RecognitionGood = 1 AND ["& _ 
                "RecognitionGood] IS NULL) OR ([RecognitionGood] = @Original_RecognitionGood)) AN"& _ 
                "D ((@IsNull_RecognitionNG = 1 AND [RecognitionNG] IS NULL) OR ([RecognitionNG] ="& _ 
                " @Original_RecognitionNG)) AND ((@IsNull_RecognitionNG_Visual = 1 AND [Recogniti"& _ 
                "onNG_Visual] IS NULL) OR ([RecognitionNG_Visual] = @Original_RecognitionNG_Visua"& _ 
                "l)) AND ((@IsNull_RecognitionNG_Bond = 1 AND [RecognitionNG_Bond] IS NULL) OR (["& _ 
                "RecognitionNG_Bond] = @Original_RecognitionNG_Bond)) AND ((@IsNull_RecognitionPa"& _ 
                "ss = 1 AND [RecognitionPass] IS NULL) OR ([RecognitionPass] = @Original_Recognit"& _ 
                "ionPass)) AND ((@IsNull_RecognitionRetry = 1 AND [RecognitionRetry] IS NULL) OR "& _ 
                "([RecognitionRetry] = @Original_RecognitionRetry)) AND ((@IsNull_RecognitionAlar"& _ 
                "m = 1 AND [RecognitionAlarm] IS NULL) OR ([RecognitionAlarm] = @Original_Recogni"& _ 
                "tionAlarm)) AND ((@IsNull_CREATION_DATE = 1 AND [CREATION_DATE] IS NULL) OR ([CR"& _ 
                "EATION_DATE] = @Original_CREATION_DATE)) AND ((@IsNull_SEND_FLG = 1 AND [SEND_FL"& _ 
                "G] IS NULL) OR ([SEND_FLG] = @Original_SEND_FLG)) AND ((@IsNull_SEND_DATE = 1 AN"& _ 
                "D [SEND_DATE] IS NULL) OR ([SEND_DATE] = @Original_SEND_DATE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_N_OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "N_OPE_SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LAY_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAY_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PLAN_DAY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLAN_DAY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLAN_DAY", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLAN_DAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REAL_START", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_START", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ONLINE_START", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ONLINE_START", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ONLINE_START", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ONLINE_START", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REAL_DAY1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_DAY1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REAL_DAY1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_DAY1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REAL_DAY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_DAY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REAL_DAY", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_DAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RECIPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECIPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RECIPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECIPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MACHINE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MACHINE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MACHINE_SUB", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_SUB", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MACHINE_SUB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_SUB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_START_MSG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "START_MSG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_START_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "START_MSG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_END_MSG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "END_MSG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_END_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "END_MSG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OPERATOR1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPERATOR1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPERATOR1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPERATOR1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OPERATOR2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPERATOR2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPERATOR2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPERATOR2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QUANTITY", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QUANTITY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOSS_QTY", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOSS_QTY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATA_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LIMIT_TIME1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_TIME1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LIMIT_FLG1", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_FLG1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LIMIT_MSG1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_MSG1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LIMIT_MSG1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_MSG1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LIMIT_TIME2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_TIME2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LIMIT_FLG2", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_FLG2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LIMIT_MSG2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_MSG2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LIMIT_MSG2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_MSG2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OPE_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_AREA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPE_AREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_AREA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INTEG1", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INTEG1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INTEG2", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INTEG2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INTEG3", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INTEG3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INTEG4", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INTEG4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REPEAT_FLG", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REPEAT_FLG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REPEAT_TIME", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REPEAT_TIME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WAFER_STATUS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAFER_STATUS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WAFER_STATUS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAFER_STATUS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LIMIT_FLG", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_FLG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRD_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRD_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRD_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRD_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRV_BOX_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRV_BOX_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRV_BOX_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRV_BOX_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MASK_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MASK_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MASK_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MASK_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COMMENT1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COMMENT1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MACHINE_PRM1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_PRM1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MACHINE_PRM1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_PRM1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MACHINE_PRM2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_PRM2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MACHINE_PRM2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_PRM2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COMMENT2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COMMENT2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_M_START_MSG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_START_MSG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_M_START_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_START_MSG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_M_END_MSG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_END_MSG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_M_END_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_END_MSG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COMMENT3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COMMENT3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COMMENT4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COMMENT4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GOOD_PIECES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GOOD_PIECES", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BAD_PIECES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BAD_PIECES", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ProcessJobID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProcessJobID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProcessJobID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProcessJobID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CarrierNoIn", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CarrierNoIn", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CarrierNoIn", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CarrierNoIn", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CarrierNoOut", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CarrierNoOut", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CarrierNoOut", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CarrierNoOut", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RunTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RunTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RunTime", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RunTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StopTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StopTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StopTime", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StopTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AlarmTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AlarmTime", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MaterialChangeTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaterialChangeTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MaterialChangeTime", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaterialChangeTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WIPIdleTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WIPIdleTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WIPIdleTime", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WIPIdleTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdleTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdleTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdleTime", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdleTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalInputChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalInputChip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalInputChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalInputChip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalProcessChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalProcessChip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalProcessChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalProcessChip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ScrapChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ScrapChip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ScrapChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ScrapChip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VisualNGChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VisualNGChip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VisualNGChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VisualNGChip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UnknownLostChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UnknownLostChip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UnknownLostChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UnknownLostChip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RankOutChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RankOutChip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RankOutChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RankOutChip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RankType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RankType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RankType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RankType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_KeepSample", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KeepSample", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_KeepSample", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KeepSample", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ExcessChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExcessChip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ExcessChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExcessChip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NoChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NoChip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NoChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NoChip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MarkerNGCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkerNGCount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MarkerNGCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkerNGCount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalInputFrame", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalInputFrame", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalInputFrame", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalInputFrame", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalProcessFrame", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalProcessFrame", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalProcessFrame", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalProcessFrame", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ScrapFrame", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ScrapFrame", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ScrapFrame", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ScrapFrame", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DummyFrame", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DummyFrame", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DummyFrame", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DummyFrame", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RepateFrameCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RepateFrameCount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RepateFrameCount", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RepateFrameCount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Note", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Note", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Note", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Note", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LotOperationRate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotOperationRate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotOperationRate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotOperationRate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LotMaximumRPM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotMaximumRPM", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotMaximumRPM", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotMaximumRPM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LotAverageRPM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotAverageRPM", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotAverageRPM", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotAverageRPM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LotAlarmTotalCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotAlarmTotalCount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotAlarmTotalCount", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotAlarmTotalCount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_InspectionJudge", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InspectionJudge", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InspectionJudge", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InspectionJudge", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_InspectionDefect", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InspectionDefect", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InspectionDefect", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InspectionDefect", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RecognitionTotal", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionTotal", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecognitionTotal", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionTotal", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RecognitionGood", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionGood", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecognitionGood", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionGood", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RecognitionNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecognitionNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RecognitionNG_Visual", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionNG_Visual", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecognitionNG_Visual", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionNG_Visual", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RecognitionNG_Bond", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionNG_Bond", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecognitionNG_Bond", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionNG_Bond", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RecognitionPass", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionPass", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecognitionPass", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionPass", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RecognitionRetry", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionRetry", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecognitionRetry", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionRetry", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RecognitionAlarm", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionAlarm", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecognitionAlarm", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionAlarm", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATION_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATION_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATION_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATION_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SEND_FLG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_FLG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEND_FLG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_FLG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SEND_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEND_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[LOT2_DATA] ([LOT_NO], [OPE_SEQ], [N_OPE_SEQ], [LAY_NO], [PLAN_"& _ 
                "DAY], [REAL_START], [ONLINE_START], [REAL_DAY1], [REAL_DAY], [RECIPE], [MACHINE]"& _ 
                ", [MACHINE_SUB], [START_MSG], [END_MSG], [OPERATOR1], [OPERATOR2], [QUANTITY], ["& _ 
                "LOSS_QTY], [DATA_NO], [LIMIT_TIME1], [LIMIT_FLG1], [LIMIT_MSG1], [LIMIT_TIME2], "& _ 
                "[LIMIT_FLG2], [LIMIT_MSG2], [OPE_AREA], [INTEG1], [INTEG2], [INTEG3], [INTEG4], "& _ 
                "[REPEAT_FLG], [REPEAT_TIME], [WAFER_STATUS], [LIMIT_FLG], [PRD_NAME], [PRV_BOX_N"& _ 
                "O], [MASK_NAME], [COMMENT1], [MACHINE_PRM1], [MACHINE_PRM2], [COMMENT2], [M_STAR"& _ 
                "T_MSG], [M_END_MSG], [COMMENT3], [COMMENT4], [GOOD_PIECES], [BAD_PIECES], [Proce"& _ 
                "ssJobID], [CarrierNoIn], [CarrierNoOut], [RunTime], [StopTime], [AlarmTime], [Ma"& _ 
                "terialChangeTime], [WIPIdleTime], [IdleTime], [TotalInputChip], [TotalProcessChi"& _ 
                "p], [ScrapChip], [VisualNGChip], [UnknownLostChip], [RankOutChip], [RankType], ["& _ 
                "KeepSample], [ExcessChip], [NoChip], [MarkerNGCount], [TotalInputFrame], [TotalP"& _ 
                "rocessFrame], [ScrapFrame], [DummyFrame], [RepateFrameCount], [Note], [LotOperat"& _ 
                "ionRate], [LotMaximumRPM], [LotAverageRPM], [LotAlarmTotalCount], [InspectionJud"& _ 
                "ge], [InspectionDefect], [RecognitionTotal], [RecognitionGood], [RecognitionNG],"& _ 
                " [RecognitionNG_Visual], [RecognitionNG_Bond], [RecognitionPass], [RecognitionRe"& _ 
                "try], [RecognitionAlarm], [CREATION_DATE], [SEND_FLG], [SEND_DATE]) VALUES (@LOT"& _ 
                "_NO, @OPE_SEQ, @N_OPE_SEQ, @LAY_NO, @PLAN_DAY, @REAL_START, @ONLINE_START, @REAL"& _ 
                "_DAY1, @REAL_DAY, @RECIPE, @MACHINE, @MACHINE_SUB, @START_MSG, @END_MSG, @OPERAT"& _ 
                "OR1, @OPERATOR2, @QUANTITY, @LOSS_QTY, @DATA_NO, @LIMIT_TIME1, @LIMIT_FLG1, @LIM"& _ 
                "IT_MSG1, @LIMIT_TIME2, @LIMIT_FLG2, @LIMIT_MSG2, @OPE_AREA, @INTEG1, @INTEG2, @I"& _ 
                "NTEG3, @INTEG4, @REPEAT_FLG, @REPEAT_TIME, @WAFER_STATUS, @LIMIT_FLG, @PRD_NAME,"& _ 
                " @PRV_BOX_NO, @MASK_NAME, @COMMENT1, @MACHINE_PRM1, @MACHINE_PRM2, @COMMENT2, @M"& _ 
                "_START_MSG, @M_END_MSG, @COMMENT3, @COMMENT4, @GOOD_PIECES, @BAD_PIECES, @Proces"& _ 
                "sJobID, @CarrierNoIn, @CarrierNoOut, @RunTime, @StopTime, @AlarmTime, @MaterialC"& _ 
                "hangeTime, @WIPIdleTime, @IdleTime, @TotalInputChip, @TotalProcessChip, @ScrapCh"& _ 
                "ip, @VisualNGChip, @UnknownLostChip, @RankOutChip, @RankType, @KeepSample, @Exce"& _ 
                "ssChip, @NoChip, @MarkerNGCount, @TotalInputFrame, @TotalProcessFrame, @ScrapFra"& _ 
                "me, @DummyFrame, @RepateFrameCount, @Note, @LotOperationRate, @LotMaximumRPM, @L"& _ 
                "otAverageRPM, @LotAlarmTotalCount, @InspectionJudge, @InspectionDefect, @Recogni"& _ 
                "tionTotal, @RecognitionGood, @RecognitionNG, @RecognitionNG_Visual, @Recognition"& _ 
                "NG_Bond, @RecognitionPass, @RecognitionRetry, @RecognitionAlarm, @CREATION_DATE,"& _ 
                " @SEND_FLG, @SEND_DATE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT LOT_NO, OPE_SEQ, N_OPE_SEQ, LAY_NO, PLAN_DAY, R"& _ 
                "EAL_START, ONLINE_START, REAL_DAY1, REAL_DAY, RECIPE, MACHINE, MACHINE_SUB, STAR"& _ 
                "T_MSG, END_MSG, OPERATOR1, OPERATOR2, QUANTITY, LOSS_QTY, DATA_NO, LIMIT_TIME1, "& _ 
                "LIMIT_FLG1, LIMIT_MSG1, LIMIT_TIME2, LIMIT_FLG2, LIMIT_MSG2, OPE_AREA, INTEG1, I"& _ 
                "NTEG2, INTEG3, INTEG4, REPEAT_FLG, REPEAT_TIME, WAFER_STATUS, LIMIT_FLG, PRD_NAM"& _ 
                "E, PRV_BOX_NO, MASK_NAME, COMMENT1, MACHINE_PRM1, MACHINE_PRM2, COMMENT2, M_STAR"& _ 
                "T_MSG, M_END_MSG, COMMENT3, COMMENT4, GOOD_PIECES, BAD_PIECES, ProcessJobID, Car"& _ 
                "rierNoIn, CarrierNoOut, RunTime, StopTime, AlarmTime, MaterialChangeTime, WIPIdl"& _ 
                "eTime, IdleTime, TotalInputChip, TotalProcessChip, ScrapChip, VisualNGChip, Unkn"& _ 
                "ownLostChip, RankOutChip, RankType, KeepSample, ExcessChip, NoChip, MarkerNGCoun"& _ 
                "t, TotalInputFrame, TotalProcessFrame, ScrapFrame, DummyFrame, RepateFrameCount,"& _ 
                " Note, LotOperationRate, LotMaximumRPM, LotAverageRPM, LotAlarmTotalCount, Inspe"& _ 
                "ctionJudge, InspectionDefect, RecognitionTotal, RecognitionGood, RecognitionNG, "& _ 
                "RecognitionNG_Visual, RecognitionNG_Bond, RecognitionPass, RecognitionRetry, Rec"& _ 
                "ognitionAlarm, CREATION_DATE, SEND_FLG, SEND_DATE FROM LOT2_DATA WHERE (LOT_NO ="& _ 
                " @LOT_NO) AND (REAL_START = @REAL_START)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@N_OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "N_OPE_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAY_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAY_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLAN_DAY", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLAN_DAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REAL_START", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_START", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ONLINE_START", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ONLINE_START", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REAL_DAY1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_DAY1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REAL_DAY", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_DAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECIPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECIPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MACHINE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MACHINE_SUB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_SUB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@START_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "START_MSG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@END_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "END_MSG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPERATOR1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPERATOR1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPERATOR2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPERATOR2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QUANTITY", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QUANTITY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOSS_QTY", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOSS_QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIMIT_TIME1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_TIME1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIMIT_FLG1", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_FLG1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIMIT_MSG1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_MSG1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIMIT_TIME2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_TIME2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIMIT_FLG2", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_FLG2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIMIT_MSG2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_MSG2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPE_AREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_AREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INTEG1", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INTEG1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INTEG2", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INTEG2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INTEG3", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INTEG3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INTEG4", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INTEG4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REPEAT_FLG", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REPEAT_FLG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REPEAT_TIME", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REPEAT_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WAFER_STATUS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAFER_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIMIT_FLG", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_FLG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRD_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRD_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRV_BOX_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRV_BOX_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MASK_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MASK_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENT1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MACHINE_PRM1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_PRM1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MACHINE_PRM2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_PRM2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENT2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_START_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_START_MSG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_END_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_END_MSG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENT3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENT4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GOOD_PIECES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GOOD_PIECES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BAD_PIECES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BAD_PIECES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProcessJobID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProcessJobID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CarrierNoIn", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CarrierNoIn", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CarrierNoOut", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CarrierNoOut", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RunTime", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RunTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StopTime", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StopTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AlarmTime", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaterialChangeTime", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaterialChangeTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WIPIdleTime", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WIPIdleTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdleTime", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdleTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalInputChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalInputChip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalProcessChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalProcessChip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ScrapChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ScrapChip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VisualNGChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VisualNGChip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UnknownLostChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UnknownLostChip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RankOutChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RankOutChip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RankType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RankType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KeepSample", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KeepSample", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExcessChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExcessChip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NoChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NoChip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MarkerNGCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkerNGCount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalInputFrame", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalInputFrame", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalProcessFrame", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalProcessFrame", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ScrapFrame", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ScrapFrame", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DummyFrame", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DummyFrame", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RepateFrameCount", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RepateFrameCount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Note", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Note", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotOperationRate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotOperationRate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotMaximumRPM", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotMaximumRPM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotAverageRPM", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotAverageRPM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotAlarmTotalCount", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotAlarmTotalCount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InspectionJudge", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InspectionJudge", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InspectionDefect", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InspectionDefect", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecognitionTotal", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionTotal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecognitionGood", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionGood", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecognitionNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecognitionNG_Visual", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionNG_Visual", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecognitionNG_Bond", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionNG_Bond", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecognitionPass", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionPass", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecognitionRetry", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionRetry", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecognitionAlarm", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionAlarm", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATION_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATION_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEND_FLG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_FLG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEND_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[LOT2_DATA] SET [LOT_NO] = @LOT_NO, [OPE_SEQ] = @OPE_SEQ, [N_OPE_SEQ"& _ 
                "] = @N_OPE_SEQ, [LAY_NO] = @LAY_NO, [PLAN_DAY] = @PLAN_DAY, [REAL_START] = @REAL"& _ 
                "_START, [ONLINE_START] = @ONLINE_START, [REAL_DAY1] = @REAL_DAY1, [REAL_DAY] = @"& _ 
                "REAL_DAY, [RECIPE] = @RECIPE, [MACHINE] = @MACHINE, [MACHINE_SUB] = @MACHINE_SUB"& _ 
                ", [START_MSG] = @START_MSG, [END_MSG] = @END_MSG, [OPERATOR1] = @OPERATOR1, [OPE"& _ 
                "RATOR2] = @OPERATOR2, [QUANTITY] = @QUANTITY, [LOSS_QTY] = @LOSS_QTY, [DATA_NO] "& _ 
                "= @DATA_NO, [LIMIT_TIME1] = @LIMIT_TIME1, [LIMIT_FLG1] = @LIMIT_FLG1, [LIMIT_MSG"& _ 
                "1] = @LIMIT_MSG1, [LIMIT_TIME2] = @LIMIT_TIME2, [LIMIT_FLG2] = @LIMIT_FLG2, [LIM"& _ 
                "IT_MSG2] = @LIMIT_MSG2, [OPE_AREA] = @OPE_AREA, [INTEG1] = @INTEG1, [INTEG2] = @"& _ 
                "INTEG2, [INTEG3] = @INTEG3, [INTEG4] = @INTEG4, [REPEAT_FLG] = @REPEAT_FLG, [REP"& _ 
                "EAT_TIME] = @REPEAT_TIME, [WAFER_STATUS] = @WAFER_STATUS, [LIMIT_FLG] = @LIMIT_F"& _ 
                "LG, [PRD_NAME] = @PRD_NAME, [PRV_BOX_NO] = @PRV_BOX_NO, [MASK_NAME] = @MASK_NAME"& _ 
                ", [COMMENT1] = @COMMENT1, [MACHINE_PRM1] = @MACHINE_PRM1, [MACHINE_PRM2] = @MACH"& _ 
                "INE_PRM2, [COMMENT2] = @COMMENT2, [M_START_MSG] = @M_START_MSG, [M_END_MSG] = @M"& _ 
                "_END_MSG, [COMMENT3] = @COMMENT3, [COMMENT4] = @COMMENT4, [GOOD_PIECES] = @GOOD_"& _ 
                "PIECES, [BAD_PIECES] = @BAD_PIECES, [ProcessJobID] = @ProcessJobID, [CarrierNoIn"& _ 
                "] = @CarrierNoIn, [CarrierNoOut] = @CarrierNoOut, [RunTime] = @RunTime, [StopTim"& _ 
                "e] = @StopTime, [AlarmTime] = @AlarmTime, [MaterialChangeTime] = @MaterialChange"& _ 
                "Time, [WIPIdleTime] = @WIPIdleTime, [IdleTime] = @IdleTime, [TotalInputChip] = @"& _ 
                "TotalInputChip, [TotalProcessChip] = @TotalProcessChip, [ScrapChip] = @ScrapChip"& _ 
                ", [VisualNGChip] = @VisualNGChip, [UnknownLostChip] = @UnknownLostChip, [RankOut"& _ 
                "Chip] = @RankOutChip, [RankType] = @RankType, [KeepSample] = @KeepSample, [Exces"& _ 
                "sChip] = @ExcessChip, [NoChip] = @NoChip, [MarkerNGCount] = @MarkerNGCount, [Tot"& _ 
                "alInputFrame] = @TotalInputFrame, [TotalProcessFrame] = @TotalProcessFrame, [Scr"& _ 
                "apFrame] = @ScrapFrame, [DummyFrame] = @DummyFrame, [RepateFrameCount] = @Repate"& _ 
                "FrameCount, [Note] = @Note, [LotOperationRate] = @LotOperationRate, [LotMaximumR"& _ 
                "PM] = @LotMaximumRPM, [LotAverageRPM] = @LotAverageRPM, [LotAlarmTotalCount] = @"& _ 
                "LotAlarmTotalCount, [InspectionJudge] = @InspectionJudge, [InspectionDefect] = @"& _ 
                "InspectionDefect, [RecognitionTotal] = @RecognitionTotal, [RecognitionGood] = @R"& _ 
                "ecognitionGood, [RecognitionNG] = @RecognitionNG, [RecognitionNG_Visual] = @Reco"& _ 
                "gnitionNG_Visual, [RecognitionNG_Bond] = @RecognitionNG_Bond, [RecognitionPass] "& _ 
                "= @RecognitionPass, [RecognitionRetry] = @RecognitionRetry, [RecognitionAlarm] ="& _ 
                " @RecognitionAlarm, [CREATION_DATE] = @CREATION_DATE, [SEND_FLG] = @SEND_FLG, [S"& _ 
                "END_DATE] = @SEND_DATE WHERE (([LOT_NO] = @Original_LOT_NO) AND ([OPE_SEQ] = @Or"& _ 
                "iginal_OPE_SEQ) AND ([N_OPE_SEQ] = @Original_N_OPE_SEQ) AND ([LAY_NO] = @Origina"& _ 
                "l_LAY_NO) AND ((@IsNull_PLAN_DAY = 1 AND [PLAN_DAY] IS NULL) OR ([PLAN_DAY] = @O"& _ 
                "riginal_PLAN_DAY)) AND ([REAL_START] = @Original_REAL_START) AND ((@IsNull_ONLIN"& _ 
                "E_START = 1 AND [ONLINE_START] IS NULL) OR ([ONLINE_START] = @Original_ONLINE_ST"& _ 
                "ART)) AND ((@IsNull_REAL_DAY1 = 1 AND [REAL_DAY1] IS NULL) OR ([REAL_DAY1] = @Or"& _ 
                "iginal_REAL_DAY1)) AND ((@IsNull_REAL_DAY = 1 AND [REAL_DAY] IS NULL) OR ([REAL_"& _ 
                "DAY] = @Original_REAL_DAY)) AND ((@IsNull_RECIPE = 1 AND [RECIPE] IS NULL) OR (["& _ 
                "RECIPE] = @Original_RECIPE)) AND ((@IsNull_MACHINE = 1 AND [MACHINE] IS NULL) OR"& _ 
                " ([MACHINE] = @Original_MACHINE)) AND ((@IsNull_MACHINE_SUB = 1 AND [MACHINE_SUB"& _ 
                "] IS NULL) OR ([MACHINE_SUB] = @Original_MACHINE_SUB)) AND ((@IsNull_START_MSG ="& _ 
                " 1 AND [START_MSG] IS NULL) OR ([START_MSG] = @Original_START_MSG)) AND ((@IsNul"& _ 
                "l_END_MSG = 1 AND [END_MSG] IS NULL) OR ([END_MSG] = @Original_END_MSG)) AND ((@"& _ 
                "IsNull_OPERATOR1 = 1 AND [OPERATOR1] IS NULL) OR ([OPERATOR1] = @Original_OPERAT"& _ 
                "OR1)) AND ((@IsNull_OPERATOR2 = 1 AND [OPERATOR2] IS NULL) OR ([OPERATOR2] = @Or"& _ 
                "iginal_OPERATOR2)) AND ([QUANTITY] = @Original_QUANTITY) AND ([LOSS_QTY] = @Orig"& _ 
                "inal_LOSS_QTY) AND ([DATA_NO] = @Original_DATA_NO) AND ([LIMIT_TIME1] = @Origina"& _ 
                "l_LIMIT_TIME1) AND ([LIMIT_FLG1] = @Original_LIMIT_FLG1) AND ((@IsNull_LIMIT_MSG"& _ 
                "1 = 1 AND [LIMIT_MSG1] IS NULL) OR ([LIMIT_MSG1] = @Original_LIMIT_MSG1)) AND (["& _ 
                "LIMIT_TIME2] = @Original_LIMIT_TIME2) AND ([LIMIT_FLG2] = @Original_LIMIT_FLG2) "& _ 
                "AND ((@IsNull_LIMIT_MSG2 = 1 AND [LIMIT_MSG2] IS NULL) OR ([LIMIT_MSG2] = @Origi"& _ 
                "nal_LIMIT_MSG2)) AND ((@IsNull_OPE_AREA = 1 AND [OPE_AREA] IS NULL) OR ([OPE_ARE"& _ 
                "A] = @Original_OPE_AREA)) AND ([INTEG1] = @Original_INTEG1) AND ([INTEG2] = @Ori"& _ 
                "ginal_INTEG2) AND ([INTEG3] = @Original_INTEG3) AND ([INTEG4] = @Original_INTEG4"& _ 
                ") AND ([REPEAT_FLG] = @Original_REPEAT_FLG) AND ([REPEAT_TIME] = @Original_REPEA"& _ 
                "T_TIME) AND ((@IsNull_WAFER_STATUS = 1 AND [WAFER_STATUS] IS NULL) OR ([WAFER_ST"& _ 
                "ATUS] = @Original_WAFER_STATUS)) AND ([LIMIT_FLG] = @Original_LIMIT_FLG) AND ((@"& _ 
                "IsNull_PRD_NAME = 1 AND [PRD_NAME] IS NULL) OR ([PRD_NAME] = @Original_PRD_NAME)"& _ 
                ") AND ((@IsNull_PRV_BOX_NO = 1 AND [PRV_BOX_NO] IS NULL) OR ([PRV_BOX_NO] = @Ori"& _ 
                "ginal_PRV_BOX_NO)) AND ((@IsNull_MASK_NAME = 1 AND [MASK_NAME] IS NULL) OR ([MAS"& _ 
                "K_NAME] = @Original_MASK_NAME)) AND ((@IsNull_COMMENT1 = 1 AND [COMMENT1] IS NUL"& _ 
                "L) OR ([COMMENT1] = @Original_COMMENT1)) AND ((@IsNull_MACHINE_PRM1 = 1 AND [MAC"& _ 
                "HINE_PRM1] IS NULL) OR ([MACHINE_PRM1] = @Original_MACHINE_PRM1)) AND ((@IsNull_"& _ 
                "MACHINE_PRM2 = 1 AND [MACHINE_PRM2] IS NULL) OR ([MACHINE_PRM2] = @Original_MACH"& _ 
                "INE_PRM2)) AND ((@IsNull_COMMENT2 = 1 AND [COMMENT2] IS NULL) OR ([COMMENT2] = @"& _ 
                "Original_COMMENT2)) AND ((@IsNull_M_START_MSG = 1 AND [M_START_MSG] IS NULL) OR "& _ 
                "([M_START_MSG] = @Original_M_START_MSG)) AND ((@IsNull_M_END_MSG = 1 AND [M_END_"& _ 
                "MSG] IS NULL) OR ([M_END_MSG] = @Original_M_END_MSG)) AND ((@IsNull_COMMENT3 = 1"& _ 
                " AND [COMMENT3] IS NULL) OR ([COMMENT3] = @Original_COMMENT3)) AND ((@IsNull_COM"& _ 
                "MENT4 = 1 AND [COMMENT4] IS NULL) OR ([COMMENT4] = @Original_COMMENT4)) AND ([GO"& _ 
                "OD_PIECES] = @Original_GOOD_PIECES) AND ([BAD_PIECES] = @Original_BAD_PIECES) AN"& _ 
                "D ((@IsNull_ProcessJobID = 1 AND [ProcessJobID] IS NULL) OR ([ProcessJobID] = @O"& _ 
                "riginal_ProcessJobID)) AND ((@IsNull_CarrierNoIn = 1 AND [CarrierNoIn] IS NULL) "& _ 
                "OR ([CarrierNoIn] = @Original_CarrierNoIn)) AND ((@IsNull_CarrierNoOut = 1 AND ["& _ 
                "CarrierNoOut] IS NULL) OR ([CarrierNoOut] = @Original_CarrierNoOut)) AND ((@IsNu"& _ 
                "ll_RunTime = 1 AND [RunTime] IS NULL) OR ([RunTime] = @Original_RunTime)) AND (("& _ 
                "@IsNull_StopTime = 1 AND [StopTime] IS NULL) OR ([StopTime] = @Original_StopTime"& _ 
                ")) AND ((@IsNull_AlarmTime = 1 AND [AlarmTime] IS NULL) OR ([AlarmTime] = @Origi"& _ 
                "nal_AlarmTime)) AND ((@IsNull_MaterialChangeTime = 1 AND [MaterialChangeTime] IS"& _ 
                " NULL) OR ([MaterialChangeTime] = @Original_MaterialChangeTime)) AND ((@IsNull_W"& _ 
                "IPIdleTime = 1 AND [WIPIdleTime] IS NULL) OR ([WIPIdleTime] = @Original_WIPIdleT"& _ 
                "ime)) AND ((@IsNull_IdleTime = 1 AND [IdleTime] IS NULL) OR ([IdleTime] = @Origi"& _ 
                "nal_IdleTime)) AND ((@IsNull_TotalInputChip = 1 AND [TotalInputChip] IS NULL) OR"& _ 
                " ([TotalInputChip] = @Original_TotalInputChip)) AND ((@IsNull_TotalProcessChip ="& _ 
                " 1 AND [TotalProcessChip] IS NULL) OR ([TotalProcessChip] = @Original_TotalProce"& _ 
                "ssChip)) AND ((@IsNull_ScrapChip = 1 AND [ScrapChip] IS NULL) OR ([ScrapChip] = "& _ 
                "@Original_ScrapChip)) AND ((@IsNull_VisualNGChip = 1 AND [VisualNGChip] IS NULL)"& _ 
                " OR ([VisualNGChip] = @Original_VisualNGChip)) AND ((@IsNull_UnknownLostChip = 1"& _ 
                " AND [UnknownLostChip] IS NULL) OR ([UnknownLostChip] = @Original_UnknownLostChi"& _ 
                "p)) AND ((@IsNull_RankOutChip = 1 AND [RankOutChip] IS NULL) OR ([RankOutChip] ="& _ 
                " @Original_RankOutChip)) AND ((@IsNull_RankType = 1 AND [RankType] IS NULL) OR ("& _ 
                "[RankType] = @Original_RankType)) AND ((@IsNull_KeepSample = 1 AND [KeepSample] "& _ 
                "IS NULL) OR ([KeepSample] = @Original_KeepSample)) AND ((@IsNull_ExcessChip = 1 "& _ 
                "AND [ExcessChip] IS NULL) OR ([ExcessChip] = @Original_ExcessChip)) AND ((@IsNul"& _ 
                "l_NoChip = 1 AND [NoChip] IS NULL) OR ([NoChip] = @Original_NoChip)) AND ((@IsNu"& _ 
                "ll_MarkerNGCount = 1 AND [MarkerNGCount] IS NULL) OR ([MarkerNGCount] = @Origina"& _ 
                "l_MarkerNGCount)) AND ((@IsNull_TotalInputFrame = 1 AND [TotalInputFrame] IS NUL"& _ 
                "L) OR ([TotalInputFrame] = @Original_TotalInputFrame)) AND ((@IsNull_TotalProces"& _ 
                "sFrame = 1 AND [TotalProcessFrame] IS NULL) OR ([TotalProcessFrame] = @Original_"& _ 
                "TotalProcessFrame)) AND ((@IsNull_ScrapFrame = 1 AND [ScrapFrame] IS NULL) OR (["& _ 
                "ScrapFrame] = @Original_ScrapFrame)) AND ((@IsNull_DummyFrame = 1 AND [DummyFram"& _ 
                "e] IS NULL) OR ([DummyFrame] = @Original_DummyFrame)) AND ((@IsNull_RepateFrameC"& _ 
                "ount = 1 AND [RepateFrameCount] IS NULL) OR ([RepateFrameCount] = @Original_Repa"& _ 
                "teFrameCount)) AND ((@IsNull_Note = 1 AND [Note] IS NULL) OR ([Note] = @Original"& _ 
                "_Note)) AND ((@IsNull_LotOperationRate = 1 AND [LotOperationRate] IS NULL) OR (["& _ 
                "LotOperationRate] = @Original_LotOperationRate)) AND ((@IsNull_LotMaximumRPM = 1"& _ 
                " AND [LotMaximumRPM] IS NULL) OR ([LotMaximumRPM] = @Original_LotMaximumRPM)) AN"& _ 
                "D ((@IsNull_LotAverageRPM = 1 AND [LotAverageRPM] IS NULL) OR ([LotAverageRPM] ="& _ 
                " @Original_LotAverageRPM)) AND ((@IsNull_LotAlarmTotalCount = 1 AND [LotAlarmTot"& _ 
                "alCount] IS NULL) OR ([LotAlarmTotalCount] = @Original_LotAlarmTotalCount)) AND "& _ 
                "((@IsNull_InspectionJudge = 1 AND [InspectionJudge] IS NULL) OR ([InspectionJudg"& _ 
                "e] = @Original_InspectionJudge)) AND ((@IsNull_InspectionDefect = 1 AND [Inspect"& _ 
                "ionDefect] IS NULL) OR ([InspectionDefect] = @Original_InspectionDefect)) AND (("& _ 
                "@IsNull_RecognitionTotal = 1 AND [RecognitionTotal] IS NULL) OR ([RecognitionTot"& _ 
                "al] = @Original_RecognitionTotal)) AND ((@IsNull_RecognitionGood = 1 AND [Recogn"& _ 
                "itionGood] IS NULL) OR ([RecognitionGood] = @Original_RecognitionGood)) AND ((@I"& _ 
                "sNull_RecognitionNG = 1 AND [RecognitionNG] IS NULL) OR ([RecognitionNG] = @Orig"& _ 
                "inal_RecognitionNG)) AND ((@IsNull_RecognitionNG_Visual = 1 AND [RecognitionNG_V"& _ 
                "isual] IS NULL) OR ([RecognitionNG_Visual] = @Original_RecognitionNG_Visual)) AN"& _ 
                "D ((@IsNull_RecognitionNG_Bond = 1 AND [RecognitionNG_Bond] IS NULL) OR ([Recogn"& _ 
                "itionNG_Bond] = @Original_RecognitionNG_Bond)) AND ((@IsNull_RecognitionPass = 1"& _ 
                " AND [RecognitionPass] IS NULL) OR ([RecognitionPass] = @Original_RecognitionPas"& _ 
                "s)) AND ((@IsNull_RecognitionRetry = 1 AND [RecognitionRetry] IS NULL) OR ([Reco"& _ 
                "gnitionRetry] = @Original_RecognitionRetry)) AND ((@IsNull_RecognitionAlarm = 1 "& _ 
                "AND [RecognitionAlarm] IS NULL) OR ([RecognitionAlarm] = @Original_RecognitionAl"& _ 
                "arm)) AND ((@IsNull_CREATION_DATE = 1 AND [CREATION_DATE] IS NULL) OR ([CREATION"& _ 
                "_DATE] = @Original_CREATION_DATE)) AND ((@IsNull_SEND_FLG = 1 AND [SEND_FLG] IS "& _ 
                "NULL) OR ([SEND_FLG] = @Original_SEND_FLG)) AND ((@IsNull_SEND_DATE = 1 AND [SEN"& _ 
                "D_DATE] IS NULL) OR ([SEND_DATE] = @Original_SEND_DATE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT LOT_NO, OPE_S"& _ 
                "EQ, N_OPE_SEQ, LAY_NO, PLAN_DAY, REAL_START, ONLINE_START, REAL_DAY1, REAL_DAY, "& _ 
                "RECIPE, MACHINE, MACHINE_SUB, START_MSG, END_MSG, OPERATOR1, OPERATOR2, QUANTITY"& _ 
                ", LOSS_QTY, DATA_NO, LIMIT_TIME1, LIMIT_FLG1, LIMIT_MSG1, LIMIT_TIME2, LIMIT_FLG"& _ 
                "2, LIMIT_MSG2, OPE_AREA, INTEG1, INTEG2, INTEG3, INTEG4, REPEAT_FLG, REPEAT_TIME"& _ 
                ", WAFER_STATUS, LIMIT_FLG, PRD_NAME, PRV_BOX_NO, MASK_NAME, COMMENT1, MACHINE_PR"& _ 
                "M1, MACHINE_PRM2, COMMENT2, M_START_MSG, M_END_MSG, COMMENT3, COMMENT4, GOOD_PIE"& _ 
                "CES, BAD_PIECES, ProcessJobID, CarrierNoIn, CarrierNoOut, RunTime, StopTime, Ala"& _ 
                "rmTime, MaterialChangeTime, WIPIdleTime, IdleTime, TotalInputChip, TotalProcessC"& _ 
                "hip, ScrapChip, VisualNGChip, UnknownLostChip, RankOutChip, RankType, KeepSample"& _ 
                ", ExcessChip, NoChip, MarkerNGCount, TotalInputFrame, TotalProcessFrame, ScrapFr"& _ 
                "ame, DummyFrame, RepateFrameCount, Note, LotOperationRate, LotMaximumRPM, LotAve"& _ 
                "rageRPM, LotAlarmTotalCount, InspectionJudge, InspectionDefect, RecognitionTotal"& _ 
                ", RecognitionGood, RecognitionNG, RecognitionNG_Visual, RecognitionNG_Bond, Reco"& _ 
                "gnitionPass, RecognitionRetry, RecognitionAlarm, CREATION_DATE, SEND_FLG, SEND_D"& _ 
                "ATE FROM LOT2_DATA WHERE (LOT_NO = @LOT_NO) AND (REAL_START = @REAL_START)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@N_OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "N_OPE_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAY_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAY_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLAN_DAY", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLAN_DAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REAL_START", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_START", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ONLINE_START", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ONLINE_START", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REAL_DAY1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_DAY1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REAL_DAY", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_DAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECIPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECIPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MACHINE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MACHINE_SUB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_SUB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@START_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "START_MSG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@END_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "END_MSG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPERATOR1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPERATOR1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPERATOR2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPERATOR2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QUANTITY", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QUANTITY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOSS_QTY", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOSS_QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIMIT_TIME1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_TIME1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIMIT_FLG1", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_FLG1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIMIT_MSG1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_MSG1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIMIT_TIME2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_TIME2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIMIT_FLG2", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_FLG2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIMIT_MSG2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_MSG2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPE_AREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_AREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INTEG1", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INTEG1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INTEG2", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INTEG2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INTEG3", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INTEG3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INTEG4", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INTEG4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REPEAT_FLG", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REPEAT_FLG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REPEAT_TIME", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REPEAT_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WAFER_STATUS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAFER_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIMIT_FLG", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_FLG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRD_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRD_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRV_BOX_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRV_BOX_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MASK_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MASK_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENT1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MACHINE_PRM1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_PRM1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MACHINE_PRM2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_PRM2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENT2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_START_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_START_MSG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_END_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_END_MSG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENT3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENT4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GOOD_PIECES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GOOD_PIECES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BAD_PIECES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BAD_PIECES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProcessJobID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProcessJobID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CarrierNoIn", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CarrierNoIn", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CarrierNoOut", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CarrierNoOut", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RunTime", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RunTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StopTime", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StopTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AlarmTime", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaterialChangeTime", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaterialChangeTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WIPIdleTime", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WIPIdleTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdleTime", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdleTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalInputChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalInputChip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalProcessChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalProcessChip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ScrapChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ScrapChip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VisualNGChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VisualNGChip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UnknownLostChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UnknownLostChip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RankOutChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RankOutChip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RankType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RankType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KeepSample", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KeepSample", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExcessChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExcessChip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NoChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NoChip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MarkerNGCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkerNGCount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalInputFrame", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalInputFrame", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalProcessFrame", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalProcessFrame", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ScrapFrame", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ScrapFrame", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DummyFrame", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DummyFrame", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RepateFrameCount", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RepateFrameCount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Note", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Note", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotOperationRate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotOperationRate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotMaximumRPM", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotMaximumRPM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotAverageRPM", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotAverageRPM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotAlarmTotalCount", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotAlarmTotalCount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InspectionJudge", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InspectionJudge", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InspectionDefect", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InspectionDefect", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecognitionTotal", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionTotal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecognitionGood", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionGood", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecognitionNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecognitionNG_Visual", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionNG_Visual", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecognitionNG_Bond", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionNG_Bond", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecognitionPass", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionPass", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecognitionRetry", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionRetry", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecognitionAlarm", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionAlarm", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATION_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATION_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEND_FLG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_FLG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEND_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_N_OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "N_OPE_SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LAY_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAY_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PLAN_DAY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLAN_DAY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLAN_DAY", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLAN_DAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REAL_START", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_START", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ONLINE_START", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ONLINE_START", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ONLINE_START", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ONLINE_START", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REAL_DAY1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_DAY1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REAL_DAY1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_DAY1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REAL_DAY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_DAY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REAL_DAY", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_DAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RECIPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECIPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RECIPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECIPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MACHINE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MACHINE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MACHINE_SUB", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_SUB", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MACHINE_SUB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_SUB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_START_MSG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "START_MSG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_START_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "START_MSG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_END_MSG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "END_MSG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_END_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "END_MSG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OPERATOR1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPERATOR1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPERATOR1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPERATOR1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OPERATOR2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPERATOR2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPERATOR2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPERATOR2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QUANTITY", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QUANTITY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOSS_QTY", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOSS_QTY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATA_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LIMIT_TIME1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_TIME1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LIMIT_FLG1", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_FLG1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LIMIT_MSG1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_MSG1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LIMIT_MSG1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_MSG1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LIMIT_TIME2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_TIME2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LIMIT_FLG2", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_FLG2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LIMIT_MSG2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_MSG2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LIMIT_MSG2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_MSG2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OPE_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_AREA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPE_AREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_AREA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INTEG1", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INTEG1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INTEG2", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INTEG2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INTEG3", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INTEG3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INTEG4", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INTEG4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REPEAT_FLG", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REPEAT_FLG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REPEAT_TIME", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REPEAT_TIME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WAFER_STATUS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAFER_STATUS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WAFER_STATUS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAFER_STATUS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LIMIT_FLG", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIMIT_FLG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRD_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRD_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRD_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRD_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRV_BOX_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRV_BOX_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRV_BOX_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRV_BOX_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MASK_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MASK_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MASK_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MASK_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COMMENT1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COMMENT1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MACHINE_PRM1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_PRM1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MACHINE_PRM1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_PRM1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MACHINE_PRM2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_PRM2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MACHINE_PRM2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_PRM2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COMMENT2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COMMENT2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_M_START_MSG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_START_MSG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_M_START_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_START_MSG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_M_END_MSG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_END_MSG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_M_END_MSG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_END_MSG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COMMENT3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COMMENT3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COMMENT4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COMMENT4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GOOD_PIECES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GOOD_PIECES", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BAD_PIECES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BAD_PIECES", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ProcessJobID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProcessJobID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProcessJobID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProcessJobID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CarrierNoIn", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CarrierNoIn", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CarrierNoIn", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CarrierNoIn", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CarrierNoOut", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CarrierNoOut", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CarrierNoOut", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CarrierNoOut", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RunTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RunTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RunTime", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RunTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StopTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StopTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StopTime", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StopTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AlarmTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AlarmTime", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MaterialChangeTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaterialChangeTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MaterialChangeTime", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaterialChangeTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WIPIdleTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WIPIdleTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WIPIdleTime", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WIPIdleTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdleTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdleTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdleTime", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdleTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalInputChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalInputChip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalInputChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalInputChip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalProcessChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalProcessChip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalProcessChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalProcessChip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ScrapChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ScrapChip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ScrapChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ScrapChip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VisualNGChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VisualNGChip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VisualNGChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VisualNGChip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UnknownLostChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UnknownLostChip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UnknownLostChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UnknownLostChip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RankOutChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RankOutChip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RankOutChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RankOutChip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RankType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RankType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RankType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RankType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_KeepSample", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KeepSample", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_KeepSample", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KeepSample", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ExcessChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExcessChip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ExcessChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExcessChip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NoChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NoChip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NoChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NoChip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MarkerNGCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkerNGCount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MarkerNGCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkerNGCount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalInputFrame", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalInputFrame", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalInputFrame", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalInputFrame", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalProcessFrame", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalProcessFrame", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalProcessFrame", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalProcessFrame", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ScrapFrame", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ScrapFrame", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ScrapFrame", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ScrapFrame", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DummyFrame", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DummyFrame", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DummyFrame", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DummyFrame", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RepateFrameCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RepateFrameCount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RepateFrameCount", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RepateFrameCount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Note", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Note", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Note", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Note", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LotOperationRate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotOperationRate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotOperationRate", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotOperationRate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LotMaximumRPM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotMaximumRPM", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotMaximumRPM", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotMaximumRPM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LotAverageRPM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotAverageRPM", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotAverageRPM", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotAverageRPM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LotAlarmTotalCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotAlarmTotalCount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotAlarmTotalCount", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotAlarmTotalCount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_InspectionJudge", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InspectionJudge", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InspectionJudge", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InspectionJudge", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_InspectionDefect", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InspectionDefect", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InspectionDefect", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InspectionDefect", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RecognitionTotal", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionTotal", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecognitionTotal", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionTotal", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RecognitionGood", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionGood", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecognitionGood", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionGood", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RecognitionNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecognitionNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RecognitionNG_Visual", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionNG_Visual", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecognitionNG_Visual", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionNG_Visual", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RecognitionNG_Bond", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionNG_Bond", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecognitionNG_Bond", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionNG_Bond", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RecognitionPass", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionPass", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecognitionPass", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionPass", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RecognitionRetry", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionRetry", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecognitionRetry", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionRetry", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RecognitionAlarm", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionAlarm", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecognitionAlarm", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecognitionAlarm", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATION_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATION_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATION_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATION_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SEND_FLG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_FLG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEND_FLG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_FLG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SEND_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEND_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Rohm.Apcs.Tdc.My.MySettings.Default.APCSDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT LOT_NO, OPE_SEQ, N_OPE_SEQ, LAY_NO, PLAN_DAY, REAL_START, ONLINE_START, RE"& _ 
                "AL_DAY1, REAL_DAY, RECIPE, MACHINE, MACHINE_SUB, START_MSG, END_MSG, OPERATOR1, "& _ 
                "OPERATOR2, QUANTITY, LOSS_QTY, DATA_NO, LIMIT_TIME1, LIMIT_FLG1, LIMIT_MSG1, LIM"& _ 
                "IT_TIME2, LIMIT_FLG2, LIMIT_MSG2, OPE_AREA, INTEG1, INTEG2, INTEG3, INTEG4, REPE"& _ 
                "AT_FLG, REPEAT_TIME, WAFER_STATUS, LIMIT_FLG, PRD_NAME, PRV_BOX_NO, MASK_NAME, C"& _ 
                "OMMENT1, MACHINE_PRM1, MACHINE_PRM2, COMMENT2, M_START_MSG, M_END_MSG, COMMENT3,"& _ 
                " COMMENT4, GOOD_PIECES, BAD_PIECES, ProcessJobID, CarrierNoIn, CarrierNoOut, Run"& _ 
                "Time, StopTime, AlarmTime, MaterialChangeTime, WIPIdleTime, IdleTime, TotalInput"& _ 
                "Chip, TotalProcessChip, ScrapChip, VisualNGChip, UnknownLostChip, RankOutChip, R"& _ 
                "ankType, KeepSample, ExcessChip, NoChip, MarkerNGCount, TotalInputFrame, TotalPr"& _ 
                "ocessFrame, ScrapFrame, DummyFrame, RepateFrameCount, Note, LotOperationRate, Lo"& _ 
                "tMaximumRPM, LotAverageRPM, LotAlarmTotalCount, InspectionJudge, InspectionDefec"& _ 
                "t, RecognitionTotal, RecognitionGood, RecognitionNG, RecognitionNG_Visual, Recog"& _ 
                "nitionNG_Bond, RecognitionPass, RecognitionRetry, RecognitionAlarm, CREATION_DAT"& _ 
                "E, SEND_FLG, SEND_DATE FROM dbo.LOT2_DATA"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT AlarmTime, BAD_PIECES, COMMENT1, COMMENT2, COMMENT3, COMMENT4, CREATION_DA"& _ 
                "TE, CarrierNoIn, CarrierNoOut, DATA_NO, DummyFrame, END_MSG, ExcessChip, GOOD_PI"& _ 
                "ECES, INTEG1, INTEG2, INTEG3, INTEG4, IdleTime, InspectionDefect, InspectionJudg"& _ 
                "e, KeepSample, LAY_NO, LIMIT_FLG, LIMIT_FLG1, LIMIT_FLG2, LIMIT_MSG1, LIMIT_MSG2"& _ 
                ", LIMIT_TIME1, LIMIT_TIME2, LOSS_QTY, LOT_NO, LotAlarmTotalCount, LotAverageRPM,"& _ 
                " LotMaximumRPM, LotOperationRate, MACHINE, MACHINE_PRM1, MACHINE_PRM2, MACHINE_S"& _ 
                "UB, MASK_NAME, M_END_MSG, M_START_MSG, MarkerNGCount, MaterialChangeTime, N_OPE_"& _ 
                "SEQ, NoChip, Note, ONLINE_START, OPERATOR1, OPERATOR2, OPE_AREA, OPE_SEQ, PLAN_D"& _ 
                "AY, PRD_NAME, PRV_BOX_NO, ProcessJobID, QUANTITY, REAL_DAY, REAL_DAY1, REAL_STAR"& _ 
                "T, RECIPE, REPEAT_FLG, REPEAT_TIME, RankOutChip, RankType, RecognitionAlarm, Rec"& _ 
                "ognitionGood, RecognitionNG, RecognitionNG_Bond, RecognitionNG_Visual, Recogniti"& _ 
                "onPass, RecognitionRetry, RecognitionTotal, RepateFrameCount, RunTime, SEND_DATE"& _ 
                ", SEND_FLG, START_MSG, ScrapChip, ScrapFrame, StopTime, TotalInputChip, TotalInp"& _ 
                "utFrame, TotalProcessChip, TotalProcessFrame, UnknownLostChip, VisualNGChip, WAF"& _ 
                "ER_STATUS, WIPIdleTime FROM LOT2_DATA WHERE (LOT_NO = @LOT_NO) AND (OPE_SEQ = @O"& _ 
                "PE_SEQ)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 13, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT        AlarmTime, BAD_PIECES, COMMENT1, COMMENT2, COMMENT3, COMMENT4, CREA"& _ 
                "TION_DATE, CarrierNoIn, CarrierNoOut, DATA_NO, DummyFrame, END_MSG, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"          "& _ 
                "               ExcessChip, GOOD_PIECES, INTEG1, INTEG2, INTEG3, INTEG4, IdleTime"& _ 
                ", InspectionDefect, InspectionJudge, KeepSample, LAY_NO, LIMIT_FLG, LIMIT_FLG1, "& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         LIMIT_FLG2, LIMIT_MSG1, LIMIT_MSG2, LIMIT_TIME1, LIMI"& _ 
                "T_TIME2, LOSS_QTY, LOT_NO, LotAlarmTotalCount, LotAverageRPM, LotMaximumRPM, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "& _ 
                "                        LotOperationRate, MACHINE, MACHINE_PRM1, MACHINE_PRM2, M"& _ 
                "ACHINE_SUB, MASK_NAME, M_END_MSG, M_START_MSG, MarkerNGCount, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                "& _ 
                "         MaterialChangeTime, N_OPE_SEQ, NoChip, Note, ONLINE_START, OPERATOR1, O"& _ 
                "PERATOR2, OPE_AREA, OPE_SEQ, PLAN_DAY, PRD_NAME, PRV_BOX_NO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 "& _ 
                "        ProcessJobID, QUANTITY, REAL_DAY, REAL_DAY1, REAL_START, RECIPE, REPEAT_"& _ 
                "FLG, REPEAT_TIME, RankOutChip, RankType, RecognitionAlarm, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                   "& _ 
                "      RecognitionGood, RecognitionNG, RecognitionNG_Bond, RecognitionNG_Visual, "& _ 
                "RecognitionPass, RecognitionRetry, RecognitionTotal, RepateFrameCount, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "                  RunTime, SEND_DATE, SEND_FLG, START_MSG, ScrapChip, ScrapFrame"& _ 
                ", StopTime, TotalInputChip, TotalInputFrame, TotalProcessChip, TotalProcessFrame"& _ 
                ", "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         UnknownLostChip, VisualNGChip, WAFER_STATUS, WIPIdl"& _ 
                "eTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            LOT2_DATA"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (OPE_SEQ = @OPE_SEQ) AND (LOT_NO "& _ 
                "= @LOT_NO) AND (MACHINE = @MACHINE) AND (MACHINE_SUB = @MACHINE_SUB)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 13, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MACHINE", Global.System.Data.SqlDbType.VarChar, 12, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MACHINE_SUB", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHINE_SUB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT AlarmTime, BAD_PIECES, COMMENT1, COMMENT2, COMMENT3, COMMENT4, CREATION_DA"& _ 
                "TE, CarrierNoIn, CarrierNoOut, DATA_NO, DummyFrame, END_MSG, ExcessChip, GOOD_PI"& _ 
                "ECES, INTEG1, INTEG2, INTEG3, INTEG4, IdleTime, InspectionDefect, InspectionJudg"& _ 
                "e, KeepSample, LAY_NO, LIMIT_FLG, LIMIT_FLG1, LIMIT_FLG2, LIMIT_MSG1, LIMIT_MSG2"& _ 
                ", LIMIT_TIME1, LIMIT_TIME2, LOSS_QTY, LOT_NO, LotAlarmTotalCount, LotAverageRPM,"& _ 
                " LotMaximumRPM, LotOperationRate, MACHINE, MACHINE_PRM1, MACHINE_PRM2, MACHINE_S"& _ 
                "UB, MASK_NAME, M_END_MSG, M_START_MSG, MarkerNGCount, MaterialChangeTime, N_OPE_"& _ 
                "SEQ, NoChip, Note, ONLINE_START, OPERATOR1, OPERATOR2, OPE_AREA, OPE_SEQ, PLAN_D"& _ 
                "AY, PRD_NAME, PRV_BOX_NO, ProcessJobID, QUANTITY, REAL_DAY, REAL_DAY1, REAL_STAR"& _ 
                "T, RECIPE, REPEAT_FLG, REPEAT_TIME, RankOutChip, RankType, RecognitionAlarm, Rec"& _ 
                "ognitionGood, RecognitionNG, RecognitionNG_Bond, RecognitionNG_Visual, Recogniti"& _ 
                "onPass, RecognitionRetry, RecognitionTotal, RepateFrameCount, RunTime, SEND_DATE"& _ 
                ", SEND_FLG, START_MSG, ScrapChip, ScrapFrame, StopTime, TotalInputChip, TotalInp"& _ 
                "utFrame, TotalProcessChip, TotalProcessFrame, UnknownLostChip, VisualNGChip, WAF"& _ 
                "ER_STATUS, WIPIdleTime FROM LOT2_DATA WHERE (LOT_NO = @LOT_NO) AND (REAL_START ="& _ 
                " @REAL_START)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 13, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REAL_START", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_START", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As APCSDBDataSet.LOT2_DATADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As APCSDBDataSet.LOT2_DATADataTable = New APCSDBDataSet.LOT2_DATADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByLotNoOpeSeq(ByVal LOT_NO As String, ByVal OPE_SEQ As Short) As APCSDBDataSet.LOT2_DATADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(LOT_NO,String)
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(OPE_SEQ,Short)
            Dim dataTable As APCSDBDataSet.LOT2_DATADataTable = New APCSDBDataSet.LOT2_DATADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByMCNoLotNoOpeSeqMachineSub(ByVal OPE_SEQ As Short, ByVal LOT_NO As String, ByVal MACHINE As String, ByVal MACHINE_SUB As String) As APCSDBDataSet.LOT2_DATADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(OPE_SEQ,Short)
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(LOT_NO,String)
            End If
            If (MACHINE Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(MACHINE,String)
            End If
            If (MACHINE_SUB Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(MACHINE_SUB,String)
            End If
            Dim dataTable As APCSDBDataSet.LOT2_DATADataTable = New APCSDBDataSet.LOT2_DATADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByPK(ByVal LOT_NO As String, ByVal REAL_START As Date) As APCSDBDataSet.LOT2_DATADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(LOT_NO,String)
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(REAL_START,Date)
            Dim dataTable As APCSDBDataSet.LOT2_DATADataTable = New APCSDBDataSet.LOT2_DATADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As APCSDBDataSet.LOT2_DATADataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As APCSDBDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "LOT2_DATA")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class LOT2_TABLETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "LOT2_TABLE"
            tableMapping.ColumnMappings.Add("LOT_NO", "LOT_NO")
            tableMapping.ColumnMappings.Add("DVI_NO", "DVI_NO")
            tableMapping.ColumnMappings.Add("PRD_NAME", "PRD_NAME")
            tableMapping.ColumnMappings.Add("IN_DAY", "IN_DAY")
            tableMapping.ColumnMappings.Add("OUT_DAY", "OUT_DAY")
            tableMapping.ColumnMappings.Add("OPE_SEQ", "OPE_SEQ")
            tableMapping.ColumnMappings.Add("PRD_PIECE", "PRD_PIECE")
            tableMapping.ColumnMappings.Add("INP_PIECE", "INP_PIECE")
            tableMapping.ColumnMappings.Add("OUT_PIECE", "OUT_PIECE")
            tableMapping.ColumnMappings.Add("REAL_DAY", "REAL_DAY")
            tableMapping.ColumnMappings.Add("BATCH_NO", "BATCH_NO")
            tableMapping.ColumnMappings.Add("BATCH_SUB", "BATCH_SUB")
            tableMapping.ColumnMappings.Add("MATER_NAME", "MATER_NAME")
            tableMapping.ColumnMappings.Add("MATER_SNAME", "MATER_SNAME")
            tableMapping.ColumnMappings.Add("MAKER", "MAKER")
            tableMapping.ColumnMappings.Add("Y_LEVEL", "Y_LEVEL")
            tableMapping.ColumnMappings.Add("STATUS1", "STATUS1")
            tableMapping.ColumnMappings.Add("STATUS2", "STATUS2")
            tableMapping.ColumnMappings.Add("CYCLE", "CYCLE")
            tableMapping.ColumnMappings.Add("BOX_NO", "BOX_NO")
            tableMapping.ColumnMappings.Add("PRV_BOX_NO", "PRV_BOX_NO")
            tableMapping.ColumnMappings.Add("WAFER_STATUS", "WAFER_STATUS")
            tableMapping.ColumnMappings.Add("LMT_STR_TIME", "LMT_STR_TIME")
            tableMapping.ColumnMappings.Add("WAGON_NO", "WAGON_NO")
            tableMapping.ColumnMappings.Add("REP_OPE_SEQ", "REP_OPE_SEQ")
            tableMapping.ColumnMappings.Add("REPEAT_QNT", "REPEAT_QNT")
            tableMapping.ColumnMappings.Add("TOTAL_MASK", "TOTAL_MASK")
            tableMapping.ColumnMappings.Add("STATUS2_SAVE", "STATUS2_SAVE")
            tableMapping.ColumnMappings.Add("REAL_START", "REAL_START")
            tableMapping.ColumnMappings.Add("TRO_TIME", "TRO_TIME")
            tableMapping.ColumnMappings.Add("SISAKU_FLG", "SISAKU_FLG")
            tableMapping.ColumnMappings.Add("PARENT_LOT", "PARENT_LOT")
            tableMapping.ColumnMappings.Add("OPE_AREA", "OPE_AREA")
            tableMapping.ColumnMappings.Add("OPE_CHG_FLG", "OPE_CHG_FLG")
            tableMapping.ColumnMappings.Add("PLT_OPE_SEQ1", "PLT_OPE_SEQ1")
            tableMapping.ColumnMappings.Add("PLT_OPE_SEQ2", "PLT_OPE_SEQ2")
            tableMapping.ColumnMappings.Add("PILOT_QNT", "PILOT_QNT")
            tableMapping.ColumnMappings.Add("TOTAL_QNT", "TOTAL_QNT")
            tableMapping.ColumnMappings.Add("COMMENT", "COMMENT")
            tableMapping.ColumnMappings.Add("ROHM_ORDER_MODEL_NAME_O", "ROHM_ORDER_MODEL_NAME_O")
            tableMapping.ColumnMappings.Add("ORDER_NO", "ORDER_NO")
            tableMapping.ColumnMappings.Add("FT_MODEL_NAME", "FT_MODEL_NAME")
            tableMapping.ColumnMappings.Add("TP_RANK", "TP_RANK")
            tableMapping.ColumnMappings.Add("WARI_STOCK_KBN", "WARI_STOCK_KBN")
            tableMapping.ColumnMappings.Add("WARI_INSTRUCT_KBN", "WARI_INSTRUCT_KBN")
            tableMapping.ColumnMappings.Add("FORM_NAME", "FORM_NAME")
            tableMapping.ColumnMappings.Add("GOOD_PIECES", "GOOD_PIECES")
            tableMapping.ColumnMappings.Add("BAD_PIECES", "BAD_PIECES")
            tableMapping.ColumnMappings.Add("ShipTargetChipCount", "ShipTargetChipCount")
            tableMapping.ColumnMappings.Add("OfficialChipCount", "OfficialChipCount")
            tableMapping.ColumnMappings.Add("RestLotInitialChipCount", "RestLotInitialChipCount")
            tableMapping.ColumnMappings.Add("RestLotInitialInputMagazine", "RestLotInitialInputMagazine")
            tableMapping.ColumnMappings.Add("RestLotInitialInputFrame", "RestLotInitialInputFrame")
            tableMapping.ColumnMappings.Add("Section", "Section")
            tableMapping.ColumnMappings.Add("InvoiceNo", "InvoiceNo")
            tableMapping.ColumnMappings.Add("QCCheckDBNG", "QCCheckDBNG")
            tableMapping.ColumnMappings.Add("QCCheckDBPNashi", "QCCheckDBPNashi")
            tableMapping.ColumnMappings.Add("QCCheckHajikiPullShaer", "QCCheckHajikiPullShaer")
            tableMapping.ColumnMappings.Add("QCCheckWBNG", "QCCheckWBNG")
            tableMapping.ColumnMappings.Add("QCCheckWBInsNG", "QCCheckWBInsNG")
            tableMapping.ColumnMappings.Add("QCCheckOSNG", "QCCheckOSNG")
            tableMapping.ColumnMappings.Add("QCCheckJudge", "QCCheckJudge")
            tableMapping.ColumnMappings.Add("QCCheckerPD", "QCCheckerPD")
            tableMapping.ColumnMappings.Add("QCCheckerQC", "QCCheckerQC")
            tableMapping.ColumnMappings.Add("QCAQIIssueDate", "QCAQIIssueDate")
            tableMapping.ColumnMappings.Add("QCCheckExceptOSNG", "QCCheckExceptOSNG")
            tableMapping.ColumnMappings.Add("QCMainReasonExceptOSNG", "QCMainReasonExceptOSNG")
            tableMapping.ColumnMappings.Add("QCNGChipInExceptOSNG", "QCNGChipInExceptOSNG")
            tableMapping.ColumnMappings.Add("QCNGIncludeExceptOSNG", "QCNGIncludeExceptOSNG")
            tableMapping.ColumnMappings.Add("QCNGJudgeExceptOSNG", "QCNGJudgeExceptOSNG")
            tableMapping.ColumnMappings.Add("QCNGChipInGoodChip", "QCNGChipInGoodChip")
            tableMapping.ColumnMappings.Add("QCNGIncludeGoodChip", "QCNGIncludeGoodChip")
            tableMapping.ColumnMappings.Add("QCNGJudgeGoodChip", "QCNGJudgeGoodChip")
            tableMapping.ColumnMappings.Add("CREATION_DATE", "CREATION_DATE")
            tableMapping.ColumnMappings.Add("SEND_FLG", "SEND_FLG")
            tableMapping.ColumnMappings.Add("SEND_DATE", "SEND_DATE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[LOT2_TABLE] WHERE (([LOT_NO] = @Original_LOT_NO) AND ([DVI_NO]"& _ 
                " = @Original_DVI_NO) AND ([PRD_NAME] = @Original_PRD_NAME) AND ([IN_DAY] = @Orig"& _ 
                "inal_IN_DAY) AND ([OUT_DAY] = @Original_OUT_DAY) AND ([OPE_SEQ] = @Original_OPE_"& _ 
                "SEQ) AND ([PRD_PIECE] = @Original_PRD_PIECE) AND ([INP_PIECE] = @Original_INP_PI"& _ 
                "ECE) AND ([OUT_PIECE] = @Original_OUT_PIECE) AND ((@IsNull_REAL_DAY = 1 AND [REA"& _ 
                "L_DAY] IS NULL) OR ([REAL_DAY] = @Original_REAL_DAY)) AND ((@IsNull_BATCH_NO = 1"& _ 
                " AND [BATCH_NO] IS NULL) OR ([BATCH_NO] = @Original_BATCH_NO)) AND ((@IsNull_BAT"& _ 
                "CH_SUB = 1 AND [BATCH_SUB] IS NULL) OR ([BATCH_SUB] = @Original_BATCH_SUB)) AND "& _ 
                "((@IsNull_MATER_NAME = 1 AND [MATER_NAME] IS NULL) OR ([MATER_NAME] = @Original_"& _ 
                "MATER_NAME)) AND ((@IsNull_MATER_SNAME = 1 AND [MATER_SNAME] IS NULL) OR ([MATER"& _ 
                "_SNAME] = @Original_MATER_SNAME)) AND ((@IsNull_MAKER = 1 AND [MAKER] IS NULL) O"& _ 
                "R ([MAKER] = @Original_MAKER)) AND ([Y_LEVEL] = @Original_Y_LEVEL) AND ([STATUS1"& _ 
                "] = @Original_STATUS1) AND ([STATUS2] = @Original_STATUS2) AND ([CYCLE] = @Origi"& _ 
                "nal_CYCLE) AND ((@IsNull_BOX_NO = 1 AND [BOX_NO] IS NULL) OR ([BOX_NO] = @Origin"& _ 
                "al_BOX_NO)) AND ((@IsNull_PRV_BOX_NO = 1 AND [PRV_BOX_NO] IS NULL) OR ([PRV_BOX_"& _ 
                "NO] = @Original_PRV_BOX_NO)) AND ((@IsNull_WAFER_STATUS = 1 AND [WAFER_STATUS] I"& _ 
                "S NULL) OR ([WAFER_STATUS] = @Original_WAFER_STATUS)) AND ((@IsNull_LMT_STR_TIME"& _ 
                " = 1 AND [LMT_STR_TIME] IS NULL) OR ([LMT_STR_TIME] = @Original_LMT_STR_TIME)) A"& _ 
                "ND ((@IsNull_WAGON_NO = 1 AND [WAGON_NO] IS NULL) OR ([WAGON_NO] = @Original_WAG"& _ 
                "ON_NO)) AND ([REP_OPE_SEQ] = @Original_REP_OPE_SEQ) AND ([REPEAT_QNT] = @Origina"& _ 
                "l_REPEAT_QNT) AND ((@IsNull_TOTAL_MASK = 1 AND [TOTAL_MASK] IS NULL) OR ([TOTAL_"& _ 
                "MASK] = @Original_TOTAL_MASK)) AND ((@IsNull_STATUS2_SAVE = 1 AND [STATUS2_SAVE]"& _ 
                " IS NULL) OR ([STATUS2_SAVE] = @Original_STATUS2_SAVE)) AND ((@IsNull_REAL_START"& _ 
                " = 1 AND [REAL_START] IS NULL) OR ([REAL_START] = @Original_REAL_START)) AND ((@"& _ 
                "IsNull_TRO_TIME = 1 AND [TRO_TIME] IS NULL) OR ([TRO_TIME] = @Original_TRO_TIME)"& _ 
                ") AND ([SISAKU_FLG] = @Original_SISAKU_FLG) AND ((@IsNull_PARENT_LOT = 1 AND [PA"& _ 
                "RENT_LOT] IS NULL) OR ([PARENT_LOT] = @Original_PARENT_LOT)) AND ((@IsNull_OPE_A"& _ 
                "REA = 1 AND [OPE_AREA] IS NULL) OR ([OPE_AREA] = @Original_OPE_AREA)) AND ((@IsN"& _ 
                "ull_OPE_CHG_FLG = 1 AND [OPE_CHG_FLG] IS NULL) OR ([OPE_CHG_FLG] = @Original_OPE"& _ 
                "_CHG_FLG)) AND ((@IsNull_PLT_OPE_SEQ1 = 1 AND [PLT_OPE_SEQ1] IS NULL) OR ([PLT_O"& _ 
                "PE_SEQ1] = @Original_PLT_OPE_SEQ1)) AND ((@IsNull_PLT_OPE_SEQ2 = 1 AND [PLT_OPE_"& _ 
                "SEQ2] IS NULL) OR ([PLT_OPE_SEQ2] = @Original_PLT_OPE_SEQ2)) AND ((@IsNull_PILOT"& _ 
                "_QNT = 1 AND [PILOT_QNT] IS NULL) OR ([PILOT_QNT] = @Original_PILOT_QNT)) AND (("& _ 
                "@IsNull_TOTAL_QNT = 1 AND [TOTAL_QNT] IS NULL) OR ([TOTAL_QNT] = @Original_TOTAL"& _ 
                "_QNT)) AND ((@IsNull_COMMENT = 1 AND [COMMENT] IS NULL) OR ([COMMENT] = @Origina"& _ 
                "l_COMMENT)) AND ((@IsNull_ROHM_ORDER_MODEL_NAME_O = 1 AND [ROHM_ORDER_MODEL_NAME"& _ 
                "_O] IS NULL) OR ([ROHM_ORDER_MODEL_NAME_O] = @Original_ROHM_ORDER_MODEL_NAME_O))"& _ 
                " AND ((@IsNull_ORDER_NO = 1 AND [ORDER_NO] IS NULL) OR ([ORDER_NO] = @Original_O"& _ 
                "RDER_NO)) AND ((@IsNull_FT_MODEL_NAME = 1 AND [FT_MODEL_NAME] IS NULL) OR ([FT_M"& _ 
                "ODEL_NAME] = @Original_FT_MODEL_NAME)) AND ((@IsNull_TP_RANK = 1 AND [TP_RANK] I"& _ 
                "S NULL) OR ([TP_RANK] = @Original_TP_RANK)) AND ((@IsNull_WARI_STOCK_KBN = 1 AND"& _ 
                " [WARI_STOCK_KBN] IS NULL) OR ([WARI_STOCK_KBN] = @Original_WARI_STOCK_KBN)) AND"& _ 
                " ((@IsNull_WARI_INSTRUCT_KBN = 1 AND [WARI_INSTRUCT_KBN] IS NULL) OR ([WARI_INST"& _ 
                "RUCT_KBN] = @Original_WARI_INSTRUCT_KBN)) AND ((@IsNull_FORM_NAME = 1 AND [FORM_"& _ 
                "NAME] IS NULL) OR ([FORM_NAME] = @Original_FORM_NAME)) AND ([GOOD_PIECES] = @Ori"& _ 
                "ginal_GOOD_PIECES) AND ([BAD_PIECES] = @Original_BAD_PIECES) AND ((@IsNull_ShipT"& _ 
                "argetChipCount = 1 AND [ShipTargetChipCount] IS NULL) OR ([ShipTargetChipCount] "& _ 
                "= @Original_ShipTargetChipCount)) AND ((@IsNull_OfficialChipCount = 1 AND [Offic"& _ 
                "ialChipCount] IS NULL) OR ([OfficialChipCount] = @Original_OfficialChipCount)) A"& _ 
                "ND ((@IsNull_RestLotInitialChipCount = 1 AND [RestLotInitialChipCount] IS NULL) "& _ 
                "OR ([RestLotInitialChipCount] = @Original_RestLotInitialChipCount)) AND ((@IsNul"& _ 
                "l_RestLotInitialInputMagazine = 1 AND [RestLotInitialInputMagazine] IS NULL) OR "& _ 
                "([RestLotInitialInputMagazine] = @Original_RestLotInitialInputMagazine)) AND ((@"& _ 
                "IsNull_RestLotInitialInputFrame = 1 AND [RestLotInitialInputFrame] IS NULL) OR ("& _ 
                "[RestLotInitialInputFrame] = @Original_RestLotInitialInputFrame)) AND ((@IsNull_"& _ 
                "Section = 1 AND [Section] IS NULL) OR ([Section] = @Original_Section)) AND ((@Is"& _ 
                "Null_InvoiceNo = 1 AND [InvoiceNo] IS NULL) OR ([InvoiceNo] = @Original_InvoiceN"& _ 
                "o)) AND ((@IsNull_QCCheckDBNG = 1 AND [QCCheckDBNG] IS NULL) OR ([QCCheckDBNG] ="& _ 
                " @Original_QCCheckDBNG)) AND ((@IsNull_QCCheckDBPNashi = 1 AND [QCCheckDBPNashi]"& _ 
                " IS NULL) OR ([QCCheckDBPNashi] = @Original_QCCheckDBPNashi)) AND ((@IsNull_QCCh"& _ 
                "eckHajikiPullShaer = 1 AND [QCCheckHajikiPullShaer] IS NULL) OR ([QCCheckHajikiP"& _ 
                "ullShaer] = @Original_QCCheckHajikiPullShaer)) AND ((@IsNull_QCCheckWBNG = 1 AND"& _ 
                " [QCCheckWBNG] IS NULL) OR ([QCCheckWBNG] = @Original_QCCheckWBNG)) AND ((@IsNul"& _ 
                "l_QCCheckWBInsNG = 1 AND [QCCheckWBInsNG] IS NULL) OR ([QCCheckWBInsNG] = @Origi"& _ 
                "nal_QCCheckWBInsNG)) AND ((@IsNull_QCCheckOSNG = 1 AND [QCCheckOSNG] IS NULL) OR"& _ 
                " ([QCCheckOSNG] = @Original_QCCheckOSNG)) AND ((@IsNull_QCCheckJudge = 1 AND [QC"& _ 
                "CheckJudge] IS NULL) OR ([QCCheckJudge] = @Original_QCCheckJudge)) AND ((@IsNull"& _ 
                "_QCCheckerPD = 1 AND [QCCheckerPD] IS NULL) OR ([QCCheckerPD] = @Original_QCChec"& _ 
                "kerPD)) AND ((@IsNull_QCCheckerQC = 1 AND [QCCheckerQC] IS NULL) OR ([QCCheckerQ"& _ 
                "C] = @Original_QCCheckerQC)) AND ((@IsNull_QCAQIIssueDate = 1 AND [QCAQIIssueDat"& _ 
                "e] IS NULL) OR ([QCAQIIssueDate] = @Original_QCAQIIssueDate)) AND ((@IsNull_QCCh"& _ 
                "eckExceptOSNG = 1 AND [QCCheckExceptOSNG] IS NULL) OR ([QCCheckExceptOSNG] = @Or"& _ 
                "iginal_QCCheckExceptOSNG)) AND ((@IsNull_QCMainReasonExceptOSNG = 1 AND [QCMainR"& _ 
                "easonExceptOSNG] IS NULL) OR ([QCMainReasonExceptOSNG] = @Original_QCMainReasonE"& _ 
                "xceptOSNG)) AND ((@IsNull_QCNGChipInExceptOSNG = 1 AND [QCNGChipInExceptOSNG] IS"& _ 
                " NULL) OR ([QCNGChipInExceptOSNG] = @Original_QCNGChipInExceptOSNG)) AND ((@IsNu"& _ 
                "ll_QCNGIncludeExceptOSNG = 1 AND [QCNGIncludeExceptOSNG] IS NULL) OR ([QCNGInclu"& _ 
                "deExceptOSNG] = @Original_QCNGIncludeExceptOSNG)) AND ((@IsNull_QCNGJudgeExceptO"& _ 
                "SNG = 1 AND [QCNGJudgeExceptOSNG] IS NULL) OR ([QCNGJudgeExceptOSNG] = @Original"& _ 
                "_QCNGJudgeExceptOSNG)) AND ((@IsNull_QCNGChipInGoodChip = 1 AND [QCNGChipInGoodC"& _ 
                "hip] IS NULL) OR ([QCNGChipInGoodChip] = @Original_QCNGChipInGoodChip)) AND ((@I"& _ 
                "sNull_QCNGIncludeGoodChip = 1 AND [QCNGIncludeGoodChip] IS NULL) OR ([QCNGInclud"& _ 
                "eGoodChip] = @Original_QCNGIncludeGoodChip)) AND ((@IsNull_QCNGJudgeGoodChip = 1"& _ 
                " AND [QCNGJudgeGoodChip] IS NULL) OR ([QCNGJudgeGoodChip] = @Original_QCNGJudgeG"& _ 
                "oodChip)) AND ((@IsNull_CREATION_DATE = 1 AND [CREATION_DATE] IS NULL) OR ([CREA"& _ 
                "TION_DATE] = @Original_CREATION_DATE)) AND ((@IsNull_SEND_FLG = 1 AND [SEND_FLG]"& _ 
                " IS NULL) OR ([SEND_FLG] = @Original_SEND_FLG)) AND ((@IsNull_SEND_DATE = 1 AND "& _ 
                "[SEND_DATE] IS NULL) OR ([SEND_DATE] = @Original_SEND_DATE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DVI_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DVI_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRD_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRD_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IN_DAY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_DAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OUT_DAY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_DAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRD_PIECE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRD_PIECE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INP_PIECE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INP_PIECE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OUT_PIECE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_PIECE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REAL_DAY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_DAY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REAL_DAY", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_DAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BATCH_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BATCH_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BATCH_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BATCH_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BATCH_SUB", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BATCH_SUB", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BATCH_SUB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BATCH_SUB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MATER_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATER_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MATER_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATER_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MATER_SNAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATER_SNAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MATER_SNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATER_SNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MAKER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAKER", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MAKER", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAKER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Y_LEVEL", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Y_LEVEL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_STATUS1", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_STATUS2", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CYCLE", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CYCLE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BOX_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BOX_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BOX_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BOX_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRV_BOX_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRV_BOX_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRV_BOX_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRV_BOX_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WAFER_STATUS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAFER_STATUS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WAFER_STATUS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAFER_STATUS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LMT_STR_TIME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LMT_STR_TIME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LMT_STR_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LMT_STR_TIME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WAGON_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAGON_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WAGON_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAGON_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REP_OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REP_OPE_SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REPEAT_QNT", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REPEAT_QNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_MASK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_MASK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_MASK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_MASK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_STATUS2_SAVE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS2_SAVE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_STATUS2_SAVE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS2_SAVE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REAL_START", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_START", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REAL_START", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_START", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRO_TIME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRO_TIME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRO_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRO_TIME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SISAKU_FLG", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SISAKU_FLG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PARENT_LOT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARENT_LOT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PARENT_LOT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARENT_LOT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OPE_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_AREA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPE_AREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_AREA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OPE_CHG_FLG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_CHG_FLG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPE_CHG_FLG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_CHG_FLG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PLT_OPE_SEQ1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLT_OPE_SEQ1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLT_OPE_SEQ1", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLT_OPE_SEQ1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PLT_OPE_SEQ2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLT_OPE_SEQ2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLT_OPE_SEQ2", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLT_OPE_SEQ2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PILOT_QNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PILOT_QNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PILOT_QNT", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PILOT_QNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_QNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_QNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_QNT", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_QNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COMMENT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COMMENT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ROHM_ORDER_MODEL_NAME_O", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ROHM_ORDER_MODEL_NAME_O", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ROHM_ORDER_MODEL_NAME_O", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ROHM_ORDER_MODEL_NAME_O", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ORDER_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDER_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORDER_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDER_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FT_MODEL_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FT_MODEL_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FT_MODEL_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FT_MODEL_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TP_RANK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TP_RANK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TP_RANK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TP_RANK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WARI_STOCK_KBN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WARI_STOCK_KBN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WARI_STOCK_KBN", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WARI_STOCK_KBN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WARI_INSTRUCT_KBN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WARI_INSTRUCT_KBN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WARI_INSTRUCT_KBN", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WARI_INSTRUCT_KBN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FORM_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORM_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORM_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORM_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GOOD_PIECES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GOOD_PIECES", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BAD_PIECES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BAD_PIECES", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ShipTargetChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ShipTargetChipCount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ShipTargetChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ShipTargetChipCount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OfficialChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OfficialChipCount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OfficialChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OfficialChipCount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RestLotInitialChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialChipCount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RestLotInitialChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialChipCount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RestLotInitialInputMagazine", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialInputMagazine", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RestLotInitialInputMagazine", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialInputMagazine", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RestLotInitialInputFrame", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialInputFrame", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RestLotInitialInputFrame", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialInputFrame", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Section", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Section", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Section", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Section", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_InvoiceNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InvoiceNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InvoiceNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InvoiceNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckDBNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckDBNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckDBNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckDBNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckDBPNashi", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckDBPNashi", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckDBPNashi", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckDBPNashi", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckHajikiPullShaer", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckHajikiPullShaer", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckHajikiPullShaer", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckHajikiPullShaer", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckWBNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckWBNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckWBNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckWBNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckWBInsNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckWBInsNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckWBInsNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckWBInsNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckOSNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckOSNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckJudge", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckJudge", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckJudge", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckJudge", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckerPD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckerPD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckerPD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckerPD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckerQC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckerQC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckerQC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckerQC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCAQIIssueDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCAQIIssueDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCAQIIssueDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCAQIIssueDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckExceptOSNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckExceptOSNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCMainReasonExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCMainReasonExceptOSNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCMainReasonExceptOSNG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCMainReasonExceptOSNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCNGChipInExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGChipInExceptOSNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCNGChipInExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGChipInExceptOSNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCNGIncludeExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGIncludeExceptOSNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCNGIncludeExceptOSNG", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGIncludeExceptOSNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCNGJudgeExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGJudgeExceptOSNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCNGJudgeExceptOSNG", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGJudgeExceptOSNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCNGChipInGoodChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGChipInGoodChip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCNGChipInGoodChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGChipInGoodChip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCNGIncludeGoodChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGIncludeGoodChip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCNGIncludeGoodChip", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGIncludeGoodChip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCNGJudgeGoodChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGJudgeGoodChip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCNGJudgeGoodChip", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGJudgeGoodChip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATION_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATION_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATION_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATION_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SEND_FLG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_FLG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEND_FLG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_FLG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SEND_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEND_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[LOT2_TABLE] ([LOT_NO], [DVI_NO], [PRD_NAME], [IN_DAY], [OUT_DA"& _ 
                "Y], [OPE_SEQ], [PRD_PIECE], [INP_PIECE], [OUT_PIECE], [REAL_DAY], [BATCH_NO], [B"& _ 
                "ATCH_SUB], [MATER_NAME], [MATER_SNAME], [MAKER], [Y_LEVEL], [STATUS1], [STATUS2]"& _ 
                ", [CYCLE], [BOX_NO], [PRV_BOX_NO], [WAFER_STATUS], [LMT_STR_TIME], [WAGON_NO], ["& _ 
                "REP_OPE_SEQ], [REPEAT_QNT], [TOTAL_MASK], [STATUS2_SAVE], [REAL_START], [TRO_TIM"& _ 
                "E], [SISAKU_FLG], [PARENT_LOT], [OPE_AREA], [OPE_CHG_FLG], [PLT_OPE_SEQ1], [PLT_"& _ 
                "OPE_SEQ2], [PILOT_QNT], [TOTAL_QNT], [COMMENT], [ROHM_ORDER_MODEL_NAME_O], [ORDE"& _ 
                "R_NO], [FT_MODEL_NAME], [TP_RANK], [WARI_STOCK_KBN], [WARI_INSTRUCT_KBN], [FORM_"& _ 
                "NAME], [GOOD_PIECES], [BAD_PIECES], [ShipTargetChipCount], [OfficialChipCount], "& _ 
                "[RestLotInitialChipCount], [RestLotInitialInputMagazine], [RestLotInitialInputFr"& _ 
                "ame], [Section], [InvoiceNo], [QCCheckDBNG], [QCCheckDBPNashi], [QCCheckHajikiPu"& _ 
                "llShaer], [QCCheckWBNG], [QCCheckWBInsNG], [QCCheckOSNG], [QCCheckJudge], [QCChe"& _ 
                "ckerPD], [QCCheckerQC], [QCAQIIssueDate], [QCCheckExceptOSNG], [QCMainReasonExce"& _ 
                "ptOSNG], [QCNGChipInExceptOSNG], [QCNGIncludeExceptOSNG], [QCNGJudgeExceptOSNG],"& _ 
                " [QCNGChipInGoodChip], [QCNGIncludeGoodChip], [QCNGJudgeGoodChip], [CREATION_DAT"& _ 
                "E], [SEND_FLG], [SEND_DATE]) VALUES (@LOT_NO, @DVI_NO, @PRD_NAME, @IN_DAY, @OUT_"& _ 
                "DAY, @OPE_SEQ, @PRD_PIECE, @INP_PIECE, @OUT_PIECE, @REAL_DAY, @BATCH_NO, @BATCH_"& _ 
                "SUB, @MATER_NAME, @MATER_SNAME, @MAKER, @Y_LEVEL, @STATUS1, @STATUS2, @CYCLE, @B"& _ 
                "OX_NO, @PRV_BOX_NO, @WAFER_STATUS, @LMT_STR_TIME, @WAGON_NO, @REP_OPE_SEQ, @REPE"& _ 
                "AT_QNT, @TOTAL_MASK, @STATUS2_SAVE, @REAL_START, @TRO_TIME, @SISAKU_FLG, @PARENT"& _ 
                "_LOT, @OPE_AREA, @OPE_CHG_FLG, @PLT_OPE_SEQ1, @PLT_OPE_SEQ2, @PILOT_QNT, @TOTAL_"& _ 
                "QNT, @COMMENT, @ROHM_ORDER_MODEL_NAME_O, @ORDER_NO, @FT_MODEL_NAME, @TP_RANK, @W"& _ 
                "ARI_STOCK_KBN, @WARI_INSTRUCT_KBN, @FORM_NAME, @GOOD_PIECES, @BAD_PIECES, @ShipT"& _ 
                "argetChipCount, @OfficialChipCount, @RestLotInitialChipCount, @RestLotInitialInp"& _ 
                "utMagazine, @RestLotInitialInputFrame, @Section, @InvoiceNo, @QCCheckDBNG, @QCCh"& _ 
                "eckDBPNashi, @QCCheckHajikiPullShaer, @QCCheckWBNG, @QCCheckWBInsNG, @QCCheckOSN"& _ 
                "G, @QCCheckJudge, @QCCheckerPD, @QCCheckerQC, @QCAQIIssueDate, @QCCheckExceptOSN"& _ 
                "G, @QCMainReasonExceptOSNG, @QCNGChipInExceptOSNG, @QCNGIncludeExceptOSNG, @QCNG"& _ 
                "JudgeExceptOSNG, @QCNGChipInGoodChip, @QCNGIncludeGoodChip, @QCNGJudgeGoodChip, "& _ 
                "@CREATION_DATE, @SEND_FLG, @SEND_DATE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT LOT_NO, DVI_NO, PRD_NAME, IN_DAY"& _ 
                ", OUT_DAY, OPE_SEQ, PRD_PIECE, INP_PIECE, OUT_PIECE, REAL_DAY, BATCH_NO, BATCH_S"& _ 
                "UB, MATER_NAME, MATER_SNAME, MAKER, Y_LEVEL, STATUS1, STATUS2, CYCLE, BOX_NO, PR"& _ 
                "V_BOX_NO, WAFER_STATUS, LMT_STR_TIME, WAGON_NO, REP_OPE_SEQ, REPEAT_QNT, TOTAL_M"& _ 
                "ASK, STATUS2_SAVE, REAL_START, TRO_TIME, SISAKU_FLG, PARENT_LOT, OPE_AREA, OPE_C"& _ 
                "HG_FLG, PLT_OPE_SEQ1, PLT_OPE_SEQ2, PILOT_QNT, TOTAL_QNT, COMMENT, ROHM_ORDER_MO"& _ 
                "DEL_NAME_O, ORDER_NO, FT_MODEL_NAME, TP_RANK, WARI_STOCK_KBN, WARI_INSTRUCT_KBN,"& _ 
                " FORM_NAME, GOOD_PIECES, BAD_PIECES, ShipTargetChipCount, OfficialChipCount, Res"& _ 
                "tLotInitialChipCount, RestLotInitialInputMagazine, RestLotInitialInputFrame, Sec"& _ 
                "tion, InvoiceNo, QCCheckDBNG, QCCheckDBPNashi, QCCheckHajikiPullShaer, QCCheckWB"& _ 
                "NG, QCCheckWBInsNG, QCCheckOSNG, QCCheckJudge, QCCheckerPD, QCCheckerQC, QCAQIIs"& _ 
                "sueDate, QCCheckExceptOSNG, QCMainReasonExceptOSNG, QCNGChipInExceptOSNG, QCNGIn"& _ 
                "cludeExceptOSNG, QCNGJudgeExceptOSNG, QCNGChipInGoodChip, QCNGIncludeGoodChip, Q"& _ 
                "CNGJudgeGoodChip, CREATION_DATE, SEND_FLG, SEND_DATE FROM LOT2_TABLE WHERE (LOT_"& _ 
                "NO = @LOT_NO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DVI_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DVI_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRD_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRD_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_DAY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_DAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_DAY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_DAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRD_PIECE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRD_PIECE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INP_PIECE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INP_PIECE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_PIECE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_PIECE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REAL_DAY", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_DAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BATCH_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BATCH_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BATCH_SUB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BATCH_SUB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MATER_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATER_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MATER_SNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATER_SNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MAKER", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAKER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Y_LEVEL", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Y_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATUS1", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATUS2", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CYCLE", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CYCLE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BOX_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BOX_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRV_BOX_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRV_BOX_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WAFER_STATUS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAFER_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LMT_STR_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LMT_STR_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WAGON_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAGON_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REP_OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REP_OPE_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REPEAT_QNT", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REPEAT_QNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_MASK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_MASK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATUS2_SAVE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS2_SAVE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REAL_START", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_START", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRO_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRO_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SISAKU_FLG", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SISAKU_FLG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PARENT_LOT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARENT_LOT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPE_AREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_AREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPE_CHG_FLG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_CHG_FLG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLT_OPE_SEQ1", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLT_OPE_SEQ1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLT_OPE_SEQ2", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLT_OPE_SEQ2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PILOT_QNT", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PILOT_QNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_QNT", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_QNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ROHM_ORDER_MODEL_NAME_O", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ROHM_ORDER_MODEL_NAME_O", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDER_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDER_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FT_MODEL_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FT_MODEL_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TP_RANK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TP_RANK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WARI_STOCK_KBN", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WARI_STOCK_KBN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WARI_INSTRUCT_KBN", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WARI_INSTRUCT_KBN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORM_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORM_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GOOD_PIECES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GOOD_PIECES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BAD_PIECES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BAD_PIECES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ShipTargetChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ShipTargetChipCount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OfficialChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OfficialChipCount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RestLotInitialChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialChipCount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RestLotInitialInputMagazine", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialInputMagazine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RestLotInitialInputFrame", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialInputFrame", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Section", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Section", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InvoiceNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InvoiceNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckDBNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckDBNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckDBPNashi", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckDBPNashi", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckHajikiPullShaer", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckHajikiPullShaer", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckWBNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckWBNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckWBInsNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckWBInsNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckOSNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckJudge", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckJudge", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckerPD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckerPD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckerQC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckerQC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCAQIIssueDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCAQIIssueDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckExceptOSNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCMainReasonExceptOSNG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCMainReasonExceptOSNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCNGChipInExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGChipInExceptOSNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCNGIncludeExceptOSNG", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGIncludeExceptOSNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCNGJudgeExceptOSNG", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGJudgeExceptOSNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCNGChipInGoodChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGChipInGoodChip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCNGIncludeGoodChip", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGIncludeGoodChip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCNGJudgeGoodChip", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGJudgeGoodChip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATION_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATION_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEND_FLG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_FLG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEND_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[LOT2_TABLE] SET [LOT_NO] = @LOT_NO, [DVI_NO] = @DVI_NO, [PRD_NAME] "& _ 
                "= @PRD_NAME, [IN_DAY] = @IN_DAY, [OUT_DAY] = @OUT_DAY, [OPE_SEQ] = @OPE_SEQ, [PR"& _ 
                "D_PIECE] = @PRD_PIECE, [INP_PIECE] = @INP_PIECE, [OUT_PIECE] = @OUT_PIECE, [REAL"& _ 
                "_DAY] = @REAL_DAY, [BATCH_NO] = @BATCH_NO, [BATCH_SUB] = @BATCH_SUB, [MATER_NAME"& _ 
                "] = @MATER_NAME, [MATER_SNAME] = @MATER_SNAME, [MAKER] = @MAKER, [Y_LEVEL] = @Y_"& _ 
                "LEVEL, [STATUS1] = @STATUS1, [STATUS2] = @STATUS2, [CYCLE] = @CYCLE, [BOX_NO] = "& _ 
                "@BOX_NO, [PRV_BOX_NO] = @PRV_BOX_NO, [WAFER_STATUS] = @WAFER_STATUS, [LMT_STR_TI"& _ 
                "ME] = @LMT_STR_TIME, [WAGON_NO] = @WAGON_NO, [REP_OPE_SEQ] = @REP_OPE_SEQ, [REPE"& _ 
                "AT_QNT] = @REPEAT_QNT, [TOTAL_MASK] = @TOTAL_MASK, [STATUS2_SAVE] = @STATUS2_SAV"& _ 
                "E, [REAL_START] = @REAL_START, [TRO_TIME] = @TRO_TIME, [SISAKU_FLG] = @SISAKU_FL"& _ 
                "G, [PARENT_LOT] = @PARENT_LOT, [OPE_AREA] = @OPE_AREA, [OPE_CHG_FLG] = @OPE_CHG_"& _ 
                "FLG, [PLT_OPE_SEQ1] = @PLT_OPE_SEQ1, [PLT_OPE_SEQ2] = @PLT_OPE_SEQ2, [PILOT_QNT]"& _ 
                " = @PILOT_QNT, [TOTAL_QNT] = @TOTAL_QNT, [COMMENT] = @COMMENT, [ROHM_ORDER_MODEL"& _ 
                "_NAME_O] = @ROHM_ORDER_MODEL_NAME_O, [ORDER_NO] = @ORDER_NO, [FT_MODEL_NAME] = @"& _ 
                "FT_MODEL_NAME, [TP_RANK] = @TP_RANK, [WARI_STOCK_KBN] = @WARI_STOCK_KBN, [WARI_I"& _ 
                "NSTRUCT_KBN] = @WARI_INSTRUCT_KBN, [FORM_NAME] = @FORM_NAME, [GOOD_PIECES] = @GO"& _ 
                "OD_PIECES, [BAD_PIECES] = @BAD_PIECES, [ShipTargetChipCount] = @ShipTargetChipCo"& _ 
                "unt, [OfficialChipCount] = @OfficialChipCount, [RestLotInitialChipCount] = @Rest"& _ 
                "LotInitialChipCount, [RestLotInitialInputMagazine] = @RestLotInitialInputMagazin"& _ 
                "e, [RestLotInitialInputFrame] = @RestLotInitialInputFrame, [Section] = @Section,"& _ 
                " [InvoiceNo] = @InvoiceNo, [QCCheckDBNG] = @QCCheckDBNG, [QCCheckDBPNashi] = @QC"& _ 
                "CheckDBPNashi, [QCCheckHajikiPullShaer] = @QCCheckHajikiPullShaer, [QCCheckWBNG]"& _ 
                " = @QCCheckWBNG, [QCCheckWBInsNG] = @QCCheckWBInsNG, [QCCheckOSNG] = @QCCheckOSN"& _ 
                "G, [QCCheckJudge] = @QCCheckJudge, [QCCheckerPD] = @QCCheckerPD, [QCCheckerQC] ="& _ 
                " @QCCheckerQC, [QCAQIIssueDate] = @QCAQIIssueDate, [QCCheckExceptOSNG] = @QCChec"& _ 
                "kExceptOSNG, [QCMainReasonExceptOSNG] = @QCMainReasonExceptOSNG, [QCNGChipInExce"& _ 
                "ptOSNG] = @QCNGChipInExceptOSNG, [QCNGIncludeExceptOSNG] = @QCNGIncludeExceptOSN"& _ 
                "G, [QCNGJudgeExceptOSNG] = @QCNGJudgeExceptOSNG, [QCNGChipInGoodChip] = @QCNGChi"& _ 
                "pInGoodChip, [QCNGIncludeGoodChip] = @QCNGIncludeGoodChip, [QCNGJudgeGoodChip] ="& _ 
                " @QCNGJudgeGoodChip, [CREATION_DATE] = @CREATION_DATE, [SEND_FLG] = @SEND_FLG, ["& _ 
                "SEND_DATE] = @SEND_DATE WHERE (([LOT_NO] = @Original_LOT_NO) AND ([DVI_NO] = @Or"& _ 
                "iginal_DVI_NO) AND ([PRD_NAME] = @Original_PRD_NAME) AND ([IN_DAY] = @Original_I"& _ 
                "N_DAY) AND ([OUT_DAY] = @Original_OUT_DAY) AND ([OPE_SEQ] = @Original_OPE_SEQ) A"& _ 
                "ND ([PRD_PIECE] = @Original_PRD_PIECE) AND ([INP_PIECE] = @Original_INP_PIECE) A"& _ 
                "ND ([OUT_PIECE] = @Original_OUT_PIECE) AND ((@IsNull_REAL_DAY = 1 AND [REAL_DAY]"& _ 
                " IS NULL) OR ([REAL_DAY] = @Original_REAL_DAY)) AND ((@IsNull_BATCH_NO = 1 AND ["& _ 
                "BATCH_NO] IS NULL) OR ([BATCH_NO] = @Original_BATCH_NO)) AND ((@IsNull_BATCH_SUB"& _ 
                " = 1 AND [BATCH_SUB] IS NULL) OR ([BATCH_SUB] = @Original_BATCH_SUB)) AND ((@IsN"& _ 
                "ull_MATER_NAME = 1 AND [MATER_NAME] IS NULL) OR ([MATER_NAME] = @Original_MATER_"& _ 
                "NAME)) AND ((@IsNull_MATER_SNAME = 1 AND [MATER_SNAME] IS NULL) OR ([MATER_SNAME"& _ 
                "] = @Original_MATER_SNAME)) AND ((@IsNull_MAKER = 1 AND [MAKER] IS NULL) OR ([MA"& _ 
                "KER] = @Original_MAKER)) AND ([Y_LEVEL] = @Original_Y_LEVEL) AND ([STATUS1] = @O"& _ 
                "riginal_STATUS1) AND ([STATUS2] = @Original_STATUS2) AND ([CYCLE] = @Original_CY"& _ 
                "CLE) AND ((@IsNull_BOX_NO = 1 AND [BOX_NO] IS NULL) OR ([BOX_NO] = @Original_BOX"& _ 
                "_NO)) AND ((@IsNull_PRV_BOX_NO = 1 AND [PRV_BOX_NO] IS NULL) OR ([PRV_BOX_NO] = "& _ 
                "@Original_PRV_BOX_NO)) AND ((@IsNull_WAFER_STATUS = 1 AND [WAFER_STATUS] IS NULL"& _ 
                ") OR ([WAFER_STATUS] = @Original_WAFER_STATUS)) AND ((@IsNull_LMT_STR_TIME = 1 A"& _ 
                "ND [LMT_STR_TIME] IS NULL) OR ([LMT_STR_TIME] = @Original_LMT_STR_TIME)) AND ((@"& _ 
                "IsNull_WAGON_NO = 1 AND [WAGON_NO] IS NULL) OR ([WAGON_NO] = @Original_WAGON_NO)"& _ 
                ") AND ([REP_OPE_SEQ] = @Original_REP_OPE_SEQ) AND ([REPEAT_QNT] = @Original_REPE"& _ 
                "AT_QNT) AND ((@IsNull_TOTAL_MASK = 1 AND [TOTAL_MASK] IS NULL) OR ([TOTAL_MASK] "& _ 
                "= @Original_TOTAL_MASK)) AND ((@IsNull_STATUS2_SAVE = 1 AND [STATUS2_SAVE] IS NU"& _ 
                "LL) OR ([STATUS2_SAVE] = @Original_STATUS2_SAVE)) AND ((@IsNull_REAL_START = 1 A"& _ 
                "ND [REAL_START] IS NULL) OR ([REAL_START] = @Original_REAL_START)) AND ((@IsNull"& _ 
                "_TRO_TIME = 1 AND [TRO_TIME] IS NULL) OR ([TRO_TIME] = @Original_TRO_TIME)) AND "& _ 
                "([SISAKU_FLG] = @Original_SISAKU_FLG) AND ((@IsNull_PARENT_LOT = 1 AND [PARENT_L"& _ 
                "OT] IS NULL) OR ([PARENT_LOT] = @Original_PARENT_LOT)) AND ((@IsNull_OPE_AREA = "& _ 
                "1 AND [OPE_AREA] IS NULL) OR ([OPE_AREA] = @Original_OPE_AREA)) AND ((@IsNull_OP"& _ 
                "E_CHG_FLG = 1 AND [OPE_CHG_FLG] IS NULL) OR ([OPE_CHG_FLG] = @Original_OPE_CHG_F"& _ 
                "LG)) AND ((@IsNull_PLT_OPE_SEQ1 = 1 AND [PLT_OPE_SEQ1] IS NULL) OR ([PLT_OPE_SEQ"& _ 
                "1] = @Original_PLT_OPE_SEQ1)) AND ((@IsNull_PLT_OPE_SEQ2 = 1 AND [PLT_OPE_SEQ2] "& _ 
                "IS NULL) OR ([PLT_OPE_SEQ2] = @Original_PLT_OPE_SEQ2)) AND ((@IsNull_PILOT_QNT ="& _ 
                " 1 AND [PILOT_QNT] IS NULL) OR ([PILOT_QNT] = @Original_PILOT_QNT)) AND ((@IsNul"& _ 
                "l_TOTAL_QNT = 1 AND [TOTAL_QNT] IS NULL) OR ([TOTAL_QNT] = @Original_TOTAL_QNT))"& _ 
                " AND ((@IsNull_COMMENT = 1 AND [COMMENT] IS NULL) OR ([COMMENT] = @Original_COMM"& _ 
                "ENT)) AND ((@IsNull_ROHM_ORDER_MODEL_NAME_O = 1 AND [ROHM_ORDER_MODEL_NAME_O] IS"& _ 
                " NULL) OR ([ROHM_ORDER_MODEL_NAME_O] = @Original_ROHM_ORDER_MODEL_NAME_O)) AND ("& _ 
                "(@IsNull_ORDER_NO = 1 AND [ORDER_NO] IS NULL) OR ([ORDER_NO] = @Original_ORDER_N"& _ 
                "O)) AND ((@IsNull_FT_MODEL_NAME = 1 AND [FT_MODEL_NAME] IS NULL) OR ([FT_MODEL_N"& _ 
                "AME] = @Original_FT_MODEL_NAME)) AND ((@IsNull_TP_RANK = 1 AND [TP_RANK] IS NULL"& _ 
                ") OR ([TP_RANK] = @Original_TP_RANK)) AND ((@IsNull_WARI_STOCK_KBN = 1 AND [WARI"& _ 
                "_STOCK_KBN] IS NULL) OR ([WARI_STOCK_KBN] = @Original_WARI_STOCK_KBN)) AND ((@Is"& _ 
                "Null_WARI_INSTRUCT_KBN = 1 AND [WARI_INSTRUCT_KBN] IS NULL) OR ([WARI_INSTRUCT_K"& _ 
                "BN] = @Original_WARI_INSTRUCT_KBN)) AND ((@IsNull_FORM_NAME = 1 AND [FORM_NAME] "& _ 
                "IS NULL) OR ([FORM_NAME] = @Original_FORM_NAME)) AND ([GOOD_PIECES] = @Original_"& _ 
                "GOOD_PIECES) AND ([BAD_PIECES] = @Original_BAD_PIECES) AND ((@IsNull_ShipTargetC"& _ 
                "hipCount = 1 AND [ShipTargetChipCount] IS NULL) OR ([ShipTargetChipCount] = @Ori"& _ 
                "ginal_ShipTargetChipCount)) AND ((@IsNull_OfficialChipCount = 1 AND [OfficialChi"& _ 
                "pCount] IS NULL) OR ([OfficialChipCount] = @Original_OfficialChipCount)) AND ((@"& _ 
                "IsNull_RestLotInitialChipCount = 1 AND [RestLotInitialChipCount] IS NULL) OR ([R"& _ 
                "estLotInitialChipCount] = @Original_RestLotInitialChipCount)) AND ((@IsNull_Rest"& _ 
                "LotInitialInputMagazine = 1 AND [RestLotInitialInputMagazine] IS NULL) OR ([Rest"& _ 
                "LotInitialInputMagazine] = @Original_RestLotInitialInputMagazine)) AND ((@IsNull"& _ 
                "_RestLotInitialInputFrame = 1 AND [RestLotInitialInputFrame] IS NULL) OR ([RestL"& _ 
                "otInitialInputFrame] = @Original_RestLotInitialInputFrame)) AND ((@IsNull_Sectio"& _ 
                "n = 1 AND [Section] IS NULL) OR ([Section] = @Original_Section)) AND ((@IsNull_I"& _ 
                "nvoiceNo = 1 AND [InvoiceNo] IS NULL) OR ([InvoiceNo] = @Original_InvoiceNo)) AN"& _ 
                "D ((@IsNull_QCCheckDBNG = 1 AND [QCCheckDBNG] IS NULL) OR ([QCCheckDBNG] = @Orig"& _ 
                "inal_QCCheckDBNG)) AND ((@IsNull_QCCheckDBPNashi = 1 AND [QCCheckDBPNashi] IS NU"& _ 
                "LL) OR ([QCCheckDBPNashi] = @Original_QCCheckDBPNashi)) AND ((@IsNull_QCCheckHaj"& _ 
                "ikiPullShaer = 1 AND [QCCheckHajikiPullShaer] IS NULL) OR ([QCCheckHajikiPullSha"& _ 
                "er] = @Original_QCCheckHajikiPullShaer)) AND ((@IsNull_QCCheckWBNG = 1 AND [QCCh"& _ 
                "eckWBNG] IS NULL) OR ([QCCheckWBNG] = @Original_QCCheckWBNG)) AND ((@IsNull_QCCh"& _ 
                "eckWBInsNG = 1 AND [QCCheckWBInsNG] IS NULL) OR ([QCCheckWBInsNG] = @Original_QC"& _ 
                "CheckWBInsNG)) AND ((@IsNull_QCCheckOSNG = 1 AND [QCCheckOSNG] IS NULL) OR ([QCC"& _ 
                "heckOSNG] = @Original_QCCheckOSNG)) AND ((@IsNull_QCCheckJudge = 1 AND [QCCheckJ"& _ 
                "udge] IS NULL) OR ([QCCheckJudge] = @Original_QCCheckJudge)) AND ((@IsNull_QCChe"& _ 
                "ckerPD = 1 AND [QCCheckerPD] IS NULL) OR ([QCCheckerPD] = @Original_QCCheckerPD)"& _ 
                ") AND ((@IsNull_QCCheckerQC = 1 AND [QCCheckerQC] IS NULL) OR ([QCCheckerQC] = @"& _ 
                "Original_QCCheckerQC)) AND ((@IsNull_QCAQIIssueDate = 1 AND [QCAQIIssueDate] IS "& _ 
                "NULL) OR ([QCAQIIssueDate] = @Original_QCAQIIssueDate)) AND ((@IsNull_QCCheckExc"& _ 
                "eptOSNG = 1 AND [QCCheckExceptOSNG] IS NULL) OR ([QCCheckExceptOSNG] = @Original"& _ 
                "_QCCheckExceptOSNG)) AND ((@IsNull_QCMainReasonExceptOSNG = 1 AND [QCMainReasonE"& _ 
                "xceptOSNG] IS NULL) OR ([QCMainReasonExceptOSNG] = @Original_QCMainReasonExceptO"& _ 
                "SNG)) AND ((@IsNull_QCNGChipInExceptOSNG = 1 AND [QCNGChipInExceptOSNG] IS NULL)"& _ 
                " OR ([QCNGChipInExceptOSNG] = @Original_QCNGChipInExceptOSNG)) AND ((@IsNull_QCN"& _ 
                "GIncludeExceptOSNG = 1 AND [QCNGIncludeExceptOSNG] IS NULL) OR ([QCNGIncludeExce"& _ 
                "ptOSNG] = @Original_QCNGIncludeExceptOSNG)) AND ((@IsNull_QCNGJudgeExceptOSNG = "& _ 
                "1 AND [QCNGJudgeExceptOSNG] IS NULL) OR ([QCNGJudgeExceptOSNG] = @Original_QCNGJ"& _ 
                "udgeExceptOSNG)) AND ((@IsNull_QCNGChipInGoodChip = 1 AND [QCNGChipInGoodChip] I"& _ 
                "S NULL) OR ([QCNGChipInGoodChip] = @Original_QCNGChipInGoodChip)) AND ((@IsNull_"& _ 
                "QCNGIncludeGoodChip = 1 AND [QCNGIncludeGoodChip] IS NULL) OR ([QCNGIncludeGoodC"& _ 
                "hip] = @Original_QCNGIncludeGoodChip)) AND ((@IsNull_QCNGJudgeGoodChip = 1 AND ["& _ 
                "QCNGJudgeGoodChip] IS NULL) OR ([QCNGJudgeGoodChip] = @Original_QCNGJudgeGoodChi"& _ 
                "p)) AND ((@IsNull_CREATION_DATE = 1 AND [CREATION_DATE] IS NULL) OR ([CREATION_D"& _ 
                "ATE] = @Original_CREATION_DATE)) AND ((@IsNull_SEND_FLG = 1 AND [SEND_FLG] IS NU"& _ 
                "LL) OR ([SEND_FLG] = @Original_SEND_FLG)) AND ((@IsNull_SEND_DATE = 1 AND [SEND_"& _ 
                "DATE] IS NULL) OR ([SEND_DATE] = @Original_SEND_DATE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT LOT_NO, DVI_NO,"& _ 
                " PRD_NAME, IN_DAY, OUT_DAY, OPE_SEQ, PRD_PIECE, INP_PIECE, OUT_PIECE, REAL_DAY, "& _ 
                "BATCH_NO, BATCH_SUB, MATER_NAME, MATER_SNAME, MAKER, Y_LEVEL, STATUS1, STATUS2, "& _ 
                "CYCLE, BOX_NO, PRV_BOX_NO, WAFER_STATUS, LMT_STR_TIME, WAGON_NO, REP_OPE_SEQ, RE"& _ 
                "PEAT_QNT, TOTAL_MASK, STATUS2_SAVE, REAL_START, TRO_TIME, SISAKU_FLG, PARENT_LOT"& _ 
                ", OPE_AREA, OPE_CHG_FLG, PLT_OPE_SEQ1, PLT_OPE_SEQ2, PILOT_QNT, TOTAL_QNT, COMME"& _ 
                "NT, ROHM_ORDER_MODEL_NAME_O, ORDER_NO, FT_MODEL_NAME, TP_RANK, WARI_STOCK_KBN, W"& _ 
                "ARI_INSTRUCT_KBN, FORM_NAME, GOOD_PIECES, BAD_PIECES, ShipTargetChipCount, Offic"& _ 
                "ialChipCount, RestLotInitialChipCount, RestLotInitialInputMagazine, RestLotIniti"& _ 
                "alInputFrame, Section, InvoiceNo, QCCheckDBNG, QCCheckDBPNashi, QCCheckHajikiPul"& _ 
                "lShaer, QCCheckWBNG, QCCheckWBInsNG, QCCheckOSNG, QCCheckJudge, QCCheckerPD, QCC"& _ 
                "heckerQC, QCAQIIssueDate, QCCheckExceptOSNG, QCMainReasonExceptOSNG, QCNGChipInE"& _ 
                "xceptOSNG, QCNGIncludeExceptOSNG, QCNGJudgeExceptOSNG, QCNGChipInGoodChip, QCNGI"& _ 
                "ncludeGoodChip, QCNGJudgeGoodChip, CREATION_DATE, SEND_FLG, SEND_DATE FROM LOT2_"& _ 
                "TABLE WHERE (LOT_NO = @LOT_NO)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DVI_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DVI_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRD_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRD_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_DAY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_DAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_DAY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_DAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRD_PIECE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRD_PIECE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INP_PIECE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INP_PIECE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OUT_PIECE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_PIECE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REAL_DAY", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_DAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BATCH_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BATCH_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BATCH_SUB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BATCH_SUB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MATER_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATER_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MATER_SNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATER_SNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MAKER", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAKER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Y_LEVEL", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Y_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATUS1", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATUS2", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CYCLE", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CYCLE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BOX_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BOX_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRV_BOX_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRV_BOX_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WAFER_STATUS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAFER_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LMT_STR_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LMT_STR_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WAGON_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAGON_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REP_OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REP_OPE_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REPEAT_QNT", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REPEAT_QNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_MASK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_MASK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATUS2_SAVE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS2_SAVE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REAL_START", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_START", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRO_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRO_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SISAKU_FLG", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SISAKU_FLG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PARENT_LOT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARENT_LOT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPE_AREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_AREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPE_CHG_FLG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_CHG_FLG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLT_OPE_SEQ1", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLT_OPE_SEQ1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLT_OPE_SEQ2", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLT_OPE_SEQ2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PILOT_QNT", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PILOT_QNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_QNT", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_QNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ROHM_ORDER_MODEL_NAME_O", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ROHM_ORDER_MODEL_NAME_O", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDER_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDER_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FT_MODEL_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FT_MODEL_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TP_RANK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TP_RANK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WARI_STOCK_KBN", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WARI_STOCK_KBN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WARI_INSTRUCT_KBN", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WARI_INSTRUCT_KBN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORM_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORM_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GOOD_PIECES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GOOD_PIECES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BAD_PIECES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BAD_PIECES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ShipTargetChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ShipTargetChipCount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OfficialChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OfficialChipCount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RestLotInitialChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialChipCount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RestLotInitialInputMagazine", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialInputMagazine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RestLotInitialInputFrame", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialInputFrame", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Section", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Section", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InvoiceNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InvoiceNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckDBNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckDBNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckDBPNashi", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckDBPNashi", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckHajikiPullShaer", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckHajikiPullShaer", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckWBNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckWBNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckWBInsNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckWBInsNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckOSNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckJudge", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckJudge", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckerPD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckerPD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckerQC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckerQC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCAQIIssueDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCAQIIssueDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCCheckExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckExceptOSNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCMainReasonExceptOSNG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCMainReasonExceptOSNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCNGChipInExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGChipInExceptOSNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCNGIncludeExceptOSNG", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGIncludeExceptOSNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCNGJudgeExceptOSNG", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGJudgeExceptOSNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCNGChipInGoodChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGChipInGoodChip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCNGIncludeGoodChip", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGIncludeGoodChip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QCNGJudgeGoodChip", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGJudgeGoodChip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATION_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATION_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEND_FLG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_FLG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEND_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DVI_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DVI_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRD_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRD_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IN_DAY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IN_DAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OUT_DAY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_DAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRD_PIECE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRD_PIECE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INP_PIECE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INP_PIECE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OUT_PIECE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OUT_PIECE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REAL_DAY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_DAY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REAL_DAY", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_DAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BATCH_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BATCH_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BATCH_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BATCH_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BATCH_SUB", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BATCH_SUB", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BATCH_SUB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BATCH_SUB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MATER_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATER_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MATER_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATER_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MATER_SNAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATER_SNAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MATER_SNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATER_SNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MAKER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAKER", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MAKER", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAKER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Y_LEVEL", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Y_LEVEL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_STATUS1", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_STATUS2", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CYCLE", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CYCLE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BOX_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BOX_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BOX_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BOX_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRV_BOX_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRV_BOX_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRV_BOX_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRV_BOX_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WAFER_STATUS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAFER_STATUS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WAFER_STATUS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAFER_STATUS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LMT_STR_TIME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LMT_STR_TIME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LMT_STR_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LMT_STR_TIME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WAGON_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAGON_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WAGON_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAGON_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REP_OPE_SEQ", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REP_OPE_SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REPEAT_QNT", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REPEAT_QNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_MASK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_MASK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_MASK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_MASK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_STATUS2_SAVE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS2_SAVE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_STATUS2_SAVE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS2_SAVE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REAL_START", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_START", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REAL_START", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REAL_START", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TRO_TIME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRO_TIME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRO_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRO_TIME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SISAKU_FLG", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SISAKU_FLG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PARENT_LOT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARENT_LOT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PARENT_LOT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARENT_LOT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OPE_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_AREA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPE_AREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_AREA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OPE_CHG_FLG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_CHG_FLG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPE_CHG_FLG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPE_CHG_FLG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PLT_OPE_SEQ1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLT_OPE_SEQ1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLT_OPE_SEQ1", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLT_OPE_SEQ1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PLT_OPE_SEQ2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLT_OPE_SEQ2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLT_OPE_SEQ2", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLT_OPE_SEQ2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PILOT_QNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PILOT_QNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PILOT_QNT", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PILOT_QNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_QNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_QNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_QNT", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_QNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COMMENT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COMMENT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ROHM_ORDER_MODEL_NAME_O", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ROHM_ORDER_MODEL_NAME_O", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ROHM_ORDER_MODEL_NAME_O", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ROHM_ORDER_MODEL_NAME_O", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ORDER_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDER_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORDER_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDER_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FT_MODEL_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FT_MODEL_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FT_MODEL_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FT_MODEL_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TP_RANK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TP_RANK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TP_RANK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TP_RANK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WARI_STOCK_KBN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WARI_STOCK_KBN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WARI_STOCK_KBN", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WARI_STOCK_KBN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WARI_INSTRUCT_KBN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WARI_INSTRUCT_KBN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WARI_INSTRUCT_KBN", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WARI_INSTRUCT_KBN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FORM_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORM_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FORM_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORM_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GOOD_PIECES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GOOD_PIECES", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BAD_PIECES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BAD_PIECES", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ShipTargetChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ShipTargetChipCount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ShipTargetChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ShipTargetChipCount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OfficialChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OfficialChipCount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OfficialChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OfficialChipCount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RestLotInitialChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialChipCount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RestLotInitialChipCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialChipCount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RestLotInitialInputMagazine", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialInputMagazine", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RestLotInitialInputMagazine", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialInputMagazine", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RestLotInitialInputFrame", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialInputFrame", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RestLotInitialInputFrame", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RestLotInitialInputFrame", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Section", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Section", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Section", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Section", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_InvoiceNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InvoiceNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InvoiceNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InvoiceNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckDBNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckDBNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckDBNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckDBNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckDBPNashi", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckDBPNashi", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckDBPNashi", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckDBPNashi", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckHajikiPullShaer", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckHajikiPullShaer", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckHajikiPullShaer", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckHajikiPullShaer", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckWBNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckWBNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckWBNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckWBNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckWBInsNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckWBInsNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckWBInsNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckWBInsNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckOSNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckOSNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckJudge", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckJudge", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckJudge", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckJudge", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckerPD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckerPD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckerPD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckerPD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckerQC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckerQC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckerQC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckerQC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCAQIIssueDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCAQIIssueDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCAQIIssueDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCAQIIssueDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCCheckExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckExceptOSNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCCheckExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCCheckExceptOSNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCMainReasonExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCMainReasonExceptOSNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCMainReasonExceptOSNG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCMainReasonExceptOSNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCNGChipInExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGChipInExceptOSNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCNGChipInExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGChipInExceptOSNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCNGIncludeExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGIncludeExceptOSNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCNGIncludeExceptOSNG", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGIncludeExceptOSNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCNGJudgeExceptOSNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGJudgeExceptOSNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCNGJudgeExceptOSNG", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGJudgeExceptOSNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCNGChipInGoodChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGChipInGoodChip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCNGChipInGoodChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGChipInGoodChip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCNGIncludeGoodChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGIncludeGoodChip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCNGIncludeGoodChip", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGIncludeGoodChip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QCNGJudgeGoodChip", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGJudgeGoodChip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QCNGJudgeGoodChip", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QCNGJudgeGoodChip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATION_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATION_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATION_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATION_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SEND_FLG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_FLG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEND_FLG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_FLG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SEND_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEND_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEND_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Rohm.Apcs.Tdc.My.MySettings.Default.APCSDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT LOT_NO, DVI_NO, PRD_NAME, IN_DAY, OUT_DAY, OPE_SEQ, PRD_PIECE, INP_PIECE, "& _ 
                "OUT_PIECE, REAL_DAY, BATCH_NO, BATCH_SUB, MATER_NAME, MATER_SNAME, MAKER, Y_LEVE"& _ 
                "L, STATUS1, STATUS2, CYCLE, BOX_NO, PRV_BOX_NO, WAFER_STATUS, LMT_STR_TIME, WAGO"& _ 
                "N_NO, REP_OPE_SEQ, REPEAT_QNT, TOTAL_MASK, STATUS2_SAVE, REAL_START, TRO_TIME, S"& _ 
                "ISAKU_FLG, PARENT_LOT, OPE_AREA, OPE_CHG_FLG, PLT_OPE_SEQ1, PLT_OPE_SEQ2, PILOT_"& _ 
                "QNT, TOTAL_QNT, COMMENT, ROHM_ORDER_MODEL_NAME_O, ORDER_NO, FT_MODEL_NAME, TP_RA"& _ 
                "NK, WARI_STOCK_KBN, WARI_INSTRUCT_KBN, FORM_NAME, GOOD_PIECES, BAD_PIECES, ShipT"& _ 
                "argetChipCount, OfficialChipCount, RestLotInitialChipCount, RestLotInitialInputM"& _ 
                "agazine, RestLotInitialInputFrame, Section, InvoiceNo, QCCheckDBNG, QCCheckDBPNa"& _ 
                "shi, QCCheckHajikiPullShaer, QCCheckWBNG, QCCheckWBInsNG, QCCheckOSNG, QCCheckJu"& _ 
                "dge, QCCheckerPD, QCCheckerQC, QCAQIIssueDate, QCCheckExceptOSNG, QCMainReasonEx"& _ 
                "ceptOSNG, QCNGChipInExceptOSNG, QCNGIncludeExceptOSNG, QCNGJudgeExceptOSNG, QCNG"& _ 
                "ChipInGoodChip, QCNGIncludeGoodChip, QCNGJudgeGoodChip, CREATION_DATE, SEND_FLG,"& _ 
                " SEND_DATE FROM dbo.LOT2_TABLE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT BAD_PIECES, BATCH_NO, BATCH_SUB, BOX_NO, COMMENT, CREATION_DATE, CYCLE, DV"& _ 
                "I_NO, FORM_NAME, FT_MODEL_NAME, GOOD_PIECES, INP_PIECE, IN_DAY, InvoiceNo, LMT_S"& _ 
                "TR_TIME, LOT_NO, MAKER, MATER_NAME, MATER_SNAME, OPE_AREA, OPE_CHG_FLG, OPE_SEQ,"& _ 
                " ORDER_NO, OUT_DAY, OUT_PIECE, OfficialChipCount, PARENT_LOT, PILOT_QNT, PLT_OPE"& _ 
                "_SEQ1, PLT_OPE_SEQ2, PRD_NAME, PRD_PIECE, PRV_BOX_NO, QCAQIIssueDate, QCCheckDBN"& _ 
                "G, QCCheckDBPNashi, QCCheckExceptOSNG, QCCheckHajikiPullShaer, QCCheckJudge, QCC"& _ 
                "heckOSNG, QCCheckWBInsNG, QCCheckWBNG, QCCheckerPD, QCCheckerQC, QCMainReasonExc"& _ 
                "eptOSNG, QCNGChipInExceptOSNG, QCNGChipInGoodChip, QCNGIncludeExceptOSNG, QCNGIn"& _ 
                "cludeGoodChip, QCNGJudgeExceptOSNG, QCNGJudgeGoodChip, REAL_DAY, REAL_START, REP"& _ 
                "EAT_QNT, REP_OPE_SEQ, ROHM_ORDER_MODEL_NAME_O, RestLotInitialChipCount, RestLotI"& _ 
                "nitialInputFrame, RestLotInitialInputMagazine, SEND_DATE, SEND_FLG, SISAKU_FLG, "& _ 
                "STATUS1, STATUS2, STATUS2_SAVE, Section, ShipTargetChipCount, TOTAL_MASK, TOTAL_"& _ 
                "QNT, TP_RANK, TRO_TIME, WAFER_STATUS, WAGON_NO, WARI_INSTRUCT_KBN, WARI_STOCK_KB"& _ 
                "N, Y_LEVEL FROM LOT2_TABLE WHERE (LOT_NO = @LOT_NO)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 13, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As APCSDBDataSet.LOT2_TABLEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As APCSDBDataSet.LOT2_TABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As APCSDBDataSet.LOT2_TABLEDataTable = New APCSDBDataSet.LOT2_TABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByLotNo(ByVal dataTable As APCSDBDataSet.LOT2_TABLEDataTable, ByVal LOT_NO As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(LOT_NO,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByLotNo(ByVal LOT_NO As String) As APCSDBDataSet.LOT2_TABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(LOT_NO,String)
            End If
            Dim dataTable As APCSDBDataSet.LOT2_TABLEDataTable = New APCSDBDataSet.LOT2_TABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As APCSDBDataSet.LOT2_TABLEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As APCSDBDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "LOT2_TABLE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_LOT_NO As String,  _
                    ByVal Original_DVI_NO As Integer,  _
                    ByVal Original_PRD_NAME As String,  _
                    ByVal Original_IN_DAY As String,  _
                    ByVal Original_OUT_DAY As String,  _
                    ByVal Original_OPE_SEQ As Short,  _
                    ByVal Original_PRD_PIECE As Integer,  _
                    ByVal Original_INP_PIECE As Integer,  _
                    ByVal Original_OUT_PIECE As Integer,  _
                    ByVal Original_REAL_DAY As Global.System.Nullable(Of Date),  _
                    ByVal Original_BATCH_NO As String,  _
                    ByVal Original_BATCH_SUB As String,  _
                    ByVal Original_MATER_NAME As String,  _
                    ByVal Original_MATER_SNAME As String,  _
                    ByVal Original_MAKER As String,  _
                    ByVal Original_Y_LEVEL As String,  _
                    ByVal Original_STATUS1 As String,  _
                    ByVal Original_STATUS2 As String,  _
                    ByVal Original_CYCLE As Short,  _
                    ByVal Original_BOX_NO As String,  _
                    ByVal Original_PRV_BOX_NO As String,  _
                    ByVal Original_WAFER_STATUS As String,  _
                    ByVal Original_LMT_STR_TIME As Global.System.Nullable(Of Date),  _
                    ByVal Original_WAGON_NO As String,  _
                    ByVal Original_REP_OPE_SEQ As Short,  _
                    ByVal Original_REPEAT_QNT As Short,  _
                    ByVal Original_TOTAL_MASK As String,  _
                    ByVal Original_STATUS2_SAVE As String,  _
                    ByVal Original_REAL_START As Global.System.Nullable(Of Date),  _
                    ByVal Original_TRO_TIME As Global.System.Nullable(Of Date),  _
                    ByVal Original_SISAKU_FLG As String,  _
                    ByVal Original_PARENT_LOT As String,  _
                    ByVal Original_OPE_AREA As String,  _
                    ByVal Original_OPE_CHG_FLG As String,  _
                    ByVal Original_PLT_OPE_SEQ1 As Global.System.Nullable(Of Short),  _
                    ByVal Original_PLT_OPE_SEQ2 As Global.System.Nullable(Of Short),  _
                    ByVal Original_PILOT_QNT As Global.System.Nullable(Of Short),  _
                    ByVal Original_TOTAL_QNT As Global.System.Nullable(Of Short),  _
                    ByVal Original_COMMENT As String,  _
                    ByVal Original_ROHM_ORDER_MODEL_NAME_O As String,  _
                    ByVal Original_ORDER_NO As String,  _
                    ByVal Original_FT_MODEL_NAME As String,  _
                    ByVal Original_TP_RANK As String,  _
                    ByVal Original_WARI_STOCK_KBN As Global.System.Nullable(Of Short),  _
                    ByVal Original_WARI_INSTRUCT_KBN As Global.System.Nullable(Of Short),  _
                    ByVal Original_FORM_NAME As String,  _
                    ByVal Original_GOOD_PIECES As Integer,  _
                    ByVal Original_BAD_PIECES As Integer,  _
                    ByVal Original_ShipTargetChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal Original_OfficialChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal Original_RestLotInitialChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal Original_RestLotInitialInputMagazine As Global.System.Nullable(Of Short),  _
                    ByVal Original_RestLotInitialInputFrame As Global.System.Nullable(Of Short),  _
                    ByVal Original_Section As String,  _
                    ByVal Original_InvoiceNo As String,  _
                    ByVal Original_QCCheckDBNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckDBPNashi As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckHajikiPullShaer As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckWBNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckWBInsNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckJudge As Global.System.Nullable(Of Short),  _
                    ByVal Original_QCCheckerPD As String,  _
                    ByVal Original_QCCheckerQC As String,  _
                    ByVal Original_QCAQIIssueDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_QCCheckExceptOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCMainReasonExceptOSNG As String,  _
                    ByVal Original_QCNGChipInExceptOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCNGIncludeExceptOSNG As Global.System.Nullable(Of Short),  _
                    ByVal Original_QCNGJudgeExceptOSNG As Global.System.Nullable(Of Short),  _
                    ByVal Original_QCNGChipInGoodChip As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCNGIncludeGoodChip As Global.System.Nullable(Of Short),  _
                    ByVal Original_QCNGJudgeGoodChip As Global.System.Nullable(Of Short),  _
                    ByVal Original_CREATION_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_SEND_FLG As String,  _
                    ByVal Original_SEND_DATE As Global.System.Nullable(Of Date)) As Integer
            If (Original_LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOT_NO")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_LOT_NO,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_DVI_NO,Integer)
            If (Original_PRD_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRD_NAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PRD_NAME,String)
            End If
            If (Original_IN_DAY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IN_DAY")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_IN_DAY,String)
            End If
            If (Original_OUT_DAY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_OUT_DAY")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_OUT_DAY,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_OPE_SEQ,Short)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_PRD_PIECE,Integer)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_INP_PIECE,Integer)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_OUT_PIECE,Integer)
            If (Original_REAL_DAY.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_REAL_DAY.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_BATCH_NO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_BATCH_NO,String)
            End If
            If (Original_BATCH_SUB Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_BATCH_SUB,String)
            End If
            If (Original_MATER_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_MATER_NAME,String)
            End If
            If (Original_MATER_SNAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_MATER_SNAME,String)
            End If
            If (Original_MAKER Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_MAKER,String)
            End If
            If (Original_Y_LEVEL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Y_LEVEL")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_Y_LEVEL,String)
            End If
            If (Original_STATUS1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STATUS1")
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_STATUS1,String)
            End If
            If (Original_STATUS2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STATUS2")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_STATUS2,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_CYCLE,Short)
            If (Original_BOX_NO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_BOX_NO,String)
            End If
            If (Original_PRV_BOX_NO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_PRV_BOX_NO,String)
            End If
            If (Original_WAFER_STATUS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_WAFER_STATUS,String)
            End If
            If (Original_LMT_STR_TIME.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_LMT_STR_TIME.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_WAGON_NO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_WAGON_NO,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(35).Value = CType(Original_REP_OPE_SEQ,Short)
            Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_REPEAT_QNT,Short)
            If (Original_TOTAL_MASK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_TOTAL_MASK,String)
            End If
            If (Original_STATUS2_SAVE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_STATUS2_SAVE,String)
            End If
            If (Original_REAL_START.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_REAL_START.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_TRO_TIME.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_TRO_TIME.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_SISAKU_FLG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SISAKU_FLG")
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(Original_SISAKU_FLG,String)
            End If
            If (Original_PARENT_LOT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(Original_PARENT_LOT,String)
            End If
            If (Original_OPE_AREA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(Original_OPE_AREA,String)
            End If
            If (Original_OPE_CHG_FLG Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(Original_OPE_CHG_FLG,String)
            End If
            If (Original_PLT_OPE_SEQ1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(Original_PLT_OPE_SEQ1.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (Original_PLT_OPE_SEQ2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(Original_PLT_OPE_SEQ2.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (Original_PILOT_QNT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(Original_PILOT_QNT.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (Original_TOTAL_QNT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(Original_TOTAL_QNT.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (Original_COMMENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(Original_COMMENT,String)
            End If
            If (Original_ROHM_ORDER_MODEL_NAME_O Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(63).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(Original_ROHM_ORDER_MODEL_NAME_O,String)
            End If
            If (Original_ORDER_NO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(65).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(65).Value = CType(Original_ORDER_NO,String)
            End If
            If (Original_FT_MODEL_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(67).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(Original_FT_MODEL_NAME,String)
            End If
            If (Original_TP_RANK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(69).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(Original_TP_RANK,String)
            End If
            If (Original_WARI_STOCK_KBN.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(71).Value = CType(Original_WARI_STOCK_KBN.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(70).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(71).Value = Global.System.DBNull.Value
            End If
            If (Original_WARI_INSTRUCT_KBN.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(72).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(Original_WARI_INSTRUCT_KBN.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(72).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(73).Value = Global.System.DBNull.Value
            End If
            If (Original_FORM_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(74).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(75).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(74).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(Original_FORM_NAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(76).Value = CType(Original_GOOD_PIECES,Integer)
            Me.Adapter.DeleteCommand.Parameters(77).Value = CType(Original_BAD_PIECES,Integer)
            If (Original_ShipTargetChipCount.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(78).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(79).Value = CType(Original_ShipTargetChipCount.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(78).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(79).Value = Global.System.DBNull.Value
            End If
            If (Original_OfficialChipCount.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(80).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(81).Value = CType(Original_OfficialChipCount.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(80).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(81).Value = Global.System.DBNull.Value
            End If
            If (Original_RestLotInitialChipCount.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(82).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(83).Value = CType(Original_RestLotInitialChipCount.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(82).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(83).Value = Global.System.DBNull.Value
            End If
            If (Original_RestLotInitialInputMagazine.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(84).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(85).Value = CType(Original_RestLotInitialInputMagazine.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(84).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(85).Value = Global.System.DBNull.Value
            End If
            If (Original_RestLotInitialInputFrame.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(86).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(87).Value = CType(Original_RestLotInitialInputFrame.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(86).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(87).Value = Global.System.DBNull.Value
            End If
            If (Original_Section Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(88).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(89).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(88).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(89).Value = CType(Original_Section,String)
            End If
            If (Original_InvoiceNo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(90).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(91).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(90).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(91).Value = CType(Original_InvoiceNo,String)
            End If
            If (Original_QCCheckDBNG.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(92).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(93).Value = CType(Original_QCCheckDBNG.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(92).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(93).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckDBPNashi.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(94).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(95).Value = CType(Original_QCCheckDBPNashi.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(94).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(95).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckHajikiPullShaer.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(96).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(97).Value = CType(Original_QCCheckHajikiPullShaer.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(96).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(97).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckWBNG.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(98).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(99).Value = CType(Original_QCCheckWBNG.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(98).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(99).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckWBInsNG.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(100).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(101).Value = CType(Original_QCCheckWBInsNG.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(100).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(101).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckOSNG.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(102).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(103).Value = CType(Original_QCCheckOSNG.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(102).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(103).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckJudge.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(104).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(105).Value = CType(Original_QCCheckJudge.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(104).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(105).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckerPD Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(106).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(107).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(106).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(107).Value = CType(Original_QCCheckerPD,String)
            End If
            If (Original_QCCheckerQC Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(108).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(109).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(108).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(109).Value = CType(Original_QCCheckerQC,String)
            End If
            If (Original_QCAQIIssueDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(110).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(111).Value = CType(Original_QCAQIIssueDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(110).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(111).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckExceptOSNG.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(112).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(113).Value = CType(Original_QCCheckExceptOSNG.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(112).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(113).Value = Global.System.DBNull.Value
            End If
            If (Original_QCMainReasonExceptOSNG Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(114).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(115).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(114).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(115).Value = CType(Original_QCMainReasonExceptOSNG,String)
            End If
            If (Original_QCNGChipInExceptOSNG.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(116).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(117).Value = CType(Original_QCNGChipInExceptOSNG.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(116).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(117).Value = Global.System.DBNull.Value
            End If
            If (Original_QCNGIncludeExceptOSNG.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(118).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(119).Value = CType(Original_QCNGIncludeExceptOSNG.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(118).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(119).Value = Global.System.DBNull.Value
            End If
            If (Original_QCNGJudgeExceptOSNG.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(120).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(121).Value = CType(Original_QCNGJudgeExceptOSNG.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(120).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(121).Value = Global.System.DBNull.Value
            End If
            If (Original_QCNGChipInGoodChip.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(122).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(123).Value = CType(Original_QCNGChipInGoodChip.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(122).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(123).Value = Global.System.DBNull.Value
            End If
            If (Original_QCNGIncludeGoodChip.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(124).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(125).Value = CType(Original_QCNGIncludeGoodChip.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(124).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(125).Value = Global.System.DBNull.Value
            End If
            If (Original_QCNGJudgeGoodChip.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(126).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(127).Value = CType(Original_QCNGJudgeGoodChip.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(126).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(127).Value = Global.System.DBNull.Value
            End If
            If (Original_CREATION_DATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(128).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(129).Value = CType(Original_CREATION_DATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(128).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(129).Value = Global.System.DBNull.Value
            End If
            If (Original_SEND_FLG Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(130).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(131).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(130).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(131).Value = CType(Original_SEND_FLG,String)
            End If
            If (Original_SEND_DATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(132).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(133).Value = CType(Original_SEND_DATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(132).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(133).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal LOT_NO As String,  _
                    ByVal DVI_NO As Integer,  _
                    ByVal PRD_NAME As String,  _
                    ByVal IN_DAY As String,  _
                    ByVal OUT_DAY As String,  _
                    ByVal OPE_SEQ As Short,  _
                    ByVal PRD_PIECE As Integer,  _
                    ByVal INP_PIECE As Integer,  _
                    ByVal OUT_PIECE As Integer,  _
                    ByVal REAL_DAY As Global.System.Nullable(Of Date),  _
                    ByVal BATCH_NO As String,  _
                    ByVal BATCH_SUB As String,  _
                    ByVal MATER_NAME As String,  _
                    ByVal MATER_SNAME As String,  _
                    ByVal MAKER As String,  _
                    ByVal Y_LEVEL As String,  _
                    ByVal STATUS1 As String,  _
                    ByVal STATUS2 As String,  _
                    ByVal CYCLE As Short,  _
                    ByVal BOX_NO As String,  _
                    ByVal PRV_BOX_NO As String,  _
                    ByVal WAFER_STATUS As String,  _
                    ByVal LMT_STR_TIME As Global.System.Nullable(Of Date),  _
                    ByVal WAGON_NO As String,  _
                    ByVal REP_OPE_SEQ As Short,  _
                    ByVal REPEAT_QNT As Short,  _
                    ByVal TOTAL_MASK As String,  _
                    ByVal STATUS2_SAVE As String,  _
                    ByVal REAL_START As Global.System.Nullable(Of Date),  _
                    ByVal TRO_TIME As Global.System.Nullable(Of Date),  _
                    ByVal SISAKU_FLG As String,  _
                    ByVal PARENT_LOT As String,  _
                    ByVal OPE_AREA As String,  _
                    ByVal OPE_CHG_FLG As String,  _
                    ByVal PLT_OPE_SEQ1 As Global.System.Nullable(Of Short),  _
                    ByVal PLT_OPE_SEQ2 As Global.System.Nullable(Of Short),  _
                    ByVal PILOT_QNT As Global.System.Nullable(Of Short),  _
                    ByVal TOTAL_QNT As Global.System.Nullable(Of Short),  _
                    ByVal COMMENT As String,  _
                    ByVal ROHM_ORDER_MODEL_NAME_O As String,  _
                    ByVal ORDER_NO As String,  _
                    ByVal FT_MODEL_NAME As String,  _
                    ByVal TP_RANK As String,  _
                    ByVal WARI_STOCK_KBN As Global.System.Nullable(Of Short),  _
                    ByVal WARI_INSTRUCT_KBN As Global.System.Nullable(Of Short),  _
                    ByVal FORM_NAME As String,  _
                    ByVal GOOD_PIECES As Integer,  _
                    ByVal BAD_PIECES As Integer,  _
                    ByVal ShipTargetChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal OfficialChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal RestLotInitialChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal RestLotInitialInputMagazine As Global.System.Nullable(Of Short),  _
                    ByVal RestLotInitialInputFrame As Global.System.Nullable(Of Short),  _
                    ByVal Section As String,  _
                    ByVal InvoiceNo As String,  _
                    ByVal QCCheckDBNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckDBPNashi As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckHajikiPullShaer As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckWBNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckWBInsNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckJudge As Global.System.Nullable(Of Short),  _
                    ByVal QCCheckerPD As String,  _
                    ByVal QCCheckerQC As String,  _
                    ByVal QCAQIIssueDate As Global.System.Nullable(Of Date),  _
                    ByVal QCCheckExceptOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCMainReasonExceptOSNG As String,  _
                    ByVal QCNGChipInExceptOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCNGIncludeExceptOSNG As Global.System.Nullable(Of Short),  _
                    ByVal QCNGJudgeExceptOSNG As Global.System.Nullable(Of Short),  _
                    ByVal QCNGChipInGoodChip As Global.System.Nullable(Of Integer),  _
                    ByVal QCNGIncludeGoodChip As Global.System.Nullable(Of Short),  _
                    ByVal QCNGJudgeGoodChip As Global.System.Nullable(Of Short),  _
                    ByVal CREATION_DATE As Global.System.Nullable(Of Date),  _
                    ByVal SEND_FLG As String,  _
                    ByVal SEND_DATE As Global.System.Nullable(Of Date)) As Integer
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(LOT_NO,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(DVI_NO,Integer)
            If (PRD_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRD_NAME")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PRD_NAME,String)
            End If
            If (IN_DAY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IN_DAY")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(IN_DAY,String)
            End If
            If (OUT_DAY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OUT_DAY")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(OUT_DAY,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(OPE_SEQ,Short)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(PRD_PIECE,Integer)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(INP_PIECE,Integer)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(OUT_PIECE,Integer)
            If (REAL_DAY.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(REAL_DAY.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (BATCH_NO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(BATCH_NO,String)
            End If
            If (BATCH_SUB Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(BATCH_SUB,String)
            End If
            If (MATER_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(MATER_NAME,String)
            End If
            If (MATER_SNAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(MATER_SNAME,String)
            End If
            If (MAKER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(MAKER,String)
            End If
            If (Y_LEVEL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Y_LEVEL")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Y_LEVEL,String)
            End If
            If (STATUS1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STATUS1")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(STATUS1,String)
            End If
            If (STATUS2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STATUS2")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(STATUS2,String)
            End If
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(CYCLE,Short)
            If (BOX_NO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(BOX_NO,String)
            End If
            If (PRV_BOX_NO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(PRV_BOX_NO,String)
            End If
            If (WAFER_STATUS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(WAFER_STATUS,String)
            End If
            If (LMT_STR_TIME.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(LMT_STR_TIME.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (WAGON_NO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(WAGON_NO,String)
            End If
            Me.Adapter.InsertCommand.Parameters(24).Value = CType(REP_OPE_SEQ,Short)
            Me.Adapter.InsertCommand.Parameters(25).Value = CType(REPEAT_QNT,Short)
            If (TOTAL_MASK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(TOTAL_MASK,String)
            End If
            If (STATUS2_SAVE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(STATUS2_SAVE,String)
            End If
            If (REAL_START.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(REAL_START.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (TRO_TIME.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(TRO_TIME.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (SISAKU_FLG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SISAKU_FLG")
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(SISAKU_FLG,String)
            End If
            If (PARENT_LOT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(PARENT_LOT,String)
            End If
            If (OPE_AREA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(OPE_AREA,String)
            End If
            If (OPE_CHG_FLG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(OPE_CHG_FLG,String)
            End If
            If (PLT_OPE_SEQ1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(PLT_OPE_SEQ1.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (PLT_OPE_SEQ2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(PLT_OPE_SEQ2.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (PILOT_QNT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(PILOT_QNT.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_QNT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(TOTAL_QNT.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (COMMENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(COMMENT,String)
            End If
            If (ROHM_ORDER_MODEL_NAME_O Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(ROHM_ORDER_MODEL_NAME_O,String)
            End If
            If (ORDER_NO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(ORDER_NO,String)
            End If
            If (FT_MODEL_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(FT_MODEL_NAME,String)
            End If
            If (TP_RANK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(TP_RANK,String)
            End If
            If (WARI_STOCK_KBN.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(WARI_STOCK_KBN.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (WARI_INSTRUCT_KBN.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(WARI_INSTRUCT_KBN.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (FORM_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(FORM_NAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(46).Value = CType(GOOD_PIECES,Integer)
            Me.Adapter.InsertCommand.Parameters(47).Value = CType(BAD_PIECES,Integer)
            If (ShipTargetChipCount.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(ShipTargetChipCount.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (OfficialChipCount.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(OfficialChipCount.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (RestLotInitialChipCount.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(RestLotInitialChipCount.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (RestLotInitialInputMagazine.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(RestLotInitialInputMagazine.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (RestLotInitialInputFrame.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(RestLotInitialInputFrame.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (Section Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(Section,String)
            End If
            If (InvoiceNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(InvoiceNo,String)
            End If
            If (QCCheckDBNG.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(QCCheckDBNG.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (QCCheckDBPNashi.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(56).Value = CType(QCCheckDBPNashi.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (QCCheckHajikiPullShaer.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(57).Value = CType(QCCheckHajikiPullShaer.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (QCCheckWBNG.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(58).Value = CType(QCCheckWBNG.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (QCCheckWBInsNG.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(59).Value = CType(QCCheckWBInsNG.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (QCCheckOSNG.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(60).Value = CType(QCCheckOSNG.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (QCCheckJudge.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(61).Value = CType(QCCheckJudge.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (QCCheckerPD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(62).Value = CType(QCCheckerPD,String)
            End If
            If (QCCheckerQC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(63).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(63).Value = CType(QCCheckerQC,String)
            End If
            If (QCAQIIssueDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(64).Value = CType(QCAQIIssueDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (QCCheckExceptOSNG.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(65).Value = CType(QCCheckExceptOSNG.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (QCMainReasonExceptOSNG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(66).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(66).Value = CType(QCMainReasonExceptOSNG,String)
            End If
            If (QCNGChipInExceptOSNG.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(67).Value = CType(QCNGChipInExceptOSNG.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (QCNGIncludeExceptOSNG.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(68).Value = CType(QCNGIncludeExceptOSNG.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(68).Value = Global.System.DBNull.Value
            End If
            If (QCNGJudgeExceptOSNG.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(69).Value = CType(QCNGJudgeExceptOSNG.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            If (QCNGChipInGoodChip.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(70).Value = CType(QCNGChipInGoodChip.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(70).Value = Global.System.DBNull.Value
            End If
            If (QCNGIncludeGoodChip.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(71).Value = CType(QCNGIncludeGoodChip.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(71).Value = Global.System.DBNull.Value
            End If
            If (QCNGJudgeGoodChip.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(72).Value = CType(QCNGJudgeGoodChip.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(72).Value = Global.System.DBNull.Value
            End If
            If (CREATION_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(73).Value = CType(CREATION_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(73).Value = Global.System.DBNull.Value
            End If
            If (SEND_FLG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(74).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(74).Value = CType(SEND_FLG,String)
            End If
            If (SEND_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(75).Value = CType(SEND_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(75).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal LOT_NO As String,  _
                    ByVal DVI_NO As Integer,  _
                    ByVal PRD_NAME As String,  _
                    ByVal IN_DAY As String,  _
                    ByVal OUT_DAY As String,  _
                    ByVal OPE_SEQ As Short,  _
                    ByVal PRD_PIECE As Integer,  _
                    ByVal INP_PIECE As Integer,  _
                    ByVal OUT_PIECE As Integer,  _
                    ByVal REAL_DAY As Global.System.Nullable(Of Date),  _
                    ByVal BATCH_NO As String,  _
                    ByVal BATCH_SUB As String,  _
                    ByVal MATER_NAME As String,  _
                    ByVal MATER_SNAME As String,  _
                    ByVal MAKER As String,  _
                    ByVal Y_LEVEL As String,  _
                    ByVal STATUS1 As String,  _
                    ByVal STATUS2 As String,  _
                    ByVal CYCLE As Short,  _
                    ByVal BOX_NO As String,  _
                    ByVal PRV_BOX_NO As String,  _
                    ByVal WAFER_STATUS As String,  _
                    ByVal LMT_STR_TIME As Global.System.Nullable(Of Date),  _
                    ByVal WAGON_NO As String,  _
                    ByVal REP_OPE_SEQ As Short,  _
                    ByVal REPEAT_QNT As Short,  _
                    ByVal TOTAL_MASK As String,  _
                    ByVal STATUS2_SAVE As String,  _
                    ByVal REAL_START As Global.System.Nullable(Of Date),  _
                    ByVal TRO_TIME As Global.System.Nullable(Of Date),  _
                    ByVal SISAKU_FLG As String,  _
                    ByVal PARENT_LOT As String,  _
                    ByVal OPE_AREA As String,  _
                    ByVal OPE_CHG_FLG As String,  _
                    ByVal PLT_OPE_SEQ1 As Global.System.Nullable(Of Short),  _
                    ByVal PLT_OPE_SEQ2 As Global.System.Nullable(Of Short),  _
                    ByVal PILOT_QNT As Global.System.Nullable(Of Short),  _
                    ByVal TOTAL_QNT As Global.System.Nullable(Of Short),  _
                    ByVal COMMENT As String,  _
                    ByVal ROHM_ORDER_MODEL_NAME_O As String,  _
                    ByVal ORDER_NO As String,  _
                    ByVal FT_MODEL_NAME As String,  _
                    ByVal TP_RANK As String,  _
                    ByVal WARI_STOCK_KBN As Global.System.Nullable(Of Short),  _
                    ByVal WARI_INSTRUCT_KBN As Global.System.Nullable(Of Short),  _
                    ByVal FORM_NAME As String,  _
                    ByVal GOOD_PIECES As Integer,  _
                    ByVal BAD_PIECES As Integer,  _
                    ByVal ShipTargetChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal OfficialChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal RestLotInitialChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal RestLotInitialInputMagazine As Global.System.Nullable(Of Short),  _
                    ByVal RestLotInitialInputFrame As Global.System.Nullable(Of Short),  _
                    ByVal Section As String,  _
                    ByVal InvoiceNo As String,  _
                    ByVal QCCheckDBNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckDBPNashi As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckHajikiPullShaer As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckWBNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckWBInsNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckJudge As Global.System.Nullable(Of Short),  _
                    ByVal QCCheckerPD As String,  _
                    ByVal QCCheckerQC As String,  _
                    ByVal QCAQIIssueDate As Global.System.Nullable(Of Date),  _
                    ByVal QCCheckExceptOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCMainReasonExceptOSNG As String,  _
                    ByVal QCNGChipInExceptOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCNGIncludeExceptOSNG As Global.System.Nullable(Of Short),  _
                    ByVal QCNGJudgeExceptOSNG As Global.System.Nullable(Of Short),  _
                    ByVal QCNGChipInGoodChip As Global.System.Nullable(Of Integer),  _
                    ByVal QCNGIncludeGoodChip As Global.System.Nullable(Of Short),  _
                    ByVal QCNGJudgeGoodChip As Global.System.Nullable(Of Short),  _
                    ByVal CREATION_DATE As Global.System.Nullable(Of Date),  _
                    ByVal SEND_FLG As String,  _
                    ByVal SEND_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_LOT_NO As String,  _
                    ByVal Original_DVI_NO As Integer,  _
                    ByVal Original_PRD_NAME As String,  _
                    ByVal Original_IN_DAY As String,  _
                    ByVal Original_OUT_DAY As String,  _
                    ByVal Original_OPE_SEQ As Short,  _
                    ByVal Original_PRD_PIECE As Integer,  _
                    ByVal Original_INP_PIECE As Integer,  _
                    ByVal Original_OUT_PIECE As Integer,  _
                    ByVal Original_REAL_DAY As Global.System.Nullable(Of Date),  _
                    ByVal Original_BATCH_NO As String,  _
                    ByVal Original_BATCH_SUB As String,  _
                    ByVal Original_MATER_NAME As String,  _
                    ByVal Original_MATER_SNAME As String,  _
                    ByVal Original_MAKER As String,  _
                    ByVal Original_Y_LEVEL As String,  _
                    ByVal Original_STATUS1 As String,  _
                    ByVal Original_STATUS2 As String,  _
                    ByVal Original_CYCLE As Short,  _
                    ByVal Original_BOX_NO As String,  _
                    ByVal Original_PRV_BOX_NO As String,  _
                    ByVal Original_WAFER_STATUS As String,  _
                    ByVal Original_LMT_STR_TIME As Global.System.Nullable(Of Date),  _
                    ByVal Original_WAGON_NO As String,  _
                    ByVal Original_REP_OPE_SEQ As Short,  _
                    ByVal Original_REPEAT_QNT As Short,  _
                    ByVal Original_TOTAL_MASK As String,  _
                    ByVal Original_STATUS2_SAVE As String,  _
                    ByVal Original_REAL_START As Global.System.Nullable(Of Date),  _
                    ByVal Original_TRO_TIME As Global.System.Nullable(Of Date),  _
                    ByVal Original_SISAKU_FLG As String,  _
                    ByVal Original_PARENT_LOT As String,  _
                    ByVal Original_OPE_AREA As String,  _
                    ByVal Original_OPE_CHG_FLG As String,  _
                    ByVal Original_PLT_OPE_SEQ1 As Global.System.Nullable(Of Short),  _
                    ByVal Original_PLT_OPE_SEQ2 As Global.System.Nullable(Of Short),  _
                    ByVal Original_PILOT_QNT As Global.System.Nullable(Of Short),  _
                    ByVal Original_TOTAL_QNT As Global.System.Nullable(Of Short),  _
                    ByVal Original_COMMENT As String,  _
                    ByVal Original_ROHM_ORDER_MODEL_NAME_O As String,  _
                    ByVal Original_ORDER_NO As String,  _
                    ByVal Original_FT_MODEL_NAME As String,  _
                    ByVal Original_TP_RANK As String,  _
                    ByVal Original_WARI_STOCK_KBN As Global.System.Nullable(Of Short),  _
                    ByVal Original_WARI_INSTRUCT_KBN As Global.System.Nullable(Of Short),  _
                    ByVal Original_FORM_NAME As String,  _
                    ByVal Original_GOOD_PIECES As Integer,  _
                    ByVal Original_BAD_PIECES As Integer,  _
                    ByVal Original_ShipTargetChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal Original_OfficialChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal Original_RestLotInitialChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal Original_RestLotInitialInputMagazine As Global.System.Nullable(Of Short),  _
                    ByVal Original_RestLotInitialInputFrame As Global.System.Nullable(Of Short),  _
                    ByVal Original_Section As String,  _
                    ByVal Original_InvoiceNo As String,  _
                    ByVal Original_QCCheckDBNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckDBPNashi As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckHajikiPullShaer As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckWBNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckWBInsNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckJudge As Global.System.Nullable(Of Short),  _
                    ByVal Original_QCCheckerPD As String,  _
                    ByVal Original_QCCheckerQC As String,  _
                    ByVal Original_QCAQIIssueDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_QCCheckExceptOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCMainReasonExceptOSNG As String,  _
                    ByVal Original_QCNGChipInExceptOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCNGIncludeExceptOSNG As Global.System.Nullable(Of Short),  _
                    ByVal Original_QCNGJudgeExceptOSNG As Global.System.Nullable(Of Short),  _
                    ByVal Original_QCNGChipInGoodChip As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCNGIncludeGoodChip As Global.System.Nullable(Of Short),  _
                    ByVal Original_QCNGJudgeGoodChip As Global.System.Nullable(Of Short),  _
                    ByVal Original_CREATION_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_SEND_FLG As String,  _
                    ByVal Original_SEND_DATE As Global.System.Nullable(Of Date)) As Integer
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(LOT_NO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DVI_NO,Integer)
            If (PRD_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRD_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PRD_NAME,String)
            End If
            If (IN_DAY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IN_DAY")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(IN_DAY,String)
            End If
            If (OUT_DAY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OUT_DAY")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(OUT_DAY,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(OPE_SEQ,Short)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PRD_PIECE,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(INP_PIECE,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(OUT_PIECE,Integer)
            If (REAL_DAY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(REAL_DAY.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (BATCH_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(BATCH_NO,String)
            End If
            If (BATCH_SUB Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(BATCH_SUB,String)
            End If
            If (MATER_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(MATER_NAME,String)
            End If
            If (MATER_SNAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(MATER_SNAME,String)
            End If
            If (MAKER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(MAKER,String)
            End If
            If (Y_LEVEL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Y_LEVEL")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Y_LEVEL,String)
            End If
            If (STATUS1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STATUS1")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(STATUS1,String)
            End If
            If (STATUS2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STATUS2")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(STATUS2,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(CYCLE,Short)
            If (BOX_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(BOX_NO,String)
            End If
            If (PRV_BOX_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(PRV_BOX_NO,String)
            End If
            If (WAFER_STATUS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(WAFER_STATUS,String)
            End If
            If (LMT_STR_TIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(LMT_STR_TIME.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (WAGON_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(WAGON_NO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(REP_OPE_SEQ,Short)
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(REPEAT_QNT,Short)
            If (TOTAL_MASK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(TOTAL_MASK,String)
            End If
            If (STATUS2_SAVE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(STATUS2_SAVE,String)
            End If
            If (REAL_START.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(REAL_START.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (TRO_TIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(TRO_TIME.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (SISAKU_FLG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SISAKU_FLG")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(SISAKU_FLG,String)
            End If
            If (PARENT_LOT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(PARENT_LOT,String)
            End If
            If (OPE_AREA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(OPE_AREA,String)
            End If
            If (OPE_CHG_FLG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(OPE_CHG_FLG,String)
            End If
            If (PLT_OPE_SEQ1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(PLT_OPE_SEQ1.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (PLT_OPE_SEQ2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(PLT_OPE_SEQ2.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (PILOT_QNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(PILOT_QNT.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_QNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(TOTAL_QNT.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (COMMENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(COMMENT,String)
            End If
            If (ROHM_ORDER_MODEL_NAME_O Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(ROHM_ORDER_MODEL_NAME_O,String)
            End If
            If (ORDER_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(ORDER_NO,String)
            End If
            If (FT_MODEL_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(FT_MODEL_NAME,String)
            End If
            If (TP_RANK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(TP_RANK,String)
            End If
            If (WARI_STOCK_KBN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(WARI_STOCK_KBN.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (WARI_INSTRUCT_KBN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(WARI_INSTRUCT_KBN.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (FORM_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(FORM_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(46).Value = CType(GOOD_PIECES,Integer)
            Me.Adapter.UpdateCommand.Parameters(47).Value = CType(BAD_PIECES,Integer)
            If (ShipTargetChipCount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(ShipTargetChipCount.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (OfficialChipCount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(OfficialChipCount.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (RestLotInitialChipCount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(RestLotInitialChipCount.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (RestLotInitialInputMagazine.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(RestLotInitialInputMagazine.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (RestLotInitialInputFrame.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(RestLotInitialInputFrame.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (Section Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Section,String)
            End If
            If (InvoiceNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(InvoiceNo,String)
            End If
            If (QCCheckDBNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(QCCheckDBNG.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (QCCheckDBPNashi.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(QCCheckDBPNashi.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (QCCheckHajikiPullShaer.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(QCCheckHajikiPullShaer.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (QCCheckWBNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(QCCheckWBNG.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (QCCheckWBInsNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(QCCheckWBInsNG.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (QCCheckOSNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(QCCheckOSNG.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (QCCheckJudge.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(QCCheckJudge.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (QCCheckerPD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(QCCheckerPD,String)
            End If
            If (QCCheckerQC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(QCCheckerQC,String)
            End If
            If (QCAQIIssueDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(QCAQIIssueDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (QCCheckExceptOSNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(QCCheckExceptOSNG.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (QCMainReasonExceptOSNG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(QCMainReasonExceptOSNG,String)
            End If
            If (QCNGChipInExceptOSNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(QCNGChipInExceptOSNG.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (QCNGIncludeExceptOSNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(QCNGIncludeExceptOSNG.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            End If
            If (QCNGJudgeExceptOSNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(QCNGJudgeExceptOSNG.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            If (QCNGChipInGoodChip.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(QCNGChipInGoodChip.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = Global.System.DBNull.Value
            End If
            If (QCNGIncludeGoodChip.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(QCNGIncludeGoodChip.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            End If
            If (QCNGJudgeGoodChip.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(QCNGJudgeGoodChip.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = Global.System.DBNull.Value
            End If
            If (CREATION_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(CREATION_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            End If
            If (SEND_FLG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(SEND_FLG,String)
            End If
            If (SEND_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(SEND_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(75).Value = Global.System.DBNull.Value
            End If
            If (Original_LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOT_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(Original_LOT_NO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(77).Value = CType(Original_DVI_NO,Integer)
            If (Original_PRD_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRD_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(Original_PRD_NAME,String)
            End If
            If (Original_IN_DAY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IN_DAY")
            Else
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(Original_IN_DAY,String)
            End If
            If (Original_OUT_DAY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_OUT_DAY")
            Else
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(Original_OUT_DAY,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(81).Value = CType(Original_OPE_SEQ,Short)
            Me.Adapter.UpdateCommand.Parameters(82).Value = CType(Original_PRD_PIECE,Integer)
            Me.Adapter.UpdateCommand.Parameters(83).Value = CType(Original_INP_PIECE,Integer)
            Me.Adapter.UpdateCommand.Parameters(84).Value = CType(Original_OUT_PIECE,Integer)
            If (Original_REAL_DAY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(Original_REAL_DAY.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(86).Value = Global.System.DBNull.Value
            End If
            If (Original_BATCH_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(Original_BATCH_NO,String)
            End If
            If (Original_BATCH_SUB Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(Original_BATCH_SUB,String)
            End If
            If (Original_MATER_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(Original_MATER_NAME,String)
            End If
            If (Original_MATER_SNAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(Original_MATER_SNAME,String)
            End If
            If (Original_MAKER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(Original_MAKER,String)
            End If
            If (Original_Y_LEVEL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Y_LEVEL")
            Else
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(Original_Y_LEVEL,String)
            End If
            If (Original_STATUS1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STATUS1")
            Else
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(Original_STATUS1,String)
            End If
            If (Original_STATUS2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STATUS2")
            Else
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(Original_STATUS2,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(100).Value = CType(Original_CYCLE,Short)
            If (Original_BOX_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(102).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(Original_BOX_NO,String)
            End If
            If (Original_PRV_BOX_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(104).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(Original_PRV_BOX_NO,String)
            End If
            If (Original_WAFER_STATUS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(105).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(106).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(105).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(106).Value = CType(Original_WAFER_STATUS,String)
            End If
            If (Original_LMT_STR_TIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(Original_LMT_STR_TIME.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(108).Value = Global.System.DBNull.Value
            End If
            If (Original_WAGON_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(110).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(Original_WAGON_NO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(111).Value = CType(Original_REP_OPE_SEQ,Short)
            Me.Adapter.UpdateCommand.Parameters(112).Value = CType(Original_REPEAT_QNT,Short)
            If (Original_TOTAL_MASK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(113).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(114).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(113).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(Original_TOTAL_MASK,String)
            End If
            If (Original_STATUS2_SAVE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(115).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(116).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(115).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(Original_STATUS2_SAVE,String)
            End If
            If (Original_REAL_START.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(117).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(118).Value = CType(Original_REAL_START.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(117).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(118).Value = Global.System.DBNull.Value
            End If
            If (Original_TRO_TIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(119).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(120).Value = CType(Original_TRO_TIME.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(119).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(120).Value = Global.System.DBNull.Value
            End If
            If (Original_SISAKU_FLG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SISAKU_FLG")
            Else
                Me.Adapter.UpdateCommand.Parameters(121).Value = CType(Original_SISAKU_FLG,String)
            End If
            If (Original_PARENT_LOT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(122).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(123).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(122).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(123).Value = CType(Original_PARENT_LOT,String)
            End If
            If (Original_OPE_AREA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(124).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(125).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(124).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(125).Value = CType(Original_OPE_AREA,String)
            End If
            If (Original_OPE_CHG_FLG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(126).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(127).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(126).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(127).Value = CType(Original_OPE_CHG_FLG,String)
            End If
            If (Original_PLT_OPE_SEQ1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(128).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(129).Value = CType(Original_PLT_OPE_SEQ1.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(128).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(129).Value = Global.System.DBNull.Value
            End If
            If (Original_PLT_OPE_SEQ2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(130).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(131).Value = CType(Original_PLT_OPE_SEQ2.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(130).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(131).Value = Global.System.DBNull.Value
            End If
            If (Original_PILOT_QNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(132).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(133).Value = CType(Original_PILOT_QNT.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(132).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(133).Value = Global.System.DBNull.Value
            End If
            If (Original_TOTAL_QNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(134).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(135).Value = CType(Original_TOTAL_QNT.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(134).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(135).Value = Global.System.DBNull.Value
            End If
            If (Original_COMMENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(136).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(137).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(136).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(137).Value = CType(Original_COMMENT,String)
            End If
            If (Original_ROHM_ORDER_MODEL_NAME_O Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(138).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(139).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(138).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(139).Value = CType(Original_ROHM_ORDER_MODEL_NAME_O,String)
            End If
            If (Original_ORDER_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(140).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(141).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(140).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(141).Value = CType(Original_ORDER_NO,String)
            End If
            If (Original_FT_MODEL_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(142).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(143).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(142).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(143).Value = CType(Original_FT_MODEL_NAME,String)
            End If
            If (Original_TP_RANK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(144).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(145).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(144).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(145).Value = CType(Original_TP_RANK,String)
            End If
            If (Original_WARI_STOCK_KBN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(146).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(147).Value = CType(Original_WARI_STOCK_KBN.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(146).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(147).Value = Global.System.DBNull.Value
            End If
            If (Original_WARI_INSTRUCT_KBN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(148).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(149).Value = CType(Original_WARI_INSTRUCT_KBN.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(148).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(149).Value = Global.System.DBNull.Value
            End If
            If (Original_FORM_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(150).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(151).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(150).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(151).Value = CType(Original_FORM_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(152).Value = CType(Original_GOOD_PIECES,Integer)
            Me.Adapter.UpdateCommand.Parameters(153).Value = CType(Original_BAD_PIECES,Integer)
            If (Original_ShipTargetChipCount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(154).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(155).Value = CType(Original_ShipTargetChipCount.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(154).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(155).Value = Global.System.DBNull.Value
            End If
            If (Original_OfficialChipCount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(156).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(157).Value = CType(Original_OfficialChipCount.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(156).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(157).Value = Global.System.DBNull.Value
            End If
            If (Original_RestLotInitialChipCount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(158).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(159).Value = CType(Original_RestLotInitialChipCount.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(158).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(159).Value = Global.System.DBNull.Value
            End If
            If (Original_RestLotInitialInputMagazine.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(160).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(161).Value = CType(Original_RestLotInitialInputMagazine.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(160).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(161).Value = Global.System.DBNull.Value
            End If
            If (Original_RestLotInitialInputFrame.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(162).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(163).Value = CType(Original_RestLotInitialInputFrame.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(162).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(163).Value = Global.System.DBNull.Value
            End If
            If (Original_Section Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(164).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(165).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(164).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(165).Value = CType(Original_Section,String)
            End If
            If (Original_InvoiceNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(166).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(167).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(166).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(167).Value = CType(Original_InvoiceNo,String)
            End If
            If (Original_QCCheckDBNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(168).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(169).Value = CType(Original_QCCheckDBNG.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(168).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(169).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckDBPNashi.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(170).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(171).Value = CType(Original_QCCheckDBPNashi.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(170).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(171).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckHajikiPullShaer.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(172).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(173).Value = CType(Original_QCCheckHajikiPullShaer.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(172).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(173).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckWBNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(174).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(175).Value = CType(Original_QCCheckWBNG.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(174).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(175).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckWBInsNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(176).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(177).Value = CType(Original_QCCheckWBInsNG.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(176).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(177).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckOSNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(178).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(179).Value = CType(Original_QCCheckOSNG.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(178).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(179).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckJudge.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(180).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(181).Value = CType(Original_QCCheckJudge.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(180).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(181).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckerPD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(182).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(183).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(182).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(183).Value = CType(Original_QCCheckerPD,String)
            End If
            If (Original_QCCheckerQC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(184).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(185).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(184).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(185).Value = CType(Original_QCCheckerQC,String)
            End If
            If (Original_QCAQIIssueDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(186).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(187).Value = CType(Original_QCAQIIssueDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(186).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(187).Value = Global.System.DBNull.Value
            End If
            If (Original_QCCheckExceptOSNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(188).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(189).Value = CType(Original_QCCheckExceptOSNG.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(188).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(189).Value = Global.System.DBNull.Value
            End If
            If (Original_QCMainReasonExceptOSNG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(190).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(191).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(190).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(191).Value = CType(Original_QCMainReasonExceptOSNG,String)
            End If
            If (Original_QCNGChipInExceptOSNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(192).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(193).Value = CType(Original_QCNGChipInExceptOSNG.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(192).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(193).Value = Global.System.DBNull.Value
            End If
            If (Original_QCNGIncludeExceptOSNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(194).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(195).Value = CType(Original_QCNGIncludeExceptOSNG.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(194).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(195).Value = Global.System.DBNull.Value
            End If
            If (Original_QCNGJudgeExceptOSNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(196).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(197).Value = CType(Original_QCNGJudgeExceptOSNG.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(196).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(197).Value = Global.System.DBNull.Value
            End If
            If (Original_QCNGChipInGoodChip.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(198).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(199).Value = CType(Original_QCNGChipInGoodChip.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(198).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(199).Value = Global.System.DBNull.Value
            End If
            If (Original_QCNGIncludeGoodChip.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(200).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(201).Value = CType(Original_QCNGIncludeGoodChip.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(200).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(201).Value = Global.System.DBNull.Value
            End If
            If (Original_QCNGJudgeGoodChip.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(202).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(203).Value = CType(Original_QCNGJudgeGoodChip.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(202).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(203).Value = Global.System.DBNull.Value
            End If
            If (Original_CREATION_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(204).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(205).Value = CType(Original_CREATION_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(204).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(205).Value = Global.System.DBNull.Value
            End If
            If (Original_SEND_FLG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(206).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(207).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(206).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(207).Value = CType(Original_SEND_FLG,String)
            End If
            If (Original_SEND_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(208).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(209).Value = CType(Original_SEND_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(208).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(209).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal DVI_NO As Integer,  _
                    ByVal PRD_NAME As String,  _
                    ByVal IN_DAY As String,  _
                    ByVal OUT_DAY As String,  _
                    ByVal OPE_SEQ As Short,  _
                    ByVal PRD_PIECE As Integer,  _
                    ByVal INP_PIECE As Integer,  _
                    ByVal OUT_PIECE As Integer,  _
                    ByVal REAL_DAY As Global.System.Nullable(Of Date),  _
                    ByVal BATCH_NO As String,  _
                    ByVal BATCH_SUB As String,  _
                    ByVal MATER_NAME As String,  _
                    ByVal MATER_SNAME As String,  _
                    ByVal MAKER As String,  _
                    ByVal Y_LEVEL As String,  _
                    ByVal STATUS1 As String,  _
                    ByVal STATUS2 As String,  _
                    ByVal CYCLE As Short,  _
                    ByVal BOX_NO As String,  _
                    ByVal PRV_BOX_NO As String,  _
                    ByVal WAFER_STATUS As String,  _
                    ByVal LMT_STR_TIME As Global.System.Nullable(Of Date),  _
                    ByVal WAGON_NO As String,  _
                    ByVal REP_OPE_SEQ As Short,  _
                    ByVal REPEAT_QNT As Short,  _
                    ByVal TOTAL_MASK As String,  _
                    ByVal STATUS2_SAVE As String,  _
                    ByVal REAL_START As Global.System.Nullable(Of Date),  _
                    ByVal TRO_TIME As Global.System.Nullable(Of Date),  _
                    ByVal SISAKU_FLG As String,  _
                    ByVal PARENT_LOT As String,  _
                    ByVal OPE_AREA As String,  _
                    ByVal OPE_CHG_FLG As String,  _
                    ByVal PLT_OPE_SEQ1 As Global.System.Nullable(Of Short),  _
                    ByVal PLT_OPE_SEQ2 As Global.System.Nullable(Of Short),  _
                    ByVal PILOT_QNT As Global.System.Nullable(Of Short),  _
                    ByVal TOTAL_QNT As Global.System.Nullable(Of Short),  _
                    ByVal COMMENT As String,  _
                    ByVal ROHM_ORDER_MODEL_NAME_O As String,  _
                    ByVal ORDER_NO As String,  _
                    ByVal FT_MODEL_NAME As String,  _
                    ByVal TP_RANK As String,  _
                    ByVal WARI_STOCK_KBN As Global.System.Nullable(Of Short),  _
                    ByVal WARI_INSTRUCT_KBN As Global.System.Nullable(Of Short),  _
                    ByVal FORM_NAME As String,  _
                    ByVal GOOD_PIECES As Integer,  _
                    ByVal BAD_PIECES As Integer,  _
                    ByVal ShipTargetChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal OfficialChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal RestLotInitialChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal RestLotInitialInputMagazine As Global.System.Nullable(Of Short),  _
                    ByVal RestLotInitialInputFrame As Global.System.Nullable(Of Short),  _
                    ByVal Section As String,  _
                    ByVal InvoiceNo As String,  _
                    ByVal QCCheckDBNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckDBPNashi As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckHajikiPullShaer As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckWBNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckWBInsNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCCheckJudge As Global.System.Nullable(Of Short),  _
                    ByVal QCCheckerPD As String,  _
                    ByVal QCCheckerQC As String,  _
                    ByVal QCAQIIssueDate As Global.System.Nullable(Of Date),  _
                    ByVal QCCheckExceptOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCMainReasonExceptOSNG As String,  _
                    ByVal QCNGChipInExceptOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal QCNGIncludeExceptOSNG As Global.System.Nullable(Of Short),  _
                    ByVal QCNGJudgeExceptOSNG As Global.System.Nullable(Of Short),  _
                    ByVal QCNGChipInGoodChip As Global.System.Nullable(Of Integer),  _
                    ByVal QCNGIncludeGoodChip As Global.System.Nullable(Of Short),  _
                    ByVal QCNGJudgeGoodChip As Global.System.Nullable(Of Short),  _
                    ByVal CREATION_DATE As Global.System.Nullable(Of Date),  _
                    ByVal SEND_FLG As String,  _
                    ByVal SEND_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_LOT_NO As String,  _
                    ByVal Original_DVI_NO As Integer,  _
                    ByVal Original_PRD_NAME As String,  _
                    ByVal Original_IN_DAY As String,  _
                    ByVal Original_OUT_DAY As String,  _
                    ByVal Original_OPE_SEQ As Short,  _
                    ByVal Original_PRD_PIECE As Integer,  _
                    ByVal Original_INP_PIECE As Integer,  _
                    ByVal Original_OUT_PIECE As Integer,  _
                    ByVal Original_REAL_DAY As Global.System.Nullable(Of Date),  _
                    ByVal Original_BATCH_NO As String,  _
                    ByVal Original_BATCH_SUB As String,  _
                    ByVal Original_MATER_NAME As String,  _
                    ByVal Original_MATER_SNAME As String,  _
                    ByVal Original_MAKER As String,  _
                    ByVal Original_Y_LEVEL As String,  _
                    ByVal Original_STATUS1 As String,  _
                    ByVal Original_STATUS2 As String,  _
                    ByVal Original_CYCLE As Short,  _
                    ByVal Original_BOX_NO As String,  _
                    ByVal Original_PRV_BOX_NO As String,  _
                    ByVal Original_WAFER_STATUS As String,  _
                    ByVal Original_LMT_STR_TIME As Global.System.Nullable(Of Date),  _
                    ByVal Original_WAGON_NO As String,  _
                    ByVal Original_REP_OPE_SEQ As Short,  _
                    ByVal Original_REPEAT_QNT As Short,  _
                    ByVal Original_TOTAL_MASK As String,  _
                    ByVal Original_STATUS2_SAVE As String,  _
                    ByVal Original_REAL_START As Global.System.Nullable(Of Date),  _
                    ByVal Original_TRO_TIME As Global.System.Nullable(Of Date),  _
                    ByVal Original_SISAKU_FLG As String,  _
                    ByVal Original_PARENT_LOT As String,  _
                    ByVal Original_OPE_AREA As String,  _
                    ByVal Original_OPE_CHG_FLG As String,  _
                    ByVal Original_PLT_OPE_SEQ1 As Global.System.Nullable(Of Short),  _
                    ByVal Original_PLT_OPE_SEQ2 As Global.System.Nullable(Of Short),  _
                    ByVal Original_PILOT_QNT As Global.System.Nullable(Of Short),  _
                    ByVal Original_TOTAL_QNT As Global.System.Nullable(Of Short),  _
                    ByVal Original_COMMENT As String,  _
                    ByVal Original_ROHM_ORDER_MODEL_NAME_O As String,  _
                    ByVal Original_ORDER_NO As String,  _
                    ByVal Original_FT_MODEL_NAME As String,  _
                    ByVal Original_TP_RANK As String,  _
                    ByVal Original_WARI_STOCK_KBN As Global.System.Nullable(Of Short),  _
                    ByVal Original_WARI_INSTRUCT_KBN As Global.System.Nullable(Of Short),  _
                    ByVal Original_FORM_NAME As String,  _
                    ByVal Original_GOOD_PIECES As Integer,  _
                    ByVal Original_BAD_PIECES As Integer,  _
                    ByVal Original_ShipTargetChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal Original_OfficialChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal Original_RestLotInitialChipCount As Global.System.Nullable(Of Integer),  _
                    ByVal Original_RestLotInitialInputMagazine As Global.System.Nullable(Of Short),  _
                    ByVal Original_RestLotInitialInputFrame As Global.System.Nullable(Of Short),  _
                    ByVal Original_Section As String,  _
                    ByVal Original_InvoiceNo As String,  _
                    ByVal Original_QCCheckDBNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckDBPNashi As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckHajikiPullShaer As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckWBNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckWBInsNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCCheckJudge As Global.System.Nullable(Of Short),  _
                    ByVal Original_QCCheckerPD As String,  _
                    ByVal Original_QCCheckerQC As String,  _
                    ByVal Original_QCAQIIssueDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_QCCheckExceptOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCMainReasonExceptOSNG As String,  _
                    ByVal Original_QCNGChipInExceptOSNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCNGIncludeExceptOSNG As Global.System.Nullable(Of Short),  _
                    ByVal Original_QCNGJudgeExceptOSNG As Global.System.Nullable(Of Short),  _
                    ByVal Original_QCNGChipInGoodChip As Global.System.Nullable(Of Integer),  _
                    ByVal Original_QCNGIncludeGoodChip As Global.System.Nullable(Of Short),  _
                    ByVal Original_QCNGJudgeGoodChip As Global.System.Nullable(Of Short),  _
                    ByVal Original_CREATION_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_SEND_FLG As String,  _
                    ByVal Original_SEND_DATE As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_LOT_NO, DVI_NO, PRD_NAME, IN_DAY, OUT_DAY, OPE_SEQ, PRD_PIECE, INP_PIECE, OUT_PIECE, REAL_DAY, BATCH_NO, BATCH_SUB, MATER_NAME, MATER_SNAME, MAKER, Y_LEVEL, STATUS1, STATUS2, CYCLE, BOX_NO, PRV_BOX_NO, WAFER_STATUS, LMT_STR_TIME, WAGON_NO, REP_OPE_SEQ, REPEAT_QNT, TOTAL_MASK, STATUS2_SAVE, REAL_START, TRO_TIME, SISAKU_FLG, PARENT_LOT, OPE_AREA, OPE_CHG_FLG, PLT_OPE_SEQ1, PLT_OPE_SEQ2, PILOT_QNT, TOTAL_QNT, COMMENT, ROHM_ORDER_MODEL_NAME_O, ORDER_NO, FT_MODEL_NAME, TP_RANK, WARI_STOCK_KBN, WARI_INSTRUCT_KBN, FORM_NAME, GOOD_PIECES, BAD_PIECES, ShipTargetChipCount, OfficialChipCount, RestLotInitialChipCount, RestLotInitialInputMagazine, RestLotInitialInputFrame, Section, InvoiceNo, QCCheckDBNG, QCCheckDBPNashi, QCCheckHajikiPullShaer, QCCheckWBNG, QCCheckWBInsNG, QCCheckOSNG, QCCheckJudge, QCCheckerPD, QCCheckerQC, QCAQIIssueDate, QCCheckExceptOSNG, QCMainReasonExceptOSNG, QCNGChipInExceptOSNG, QCNGIncludeExceptOSNG, QCNGJudgeExceptOSNG, QCNGChipInGoodChip, QCNGIncludeGoodChip, QCNGJudgeGoodChip, CREATION_DATE, SEND_FLG, SEND_DATE, Original_LOT_NO, Original_DVI_NO, Original_PRD_NAME, Original_IN_DAY, Original_OUT_DAY, Original_OPE_SEQ, Original_PRD_PIECE, Original_INP_PIECE, Original_OUT_PIECE, Original_REAL_DAY, Original_BATCH_NO, Original_BATCH_SUB, Original_MATER_NAME, Original_MATER_SNAME, Original_MAKER, Original_Y_LEVEL, Original_STATUS1, Original_STATUS2, Original_CYCLE, Original_BOX_NO, Original_PRV_BOX_NO, Original_WAFER_STATUS, Original_LMT_STR_TIME, Original_WAGON_NO, Original_REP_OPE_SEQ, Original_REPEAT_QNT, Original_TOTAL_MASK, Original_STATUS2_SAVE, Original_REAL_START, Original_TRO_TIME, Original_SISAKU_FLG, Original_PARENT_LOT, Original_OPE_AREA, Original_OPE_CHG_FLG, Original_PLT_OPE_SEQ1, Original_PLT_OPE_SEQ2, Original_PILOT_QNT, Original_TOTAL_QNT, Original_COMMENT, Original_ROHM_ORDER_MODEL_NAME_O, Original_ORDER_NO, Original_FT_MODEL_NAME, Original_TP_RANK, Original_WARI_STOCK_KBN, Original_WARI_INSTRUCT_KBN, Original_FORM_NAME, Original_GOOD_PIECES, Original_BAD_PIECES, Original_ShipTargetChipCount, Original_OfficialChipCount, Original_RestLotInitialChipCount, Original_RestLotInitialInputMagazine, Original_RestLotInitialInputFrame, Original_Section, Original_InvoiceNo, Original_QCCheckDBNG, Original_QCCheckDBPNashi, Original_QCCheckHajikiPullShaer, Original_QCCheckWBNG, Original_QCCheckWBInsNG, Original_QCCheckOSNG, Original_QCCheckJudge, Original_QCCheckerPD, Original_QCCheckerQC, Original_QCAQIIssueDate, Original_QCCheckExceptOSNG, Original_QCMainReasonExceptOSNG, Original_QCNGChipInExceptOSNG, Original_QCNGIncludeExceptOSNG, Original_QCNGJudgeExceptOSNG, Original_QCNGChipInGoodChip, Original_QCNGIncludeGoodChip, Original_QCNGJudgeGoodChip, Original_CREATION_DATE, Original_SEND_FLG, Original_SEND_DATE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MACHI_TABLETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MACHI_TABLE"
            tableMapping.ColumnMappings.Add("MACHI_NAME", "MACHI_NAME")
            tableMapping.ColumnMappings.Add("PROCESS_TYPE", "PROCESS_TYPE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[MACHI_TABLE] WHERE (([MACHI_NAME] = @Original_MACHI_NAME) AND "& _ 
                "((@IsNull_PROCESS_TYPE = 1 AND [PROCESS_TYPE] IS NULL) OR ([PROCESS_TYPE] = @Ori"& _ 
                "ginal_PROCESS_TYPE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MACHI_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHI_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PROCESS_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_TYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROCESS_TYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[MACHI_TABLE] ([MACHI_NAME], [PROCESS_TYPE]) VALUES (@MACHI_NAM"& _ 
                "E, @PROCESS_TYPE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MACHI_NAME, PROCESS_TYPE FROM MACHI_TABLE WHERE (MACH"& _ 
                "I_NAME = @MACHI_NAME)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MACHI_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHI_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_TYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[MACHI_TABLE] SET [MACHI_NAME] = @MACHI_NAME, [PROCESS_TYPE] = @PROC"& _ 
                "ESS_TYPE WHERE (([MACHI_NAME] = @Original_MACHI_NAME) AND ((@IsNull_PROCESS_TYPE"& _ 
                " = 1 AND [PROCESS_TYPE] IS NULL) OR ([PROCESS_TYPE] = @Original_PROCESS_TYPE)));"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MACHI_NAME, PROCESS_TYPE FROM MACHI_TABLE WHERE (MACHI_NAME = @MACHI_NA"& _ 
                "ME)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MACHI_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHI_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_TYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MACHI_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHI_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PROCESS_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_TYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROCESS_TYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Rohm.Apcs.Tdc.My.MySettings.Default.APCSDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MACHI_NAME,PROCESS_TYPE FROM dbo.MACHI_TABLE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT MACHI_NAME, PROCESS_TYPE FROM MACHI_TABLE WHERE (MACHI_NAME = @MACHI_NAME)"& _ 
                ""
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MACHI_NAME", Global.System.Data.SqlDbType.VarChar, 12, Global.System.Data.ParameterDirection.Input, 0, 0, "MACHI_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As APCSDBDataSet.MACHI_TABLEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As APCSDBDataSet.MACHI_TABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As APCSDBDataSet.MACHI_TABLEDataTable = New APCSDBDataSet.MACHI_TABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByMachineName(ByVal dataTable As APCSDBDataSet.MACHI_TABLEDataTable, ByVal MACHI_NAME As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (MACHI_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MACHI_NAME")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(MACHI_NAME,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByMachineName(ByVal MACHI_NAME As String) As APCSDBDataSet.MACHI_TABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (MACHI_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MACHI_NAME")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(MACHI_NAME,String)
            End If
            Dim dataTable As APCSDBDataSet.MACHI_TABLEDataTable = New APCSDBDataSet.MACHI_TABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As APCSDBDataSet.MACHI_TABLEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As APCSDBDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "MACHI_TABLE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_MACHI_NAME As String, ByVal Original_PROCESS_TYPE As String) As Integer
            If (Original_MACHI_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MACHI_NAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MACHI_NAME,String)
            End If
            If (Original_PROCESS_TYPE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PROCESS_TYPE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal MACHI_NAME As String, ByVal PROCESS_TYPE As String) As Integer
            If (MACHI_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MACHI_NAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(MACHI_NAME,String)
            End If
            If (PROCESS_TYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PROCESS_TYPE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MACHI_NAME As String, ByVal PROCESS_TYPE As String, ByVal Original_MACHI_NAME As String, ByVal Original_PROCESS_TYPE As String) As Integer
            If (MACHI_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MACHI_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MACHI_NAME,String)
            End If
            If (PROCESS_TYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PROCESS_TYPE,String)
            End If
            If (Original_MACHI_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MACHI_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_MACHI_NAME,String)
            End If
            If (Original_PROCESS_TYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_PROCESS_TYPE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PROCESS_TYPE As String, ByVal Original_MACHI_NAME As String, ByVal Original_PROCESS_TYPE As String) As Integer
            Return Me.Update(Original_MACHI_NAME, PROCESS_TYPE, Original_MACHI_NAME, Original_PROCESS_TYPE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class WorkDataTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "WorkData"
            tableMapping.ColumnMappings.Add("LOT_NO", "LOT_NO")
            tableMapping.ColumnMappings.Add("DVI_NO", "DVI_NO")
            tableMapping.ColumnMappings.Add("PRD_NAME", "PRD_NAME")
            tableMapping.ColumnMappings.Add("IN_DAY", "IN_DAY")
            tableMapping.ColumnMappings.Add("OUT_DAY", "OUT_DAY")
            tableMapping.ColumnMappings.Add("OPE_SEQ", "OPE_SEQ")
            tableMapping.ColumnMappings.Add("PRD_PIECE", "PRD_PIECE")
            tableMapping.ColumnMappings.Add("INP_PIECE", "INP_PIECE")
            tableMapping.ColumnMappings.Add("OUT_PIECE", "OUT_PIECE")
            tableMapping.ColumnMappings.Add("REAL_DAY", "REAL_DAY")
            tableMapping.ColumnMappings.Add("BATCH_NO", "BATCH_NO")
            tableMapping.ColumnMappings.Add("BATCH_SUB", "BATCH_SUB")
            tableMapping.ColumnMappings.Add("MATER_NAME", "MATER_NAME")
            tableMapping.ColumnMappings.Add("MATER_SNAME", "MATER_SNAME")
            tableMapping.ColumnMappings.Add("MAKER", "MAKER")
            tableMapping.ColumnMappings.Add("Y_LEVEL", "Y_LEVEL")
            tableMapping.ColumnMappings.Add("STATUS1", "STATUS1")
            tableMapping.ColumnMappings.Add("STATUS2", "STATUS2")
            tableMapping.ColumnMappings.Add("CYCLE", "CYCLE")
            tableMapping.ColumnMappings.Add("BOX_NO", "BOX_NO")
            tableMapping.ColumnMappings.Add("PRV_BOX_NO", "PRV_BOX_NO")
            tableMapping.ColumnMappings.Add("WAFER_STATUS", "WAFER_STATUS")
            tableMapping.ColumnMappings.Add("LMT_STR_TIME", "LMT_STR_TIME")
            tableMapping.ColumnMappings.Add("WAGON_NO", "WAGON_NO")
            tableMapping.ColumnMappings.Add("REP_OPE_SEQ", "REP_OPE_SEQ")
            tableMapping.ColumnMappings.Add("REPEAT_QNT", "REPEAT_QNT")
            tableMapping.ColumnMappings.Add("TOTAL_MASK", "TOTAL_MASK")
            tableMapping.ColumnMappings.Add("STATUS2_SAVE", "STATUS2_SAVE")
            tableMapping.ColumnMappings.Add("REAL_START", "REAL_START")
            tableMapping.ColumnMappings.Add("TRO_TIME", "TRO_TIME")
            tableMapping.ColumnMappings.Add("SISAKU_FLG", "SISAKU_FLG")
            tableMapping.ColumnMappings.Add("PARENT_LOT", "PARENT_LOT")
            tableMapping.ColumnMappings.Add("OPE_AREA", "OPE_AREA")
            tableMapping.ColumnMappings.Add("OPE_CHG_FLG", "OPE_CHG_FLG")
            tableMapping.ColumnMappings.Add("PLT_OPE_SEQ1", "PLT_OPE_SEQ1")
            tableMapping.ColumnMappings.Add("PLT_OPE_SEQ2", "PLT_OPE_SEQ2")
            tableMapping.ColumnMappings.Add("PILOT_QNT", "PILOT_QNT")
            tableMapping.ColumnMappings.Add("TOTAL_QNT", "TOTAL_QNT")
            tableMapping.ColumnMappings.Add("COMMENT", "COMMENT")
            tableMapping.ColumnMappings.Add("ROHM_ORDER_MODEL_NAME_O", "ROHM_ORDER_MODEL_NAME_O")
            tableMapping.ColumnMappings.Add("ORDER_NO", "ORDER_NO")
            tableMapping.ColumnMappings.Add("FT_MODEL_NAME", "FT_MODEL_NAME")
            tableMapping.ColumnMappings.Add("TP_RANK", "TP_RANK")
            tableMapping.ColumnMappings.Add("WARI_STOCK_KBN", "WARI_STOCK_KBN")
            tableMapping.ColumnMappings.Add("WARI_INSTRUCT_KBN", "WARI_INSTRUCT_KBN")
            tableMapping.ColumnMappings.Add("FORM_NAME", "FORM_NAME")
            tableMapping.ColumnMappings.Add("GOOD_PIECES", "GOOD_PIECES")
            tableMapping.ColumnMappings.Add("BAD_PIECES", "BAD_PIECES")
            tableMapping.ColumnMappings.Add("ShipTargetChipCount", "ShipTargetChipCount")
            tableMapping.ColumnMappings.Add("OfficialChipCount", "OfficialChipCount")
            tableMapping.ColumnMappings.Add("RestLotInitialChipCount", "RestLotInitialChipCount")
            tableMapping.ColumnMappings.Add("RestLotInitialInputMagazine", "RestLotInitialInputMagazine")
            tableMapping.ColumnMappings.Add("RestLotInitialInputFrame", "RestLotInitialInputFrame")
            tableMapping.ColumnMappings.Add("Section", "Section")
            tableMapping.ColumnMappings.Add("InvoiceNo", "InvoiceNo")
            tableMapping.ColumnMappings.Add("QCCheckDBNG", "QCCheckDBNG")
            tableMapping.ColumnMappings.Add("QCCheckDBPNashi", "QCCheckDBPNashi")
            tableMapping.ColumnMappings.Add("QCCheckHajikiPullShaer", "QCCheckHajikiPullShaer")
            tableMapping.ColumnMappings.Add("QCCheckWBNG", "QCCheckWBNG")
            tableMapping.ColumnMappings.Add("QCCheckWBInsNG", "QCCheckWBInsNG")
            tableMapping.ColumnMappings.Add("QCCheckOSNG", "QCCheckOSNG")
            tableMapping.ColumnMappings.Add("QCCheckJudge", "QCCheckJudge")
            tableMapping.ColumnMappings.Add("QCCheckerPD", "QCCheckerPD")
            tableMapping.ColumnMappings.Add("QCCheckerQC", "QCCheckerQC")
            tableMapping.ColumnMappings.Add("QCAQIIssueDate", "QCAQIIssueDate")
            tableMapping.ColumnMappings.Add("QCCheckExceptOSNG", "QCCheckExceptOSNG")
            tableMapping.ColumnMappings.Add("QCMainReasonExceptOSNG", "QCMainReasonExceptOSNG")
            tableMapping.ColumnMappings.Add("QCNGChipInExceptOSNG", "QCNGChipInExceptOSNG")
            tableMapping.ColumnMappings.Add("QCNGIncludeExceptOSNG", "QCNGIncludeExceptOSNG")
            tableMapping.ColumnMappings.Add("QCNGJudgeExceptOSNG", "QCNGJudgeExceptOSNG")
            tableMapping.ColumnMappings.Add("QCNGChipInGoodChip", "QCNGChipInGoodChip")
            tableMapping.ColumnMappings.Add("QCNGIncludeGoodChip", "QCNGIncludeGoodChip")
            tableMapping.ColumnMappings.Add("QCNGJudgeGoodChip", "QCNGJudgeGoodChip")
            tableMapping.ColumnMappings.Add("CREATION_DATE", "CREATION_DATE")
            tableMapping.ColumnMappings.Add("SEND_FLG", "SEND_FLG")
            tableMapping.ColumnMappings.Add("SEND_DATE", "SEND_DATE")
            tableMapping.ColumnMappings.Add("LOT_NO1", "LOT_NO1")
            tableMapping.ColumnMappings.Add("OPE_SEQ1", "OPE_SEQ1")
            tableMapping.ColumnMappings.Add("N_OPE_SEQ", "N_OPE_SEQ")
            tableMapping.ColumnMappings.Add("LAY_NO", "LAY_NO")
            tableMapping.ColumnMappings.Add("B_PLAN_DAY", "B_PLAN_DAY")
            tableMapping.ColumnMappings.Add("PLAN_DAY", "PLAN_DAY")
            tableMapping.ColumnMappings.Add("RECIPE", "RECIPE")
            tableMapping.ColumnMappings.Add("START_MSG", "START_MSG")
            tableMapping.ColumnMappings.Add("END_MSG", "END_MSG")
            tableMapping.ColumnMappings.Add("STOP_FLG", "STOP_FLG")
            tableMapping.ColumnMappings.Add("STOP_REASON", "STOP_REASON")
            tableMapping.ColumnMappings.Add("STOP_NAME", "STOP_NAME")
            tableMapping.ColumnMappings.Add("LIMIT_TIME1", "LIMIT_TIME1")
            tableMapping.ColumnMappings.Add("LIMIT_MSG1", "LIMIT_MSG1")
            tableMapping.ColumnMappings.Add("LIMIT_TIME2", "LIMIT_TIME2")
            tableMapping.ColumnMappings.Add("LIMIT_MSG2", "LIMIT_MSG2")
            tableMapping.ColumnMappings.Add("OPE_AREA1", "OPE_AREA1")
            tableMapping.ColumnMappings.Add("LIMIT_FLG", "LIMIT_FLG")
            tableMapping.ColumnMappings.Add("DATA_NO", "DATA_NO")
            tableMapping.ColumnMappings.Add("MASK_NAME", "MASK_NAME")
            tableMapping.ColumnMappings.Add("RESERVE_CODE", "RESERVE_CODE")
            tableMapping.ColumnMappings.Add("RESERVE_MACHI", "RESERVE_MACHI")
            tableMapping.ColumnMappings.Add("M_START_MSG", "M_START_MSG")
            tableMapping.ColumnMappings.Add("M_END_MSG", "M_END_MSG")
            tableMapping.ColumnMappings.Add("COMMENT3", "COMMENT3")
            tableMapping.ColumnMappings.Add("COMMENT4", "COMMENT4")
            tableMapping.ColumnMappings.Add("ENABLE_FLG", "ENABLE_FLG")
            tableMapping.ColumnMappings.Add("CREATION_DATE1", "CREATION_DATE1")
            tableMapping.ColumnMappings.Add("SEND_FLG1", "SEND_FLG1")
            tableMapping.ColumnMappings.Add("SEND_DATE1", "SEND_DATE1")
            tableMapping.ColumnMappings.Add("LAY_NO1", "LAY_NO1")
            tableMapping.ColumnMappings.Add("OPE_NAME", "OPE_NAME")
            tableMapping.ColumnMappings.Add("ROUTE", "ROUTE")
            tableMapping.ColumnMappings.Add("OPERATION", "OPERATION")
            tableMapping.ColumnMappings.Add("OPERATION_CODE", "OPERATION_CODE")
            tableMapping.ColumnMappings.Add("STD_TIME", "STD_TIME")
            tableMapping.ColumnMappings.Add("CREATION_DATE2", "CREATION_DATE2")
            tableMapping.ColumnMappings.Add("SEND_DATE2", "SEND_DATE2")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Rohm.Apcs.Tdc.My.MySettings.Default.APCSDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT A.*, B.*, C.* FROM (LOT1_TABLE AS A INNER JOIN LOT1_DATA AS B ON (A.LOT_NO"& _ 
                " = B.LOT_NO) AND (A.OPE_SEQ = B.OPE_SEQ)) INNER JOIN LAYER_TABLE AS C ON  B.LAY_"& _ 
                "NO = C.LAY_NO WHERE A.LOT_NO = @LOT_NO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 13, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function FillLotNo(ByVal dataTable As APCSDBDataSet.WorkDataDataTable, ByVal LOT_NO As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(LOT_NO,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetDataByLotNo(ByVal LOT_NO As String) As APCSDBDataSet.WorkDataDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(LOT_NO,String)
            End If
            Dim dataTable As APCSDBDataSet.WorkDataDataTable = New APCSDBDataSet.WorkDataDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _lOT1_DATATableAdapter As LOT1_DATATableAdapter
        
        Private _lOT1_TABLETableAdapter As LOT1_TABLETableAdapter
        
        Private _lOT2_DATATableAdapter As LOT2_DATATableAdapter
        
        Private _lOT2_TABLETableAdapter As LOT2_TABLETableAdapter
        
        Private _mACHI_TABLETableAdapter As MACHI_TABLETableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property LOT1_DATATableAdapter() As LOT1_DATATableAdapter
            Get
                Return Me._lOT1_DATATableAdapter
            End Get
            Set
                Me._lOT1_DATATableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property LOT1_TABLETableAdapter() As LOT1_TABLETableAdapter
            Get
                Return Me._lOT1_TABLETableAdapter
            End Get
            Set
                Me._lOT1_TABLETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property LOT2_DATATableAdapter() As LOT2_DATATableAdapter
            Get
                Return Me._lOT2_DATATableAdapter
            End Get
            Set
                Me._lOT2_DATATableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property LOT2_TABLETableAdapter() As LOT2_TABLETableAdapter
            Get
                Return Me._lOT2_TABLETableAdapter
            End Get
            Set
                Me._lOT2_TABLETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property MACHI_TABLETableAdapter() As MACHI_TABLETableAdapter
            Get
                Return Me._mACHI_TABLETableAdapter
            End Get
            Set
                Me._mACHI_TABLETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._lOT1_DATATableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._lOT1_DATATableAdapter.Connection) Is Nothing)) Then
                    Return Me._lOT1_DATATableAdapter.Connection
                End If
                If ((Not (Me._lOT1_TABLETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._lOT1_TABLETableAdapter.Connection) Is Nothing)) Then
                    Return Me._lOT1_TABLETableAdapter.Connection
                End If
                If ((Not (Me._lOT2_DATATableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._lOT2_DATATableAdapter.Connection) Is Nothing)) Then
                    Return Me._lOT2_DATATableAdapter.Connection
                End If
                If ((Not (Me._lOT2_TABLETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._lOT2_TABLETableAdapter.Connection) Is Nothing)) Then
                    Return Me._lOT2_TABLETableAdapter.Connection
                End If
                If ((Not (Me._mACHI_TABLETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._mACHI_TABLETableAdapter.Connection) Is Nothing)) Then
                    Return Me._mACHI_TABLETableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._lOT1_DATATableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._lOT1_TABLETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._lOT2_DATATableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._lOT2_TABLETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._mACHI_TABLETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As APCSDBDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._lOT2_TABLETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.LOT2_TABLE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._lOT2_TABLETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._mACHI_TABLETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.MACHI_TABLE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._mACHI_TABLETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._lOT1_DATATableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.LOT1_DATA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._lOT1_DATATableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._lOT1_TABLETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.LOT1_TABLE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._lOT1_TABLETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._lOT2_DATATableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.LOT2_DATA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._lOT2_DATATableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As APCSDBDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._lOT2_TABLETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.LOT2_TABLE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._lOT2_TABLETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._mACHI_TABLETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.MACHI_TABLE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._mACHI_TABLETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._lOT1_DATATableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.LOT1_DATA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._lOT1_DATATableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._lOT1_TABLETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.LOT1_TABLE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._lOT1_TABLETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._lOT2_DATATableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.LOT2_DATA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._lOT2_DATATableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As APCSDBDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._lOT2_DATATableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.LOT2_DATA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._lOT2_DATATableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._lOT1_TABLETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.LOT1_TABLE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._lOT1_TABLETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._lOT1_DATATableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.LOT1_DATA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._lOT1_DATATableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._mACHI_TABLETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.MACHI_TABLE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._mACHI_TABLETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._lOT2_TABLETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.LOT2_TABLE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._lOT2_TABLETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As APCSDBDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._lOT1_DATATableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._lOT1_DATATableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._lOT1_TABLETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._lOT1_TABLETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._lOT2_DATATableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._lOT2_DATATableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._lOT2_TABLETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._lOT2_TABLETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._mACHI_TABLETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._mACHI_TABLETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._lOT1_DATATableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._lOT1_DATATableAdapter, Me._lOT1_DATATableAdapter.Connection)
                    Me._lOT1_DATATableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._lOT1_DATATableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._lOT1_DATATableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._lOT1_DATATableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._lOT1_DATATableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._lOT1_TABLETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._lOT1_TABLETableAdapter, Me._lOT1_TABLETableAdapter.Connection)
                    Me._lOT1_TABLETableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._lOT1_TABLETableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._lOT1_TABLETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._lOT1_TABLETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._lOT1_TABLETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._lOT2_DATATableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._lOT2_DATATableAdapter, Me._lOT2_DATATableAdapter.Connection)
                    Me._lOT2_DATATableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._lOT2_DATATableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._lOT2_DATATableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._lOT2_DATATableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._lOT2_DATATableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._lOT2_TABLETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._lOT2_TABLETableAdapter, Me._lOT2_TABLETableAdapter.Connection)
                    Me._lOT2_TABLETableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._lOT2_TABLETableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._lOT2_TABLETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._lOT2_TABLETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._lOT2_TABLETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._mACHI_TABLETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._mACHI_TABLETableAdapter, Me._mACHI_TABLETableAdapter.Connection)
                    Me._mACHI_TABLETableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._mACHI_TABLETableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._mACHI_TABLETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._mACHI_TABLETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._mACHI_TABLETableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._lOT1_DATATableAdapter) Is Nothing) Then
                    Me._lOT1_DATATableAdapter.Connection = CType(revertConnections(Me._lOT1_DATATableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._lOT1_DATATableAdapter.Transaction = Nothing
                End If
                If (Not (Me._lOT1_TABLETableAdapter) Is Nothing) Then
                    Me._lOT1_TABLETableAdapter.Connection = CType(revertConnections(Me._lOT1_TABLETableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._lOT1_TABLETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._lOT2_DATATableAdapter) Is Nothing) Then
                    Me._lOT2_DATATableAdapter.Connection = CType(revertConnections(Me._lOT2_DATATableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._lOT2_DATATableAdapter.Transaction = Nothing
                End If
                If (Not (Me._lOT2_TABLETableAdapter) Is Nothing) Then
                    Me._lOT2_TABLETableAdapter.Connection = CType(revertConnections(Me._lOT2_TABLETableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._lOT2_TABLETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._mACHI_TABLETableAdapter) Is Nothing) Then
                    Me._mACHI_TABLETableAdapter.Connection = CType(revertConnections(Me._mACHI_TABLETableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._mACHI_TABLETableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
